{
    "map": {},
    "generated": {
        "map": {
            "@blackbyte.sugar.shared.utils.assert": {
                "id": "@blackbyte.sugar.shared.utils.assert",
                "name": "assert",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "condition": {
                        "name": "condition",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "The condition to check",
                        "defaultStr": ""
                    },
                    "message": {
                        "name": "message",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "The error message to display if the condition fails",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Checks a condition and throws an error if the condition is not met",
                "namespace": "@blackbyte.sugar.shared.utils",
                "status": "stable",
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "assert.ts",
                "extension": "ts",
                "relPath": "src/shared/utils/assert.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.url.urlFromString": {
                "id": "@blackbyte.sugar.shared.url.urlFromString",
                "name": "urlFromString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    },
                    {
                        "name": "ts",
                        "description": ""
                    }
                ],
                "description": "Simple function that take a string as parameter and returns you a valid\nurl ready one",
                "namespace": "@blackbyte.sugar.shared.url",
                "status": "stable",
                "snippet": {
                    "label": "urlFromString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { urlFromString } from '@blackbyte/sugar/url';\nurlFromString('Sir James Paul McCartney MBE is an English singer-songwriter');\n// sir-james-paul-mc-cartney-mbe-is-an-english-singer-songwriter"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/url-slug",
                        "description": ""
                    }
                ],
                "filename": "urlFromString.ts",
                "extension": "ts",
                "relPath": "src/shared/url/urlFromString.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.url.queryStringToObject": {
                "id": "@blackbyte.sugar.shared.url.queryStringToObject",
                "name": "queryStringToObject",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "queryString": {
                        "name": "queryString",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The query string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The object representation of the query string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Transform a query string into his object (key =&gt; pairs) representation",
                "namespace": "@blackbyte.sugar.shared.url",
                "status": "stable",
                "snippet": {
                    "label": "queryStringToObject($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { queryStringToObject } from '@blackbyte/sugar/url'\nqueryStringToObject('?var1=value1&var2=value2') // { var1: 'value1', var2: 'value2' }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "http://stackoverflow.com/questions/8648892/convert-url-parameters-to-a-javascript-object",
                        "description": ""
                    }
                ],
                "filename": "queryStringToObject.ts",
                "extension": "ts",
                "relPath": "src/shared/url/queryStringToObject.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.url.gravatarUrl": {
                "id": "@blackbyte.sugar.shared.url.gravatarUrl",
                "name": "gravatarUrl",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "email": {
                        "name": "email",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user email",
                        "defaultStr": ""
                    },
                    "size": {
                        "name": "size",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The wanted image size. From 1 to 2048",
                        "default": 200,
                        "defaultStr": "200"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The generated gravatar url"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Return a gravatar url depending on the passed user email and size",
                "namespace": "@blackbyte.sugar.shared.url",
                "status": "stable",
                "snippet": {
                    "label": "gravatarUrl($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { gravatarUrl } from '@blackbyte/sugar/url';\ngravatarUrl('olivier.bossel@gmail.com'); // https://www.gravatar.com/avatar/b5df60055b6287bb7c90c0078ce20a5f"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "gravatarUrl.ts",
                "extension": "ts",
                "relPath": "src/shared/url/gravatarUrl.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.type.parseTypeString": {
                "id": "@blackbyte.sugar.shared.type.parseTypeString",
                "name": "parseTypeString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "typeString": {
                        "name": "typeString",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The type string to parse",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "array",
                                "of": [
                                    "TTypeStringObject"
                                ]
                            }
                        ],
                        "raw": "TTypeStringObject[]"
                    },
                    "description": "An array of object(s) describing the type string passed"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This method simply parse the passed typeString like &quot;string | number&quot;, or &quot;string &amp; path&quot;, etc... and return\nan object defining this type string",
                "namespace": "@blackbyte.sugar.shared.type",
                "status": "beta",
                "snippet": {
                    "label": "parseTypeString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { parseTypeString } from '@blackbyte/sugar/type';\nparseTypeString('string|number');\n//[{\n//   type: 'string',\n//   of: undefined,\n//}, {\n//   type: 'number',\n//   of: undefined,\n//}]"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "parseTypeString.ts",
                "extension": "ts",
                "relPath": "src/shared/type/parseTypeString.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.time.convert24To12": {
                "id": "@blackbyte.sugar.shared.time.convert24To12",
                "name": "convert24To12",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "time": {
                        "name": "time",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The 24 hours time like \"23:00\"",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The 12 hours time like \"11:00pm\""
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert a 24 hours time to a 12 hours time format",
                "namespace": "@blackbyte.sugar.shared.time",
                "status": "stable",
                "snippet": {
                    "label": "convert24To12($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { convert24To12 } from '@blackbyte/sugar/time'\nconvert24To12('23:12') // => '11:12pm'"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "convert24To12.ts",
                "extension": "ts",
                "relPath": "src/shared/time/convert24To12.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.time.convert12To24": {
                "id": "@blackbyte.sugar.shared.time.convert12To24",
                "name": "convert12To24",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "time": {
                        "name": "time",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "String|Number"
                        },
                        "description": "The 12 hours time to convert formatted like \"12pm\" or \"12:30am\"",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The 24 hours time like \"23:00\""
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert a 12 hours time to a 24 hours time",
                "namespace": "@blackbyte.sugar.shared.time",
                "status": "stable",
                "snippet": {
                    "label": "convert12To24($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { convert12To24 } from '@blackbyte/sugar/time'\nconvert12To24('12pm') // => '12:00'"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "convert12To24.ts",
                "extension": "ts",
                "relPath": "src/shared/time/convert12To24.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.urlCompliant": {
                "id": "@blackbyte.sugar.shared.string.urlCompliant",
                "name": "urlCompliant",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a string and return a version of it that you can safely use\nin url for example. It replace spaces with &#39;-&#39; as well as all the special characters\nwith their simple version like &quot;à&quot; will be replaces by &quot;a&quot;",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "beta",
                "snippet": {
                    "label": "urlCompliant($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "import { urlCompliant } from '@blackbyte/sugar/string';\nurlCompliant('Hello world'); // => hello-world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "urlCompliant.ts",
                "extension": "ts",
                "relPath": "src/shared/string/urlCompliant.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.upperFirst": {
                "id": "@blackbyte.sugar.shared.string.upperFirst",
                "name": "upperFirst",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string with first letter uppercase"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Upper first",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "upperFirst($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { upperFirst } from '@blackbyte/sugar/string'\nupperFirst('hello world') // Hello world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "upperFirst.ts",
                "extension": "ts",
                "relPath": "src/shared/string/upperFirst.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.unquote": {
                "id": "@blackbyte.sugar.shared.string.unquote",
                "name": "unquote",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TUnquoteSettings"
                                }
                            ],
                            "raw": "TUnquoteSettings"
                        },
                        "description": "Some settings to configure your unquoting process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The unquoted string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Remove the quotes of a string\nTypes of quotes removed :\n- `&quot;`, `&#39;`, `”`, &#39;`&#39;",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "unquote($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { unquote } from '@blackbyte/sugar/string'\nunquote(\"'Hello world'\") // \"Hello world\""
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "unquote.ts",
                "extension": "ts",
                "relPath": "src/shared/string/unquote.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.uncamelize": {
                "id": "@blackbyte.sugar.shared.string.uncamelize",
                "name": "uncamelize",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to uncamelize",
                        "defaultStr": ""
                    },
                    "separator": {
                        "name": "separator",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The separator to use",
                        "default": "'-'",
                        "defaultStr": "'-'"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The uncamelized string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Uncamelize a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "uncamelize($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { uncamelize } from '@blackbyte/sugar/string'\nuncamelize('helloWorldAndUniverse') // hello-world-and-universe"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "uncamelize.ts",
                "extension": "ts",
                "relPath": "src/shared/string/uncamelize.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.truncate": {
                "id": "@blackbyte.sugar.shared.string.truncate",
                "name": "truncate",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "str": {
                        "name": "str",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to truncate",
                        "defaultStr": ""
                    },
                    "length": {
                        "name": "length",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The length to truncate to",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TTruncateSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TTruncateSettings>"
                        },
                        "description": "Some settings to configure your truncate process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The truncated string"
                },
                "setting": {
                    "ellipsis": {
                        "name": "ellipsis",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The ellipsis to add at the end of the truncated string",
                        "default": "'...'",
                        "defaultStr": "'...'"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Truncate a string to a specific length and add an ellipsis at the end",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "truncate($1, $2, $3)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import truncate from '@blackbyte/sugar/string';\ntruncate('Hello world', 5); // => Hello..."
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "truncate.ts",
                "extension": "ts",
                "relPath": "src/shared/string/truncate.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.trimLines": {
                "id": "@blackbyte.sugar.shared.string.trimLines",
                "name": "trimLines",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to trim lines of",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object settings. Here's the object properties:",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "setting": {
                    "leftPadding": {
                        "name": "leftPadding",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "Specify a left padding to set. 1 padding represent 1 space character",
                        "default": 0,
                        "defaultStr": "0"
                    },
                    "rightPadding": {
                        "name": "rightPadding",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "Specify a right padding to set.",
                        "default": 0,
                        "defaultStr": "0"
                    },
                    "keepEmptyLines": {
                        "name": "keepEmptyLines",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to keep empty lines or not",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a string and trim each lines",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "trimLines($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { trimLines } from '@blackbyte/sugar/string';\ntrimLines(`my cool lines\n     that have some lines to trim\nand some not...`);\n// my cool lines\n// that have some lines to trim\n// and some not..."
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "trimLines.ts",
                "extension": "ts",
                "relPath": "src/shared/string/trimLines.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.trainCase": {
                "id": "@blackbyte.sugar.shared.string.trainCase",
                "name": "trainCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Train case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "trainCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { trainCase } from '@blackbyte/sugar/string';\ntrainCase('hello world'); // => Hello-World"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "trainCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/trainCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.toString": {
                "id": "@blackbyte.sugar.shared.string.toString",
                "name": "toString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to convert to string",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of settings to configure your toString process:",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The resulting string"
                },
                "setting": {
                    "beautify": {
                        "name": "beautify",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to beautify the output like objects, arrays, etc...",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "verbose": {
                        "name": "verbose",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to output verbose information like stack trace, etc...",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert passed value to a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "toString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { toString } from '@blackbyte/sugar/string'\ntoString({\n\tid:'hello'\n}) // '{\"id\":\"hello\"}'"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "toString.ts",
                "extension": "ts",
                "relPath": "src/shared/string/toString.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.stripSourcemap": {
                "id": "@blackbyte.sugar.shared.string.stripSourcemap",
                "name": "stripSourcemap",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "str": {
                        "name": "str",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take a string and get rid of all sourcemap",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "stripSourcemap($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { stripSourcemap } from '@blackbyte/sugar/string';\nstripSourcemap('...');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "stripSourcemap.ts",
                "extension": "ts",
                "relPath": "src/shared/string/stripSourcemap.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.stripDocblocks": {
                "id": "@blackbyte.sugar.shared.string.stripDocblocks",
                "name": "stripDocblocks",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "str": {
                        "name": "str",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take a string and get rid of all docblocks",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "stripDocblocks($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { stripDocblocks } from '@blackbyte/sugar/string';\nstripDocblocks('...');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "stripDocblocks.ts",
                "extension": "ts",
                "relPath": "src/shared/string/stripDocblocks.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.stripAnsi": {
                "id": "@blackbyte.sugar.shared.string.stripAnsi",
                "name": "stripAnsi",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to strip ansi from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The new string without any ansi characters"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply strip all the ansi characters in a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "__stripAnsi($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { stripAnsi } from '@blackbyte/sugar/string';\nstripAnsi('\\u001B]8;;https://github.com\\u0007Click\\u001B]8;;\\u0007'); // => Click"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/strip-ansi",
                        "description": ""
                    }
                ],
                "filename": "stripAnsi.ts",
                "extension": "ts",
                "relPath": "src/shared/string/stripAnsi.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.sprintf": {
                "id": "@blackbyte.sugar.shared.string.sprintf",
                "name": "sprintf",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "format": {
                        "name": "format",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The format of the string wanted as output",
                        "defaultStr": ""
                    },
                    "...replacements": {
                        "name": "...replacements",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The replacement tokens to apply to the string",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Javascript implementation of the sprintf php function.\n&gt;For more infos, check [this github repository](https://github.com/alexei/sprintf.js)",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "sprintf($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sprintf } from '@blackbyte/sugar/string'\nsprintf('Hello %s', 'world') // Hello World\nconst user = { name: 'Dolly' }\nsprintf('Hello %(name)s', user) // Hello Dolly"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/alexei/sprintf.js",
                        "description": ""
                    }
                ],
                "filename": "sprintf.ts",
                "extension": "ts",
                "relPath": "src/shared/string/sprintf.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.splitEvery": {
                "id": "@blackbyte.sugar.shared.string.splitEvery",
                "name": "splitEvery",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The text to split",
                        "defaultStr": ""
                    },
                    "every": {
                        "name": "every",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "How many characters to split the text",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial<TSplitEverySettings"
                                }
                            ],
                            "raw": "Partial<TSplitEverySettings"
                        },
                        "description": "Some settings to configure your split process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "An array of the splited text parts"
                },
                "setting": {
                    "splitWords": {
                        "name": "splitWords",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "If you want to split the words or not...",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Split a string every n chars either by taking care of not spliting the words, or by simply spliting without any attention to that...",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "splitEvery($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { splitEvery } from '@blackbyte/sugar/string';\nsplitEvery('Hello World', 2, {\n   splitWords: true\n}); // => ['He','ll','o ','Wo','rl','d']"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "splitEvery.ts",
                "extension": "ts",
                "relPath": "src/shared/string/splitEvery.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.snakeCase": {
                "id": "@blackbyte.sugar.shared.string.snakeCase",
                "name": "snakeCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Snake case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "snakeCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { snakeCase } from '@blackbyte/sugar/string';\nsnakeCase('hello world'); // => hello_world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "snakeCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/snakeCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.simplifySpecialChars": {
                "id": "@blackbyte.sugar.shared.string.simplifySpecialChars",
                "name": "simplifySpecialChars",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "str": {
                        "name": "str",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a string and replace all the special chars like &quot;é&quot;, &quot;à&quot;, etc...\nwith their simple version like &quot;a&quot;, &quot;e&quot;, etc...",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "simplifySpecialChars($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "import { simplifySpecialChars } from '@blackbyte/sugar/string';\nsimplifySpecialChars('É'); // E"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/questions/14114411/remove-all-special-characters-from-a-string/14114443",
                        "description": ""
                    }
                ],
                "filename": "simplifySpecialChars.ts",
                "extension": "ts",
                "relPath": "src/shared/string/simplifySpecialChars.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.simply": {
                "id": "@blackbyte.sugar.shared.string.simply",
                "name": "simply",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to simplyfy",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of settings to simplify your string as you want:",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The simplified string"
                },
                "setting": {
                    "specialChars": {
                        "name": "specialChars",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to get rid of the special chars like é, è, etc...",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "lowerCase": {
                        "name": "lowerCase",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want your returned string to be lowercased",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "dashSpace": {
                        "name": "dashSpace",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to replace the \"_|-\" by a space",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "[trim=true}": {
                        "name": "[trim=true}",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want your string to be trimed or not",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a string with accents, etc and convert it to a more simply\nversion like &quot;éàddö&quot; to &quot;eaddo&quot;",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "simplify($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { simplify } from '@blackbyte/sugar/string';\nsimplify('éàddö'); // => eaddo"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "João Filipe Ventura Coelho",
                    "email": "joaoventura93@outlook.com"
                },
                "filename": "simplify.ts",
                "extension": "ts",
                "relPath": "src/shared/string/simplify.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.sentenceCase": {
                "id": "@blackbyte.sugar.shared.string.sentenceCase",
                "name": "sentenceCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Sentence case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "sentenceCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sentenceCase } from '@blackbyte/sugar/string';\nsentenceCase('hello world'); // => Hello world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "sentenceCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/sentenceCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.rtrim": {
                "id": "@blackbyte.sugar.shared.string.rtrim",
                "name": "rtrim",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to trim",
                        "defaultStr": ""
                    },
                    "needle": {
                        "name": "needle",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to find an cut out if found",
                        "defaultStr": ""
                    },
                    "trimResult": {
                        "name": "trimResult",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to trim the trimed string",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The trimed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Trim right a specified string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "rtrim($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { rtrim } from '@blackbyte/sugar/string'\nrtrim('Hello World', 'ld') // Hello Wor"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "rtrim.ts",
                "extension": "ts",
                "relPath": "src/shared/string/rtrim.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.string.replaceTokens": {
                "id": "@blackbyte.sugar.js.string.replaceTokens",
                "name": "replaceTokens",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    },
                    "tokensObj": {
                        "name": "tokensObj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The arguments/value object",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "A settings object to configure the parsing process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "setting": {
                    "regexp": {
                        "name": "regexp",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The regexp to use to match the tokens",
                        "default": "\\[([a-zA-Z0-9-_]+)\\",
                        "defaultStr": "\\[([a-zA-Z0-9-_]+)\\"
                    },
                    "stripUndefined": {
                        "name": "stripUndefined",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to strip the tokens that are not found in the tokensObj",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function takes as parameter a tokened string like &quot;something [cool]&quot;, an object\nof arguments/values and return the processed string with the tokens replaced by the arguments values.",
                "namespace": "@blackbyte.sugar.js.string",
                "status": "stable",
                "snippet": {
                    "label": "replaceTokens($1, $2)",
                    "code": "replaceTokens($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { replaceTokens } from '@blackbyte/sugar/string';\nreplaceTokens('hello [world]', { world: 'Coco' }); // => hello Coco"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "Add setting to define tokens delimiter"
                    },
                    {
                        "priority": "normal",
                        "description": "Support multi level tokens like [something.cool]"
                    },
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "replaceTokens.ts",
                "extension": "ts",
                "relPath": "src/shared/string/replaceTokens.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.replaceChunks": {
                "id": "@blackbyte.sugar.shared.string.replaceChunks",
                "name": "replaceChunks",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    },
                    "chunks": {
                        "name": "chunks",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String[]"
                        },
                        "description": "The chunks to replace",
                        "defaultStr": ""
                    },
                    "replacer": {
                        "name": "replacer",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The replacer function that need to return a string with which you want to replace the token",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The new string with replaced chunks"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Replace the passed &quot;chunks&quot; with the result of the passed replacer function.\nThe replacer function take as argument the token value",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "replaceChunks($1, [$2], $3)",
                    "code": "_replaceChunks($1, [$2], (token) => {\n     return $3;\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { replaceChunks } from '@blackbyte/sugar/string'\nreplaceChunks('hello world', ['or'], (token) => {\n     return `<span>${token}</span>;\n}) // Hello w<span>or</span>ld"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "replaceChunks.ts",
                "extension": "ts",
                "relPath": "src/shared/string/replaceChunks.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.printf": {
                "id": "@blackbyte.sugar.shared.string.printf",
                "name": "printf",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "source": {
                        "name": "source",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The source in which to replace the tokens",
                        "defaultStr": ""
                    },
                    "values...": {
                        "name": "values...",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "Any number of arguments to replace the placeholders in the string",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The resulting string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "printf php equavalent",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "printf($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { printf } from '@blackbyte/sugar/string';\nprintf('Hello %s', 'world'); // => Hello world\nprintf('Hello %s, I\\'m %s', 'world', 'John Doe'); // Hello world, I'm John Doe\nprintf('Hello %(first)s, I\\'m %(name)s', { first : 'world', name : 'John Doe'}); // Hello world, I'm John Doe"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/sprintf-js",
                        "description": ""
                    }
                ],
                "filename": "printf.ts",
                "extension": "ts",
                "relPath": "src/shared/string/printf.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.pathCase": {
                "id": "@blackbyte.sugar.shared.string.pathCase",
                "name": "pathCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Path case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "pathCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { pathCase } from '@blackbyte/sugar/string';\npathCase('hello world'); // => hello/world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "pathCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/pathCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.pascalSnakeCase": {
                "id": "@blackbyte.sugar.shared.string.pascalSnakeCase",
                "name": "pascalSnakeCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Pascal snake case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "pascalSnakeCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { pascalSnakeCase } from '@blackbyte/sugar/string';\npascalSnakeCase('hello world'); // => Hello_World"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "pascalSnakeCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/pascalSnakeCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.pascalCase": {
                "id": "@blackbyte.sugar.shared.string.pascalCase",
                "name": "pascalCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Pascal case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "pascalCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { pascalCase } from '@blackbyte/sugar/string';\npascalCase('hello world'); // => HelloWorld"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "pascalCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/pascalCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.parse": {
                "id": "@blackbyte.sugar.shared.string.parse",
                "name": "parse",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The value to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Mixed"
                            }
                        ],
                        "raw": "Mixed"
                    },
                    "description": "The converted value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Parse a string and convert it into his native data type like date, number, boolean, etc...\nThis function take care of the following types:\n- boolean\n- number\n- null\n- undefined\n- json",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "parse($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { parse } from '@blackbyte/sugar/string';\n parse('10'); // => 10"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "parse.ts",
                "extension": "ts",
                "relPath": "src/shared/string/parse.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.paramCase": {
                "id": "@blackbyte.sugar.shared.string.paramCase",
                "name": "paramCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The converted string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function transform a string into a param case one like so &quot;something-cool&quot;",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "paramCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { paramCase } from '@blackbyte/sugar/string';\nparamCase('some thoing cool'); // => some-thing-cool"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "paramCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/paramCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.noCase": {
                "id": "@blackbyte.sugar.shared.string.noCase",
                "name": "noCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "No case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "noCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { noCase } from '@blackbyte/sugar/string';\nnoCase('hello world'); // => hello world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "noCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/noCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.namespaceCompliant": {
                "id": "@blackbyte.sugar.shared.string.namespaceCompliant",
                "name": "namespaceCompliant",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a string and return a version of it that you can safely use\nas a namespace with just dots and non special characters.",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "beta",
                "snippet": {
                    "label": "namespaceCompliant($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "import { namespaceCompliant } from '@blackbyte/sugar/string';\nnamespaceCompliant('Hello world'); // => hello-world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "namespaceCompliant.ts",
                "extension": "ts",
                "relPath": "src/shared/string/namespaceCompliant.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.ltrim": {
                "id": "@blackbyte.sugar.shared.string.ltrim",
                "name": "ltrim",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to trim",
                        "defaultStr": ""
                    },
                    "needle": {
                        "name": "needle",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to find an cut out if found",
                        "defaultStr": ""
                    },
                    "trimResult": {
                        "name": "trimResult",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "If you want to trim the resulted ltrim",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The trimed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Trim left a specified string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "ltrim($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { ltrim } from '@blackbyte/sugar/string'\n ltrim('Hello World', 'Hello') // World"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "ltrim.ts",
                "extension": "ts",
                "relPath": "src/shared/string/ltrim.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.lowerFirst": {
                "id": "@blackbyte.sugar.shared.string.lowerFirst",
                "name": "lowerFirst",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to lower the first letter",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The string with the first letter lowered"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Lower first letter",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "lowerFirst($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { lowerFirst } from '@blackbyte/sugar/string'\nlowerFirst('Hello world') // hello world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "lowerFirst.ts",
                "extension": "ts",
                "relPath": "src/shared/string/lowerFirst.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.kebabCase": {
                "id": "@blackbyte.sugar.shared.string.kebabCase",
                "name": "kebabCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Kebab case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "kebabCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { kebabCase } from '@blackbyte/sugar/string';\nkebabCase('hello world'); // => Hello World"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "kebabCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/kebabCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.idCompliant": {
                "id": "@blackbyte.sugar.shared.string.idCompliant",
                "name": "idCompliant",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a string and return a version of it that you can safely use\nin html id for example. It replace spaces with &#39;-&#39; as well as all the special characters\nwith their simple version like &quot;à&quot; will be replaces by &quot;a&quot;",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "idCompliant($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "import { idCompliant } from '@blackbyte/sugar/string';\nidCompliant('Hello world'); // => hello-world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "idCompliant.ts",
                "extension": "ts",
                "relPath": "src/shared/string/idCompliant.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.highlightText": {
                "id": "@blackbyte.sugar.shared.string.highlightText",
                "name": "highlightText",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ctx": {
                        "name": "ctx",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "String|HTMLElement"
                        },
                        "description": "The string or HTMLElement in which to highlight the text",
                        "defaultStr": ""
                    },
                    "search": {
                        "name": "search",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                },
                                {
                                    "type": "RegExp"
                                }
                            ],
                            "raw": "String|String[]|RegExp"
                        },
                        "description": "The text to highlight",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            },
                            {
                                "type": "HTMLElement"
                            }
                        ],
                        "raw": "String|HTMLElement"
                    },
                    "description": "The processed string or HTMLElement"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to highlight some text in a string or in an HTMLElement",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "highlightText($1, $2)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "import { highlightText } from '@blackbyte/sugar/string';\nhighlightText('Hello world', 'llo'); // => He<span class=\"-highlight\">llo</span> world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://markjs.io",
                        "description": ""
                    }
                ],
                "filename": "highlightText.ts",
                "extension": "ts",
                "relPath": "src/shared/string/highlightText.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.string.format": {
                "id": "@blackbyte.sugar.js.string.format",
                "name": "format",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to format",
                        "defaultStr": ""
                    },
                    "format": {
                        "name": "format",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The format to use",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The formatted value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Format the passed string using the requested format. Available formats are:\n- isoDate\n- isoDateTime\n- isoTime\n- integer\n- number\n- alphanum\n- hex\n- hexa\n- creditCard",
                "namespace": "@blackbyte.sugar.js.string",
                "status": "stable",
                "snippet": {
                    "label": "format($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { format } from '@blackbyte/sugar/string'"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/fecha",
                        "description": ""
                    }
                ],
                "filename": "format.ts",
                "extension": "ts",
                "relPath": "src/shared/string/format.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.extractSame": {
                "id": "@blackbyte.sugar.shared.string.extractSame",
                "name": "extractSame",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string1": {
                        "name": "string1",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string 1 to compare",
                        "defaultStr": ""
                    },
                    "string2": {
                        "name": "string2",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string 2 to compare",
                        "defaultStr": ""
                    },
                    "multiple": {
                        "name": "multiple",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to get back multiple same string if exists as an array",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            },
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "String|Array"
                    },
                    "description": "The same string part(s) found"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function return you what has been find the same in the two passed string.\nIt will return you either an array of same string parts or a simple string\nrepresenting the first same part found.",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "extractSame($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { extractSame } from '@blackbyte/sugar/string';\nextractSame('Hello world', 'Hello plop'); // => 'Hello '"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "extractSame.ts",
                "extension": "ts",
                "relPath": "src/shared/string/extractSame.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.escapeRegexChars": {
                "id": "@blackbyte.sugar.shared.string.escapeRegexChars",
                "name": "escapeRegexChars",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "str": {
                        "name": "str",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to escape regex characters from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The escaped string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Escape regex special characters from a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "escapeRegexChars($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { escapeRegexChars } from '@blackbyte/sugar/string';\nescapeRegexChars('/hello()'); // => \\/hello\\(\\)"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "escapeRegexChars.ts",
                "extension": "ts",
                "relPath": "src/shared/string/escapeRegexChars.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.dotCase": {
                "id": "@blackbyte.sugar.shared.string.dotCase",
                "name": "dotCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Capital case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "dotCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { dotCase } from '@blackbyte/sugar/string';\ndotCase('hello world'); // => hello.world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "dotCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/dotCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.dashCase": {
                "id": "@blackbyte.sugar.shared.string.dashCase",
                "name": "dashCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to dashCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The dashCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Dash case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "dashCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { dashCase } from '@blackbyte/sugar/string';\ndashCase('hello world'); // => hello-world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "dashCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/dashCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.crop": {
                "id": "@blackbyte.sugar.shared.string.crop",
                "name": "crop",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The text to crop",
                        "defaultStr": ""
                    },
                    "length": {
                        "name": "length",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The text length to have after the croping process",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of settings described bellow:",
                        "default": {},
                        "defaultStr": "{}",
                        "content": "- chars (...) {String}: The characters to use to signal the crop\n- splitWords (false) {Boolean}: Specify if you want to split words or not. If not, the function will make sure the final text does not exceeds the wanted length"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The cropped text"
                },
                "setting": {
                    "chars": {
                        "name": "chars",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The characters to use to signal the crop",
                        "default": "...",
                        "defaultStr": "..."
                    },
                    "splitWords": {
                        "name": "splitWords",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to split words or not. If not, the function will make sure the final text does not exceeds the wanted length",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Allows you to crop a string at a certain length (this length take care of the croping characters like &quot;...&quot;)",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "crop($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { crop } from '@blackbyte/sugar/string';\ncrop('Hello World', 10); // => Hello w..."
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "crop.ts",
                "extension": "ts",
                "relPath": "src/shared/string/crop.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.countLineChars": {
                "id": "@blackbyte.sugar.shared.string.countLineChars",
                "name": "countLineChars",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "line": {
                        "name": "line",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The line to count",
                        "defaultStr": ""
                    },
                    "count": {
                        "name": "count",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "Specify what you want to count outside of the normal characters of yourse. Here's the list of available options:",
                        "default": {},
                        "defaultStr": "{}",
                        "content": "- htmlTags (false) {Boolean}: Specify if you want to count the html tags or not\n- terminalSpecialChars (false) {Boolean}: Specify if you want to count the terminal specials chars like \"\\u001b[30m\", etc...\n- newLineChars (false) {Boolean}: Specify if you want to count the new line special char \"\\n\" or not"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "How many characters their is in the line"
                },
                "setting": {
                    "htmlTags": {
                        "name": "htmlTags",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to count the html tags or not",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "terminalSpecialChars": {
                        "name": "terminalSpecialChars",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to count the terminal specials chars like \"\\u001b[30m\", etc...",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "newLineChars": {
                        "name": "newLineChars",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to count the new line special char \"\\n\" or not",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Count how many characters their is in the passed line.\nThis function will exclude the characters like the html tags like &lt;red&gt;, etc...",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "countLineChars($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { countLineChars } from '@blackbyte/sugar/string';\n countLineChars('Hello <red>World</red>'); // 11"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "countLineChars.ts",
                "extension": "ts",
                "relPath": "src/shared/string/countLineChars.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.constantCase": {
                "id": "@blackbyte.sugar.shared.string.constantCase",
                "name": "constantCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Constant case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "constantCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { constantCase } from '@blackbyte/sugar/string';\nconstantCase('hello world'); // => HELLO_WORLD"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "constantCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/constantCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.capitalCase": {
                "id": "@blackbyte.sugar.shared.string.capitalCase",
                "name": "capitalCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to snakeCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The snakeCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Capital case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "capitalCase($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { capitalCase } from '@blackbyte/sugar/string';\ncapitalCase('hello world'); // => HELLO WORLD"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "capitalCase.ts",
                "extension": "ts",
                "relPath": "src/shared/string/capitalCase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.camelCase": {
                "id": "@blackbyte.sugar.shared.string.camelCase",
                "name": "camelCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to camelCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The camelCased string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Capital case a string",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "camelize($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { camelize } from '@blackbyte/sugar/string';\ncamelize('hello world'); // => helloWorld"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "camelize.ts",
                "extension": "ts",
                "relPath": "src/shared/string/camelize.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.perf.speedIndex": {
                "id": "@blackbyte.sugar.shared.perf.speedIndex",
                "name": "speedIndex",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "slow": {
                        "name": "slow",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "How many loops a \"slow\" computer can make in 100ms",
                        "default": 100000,
                        "defaultStr": "100000"
                    },
                    "fast": {
                        "name": "fast",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "How many loops a \"fast\" computer can make in 100ms",
                        "default": 1400000,
                        "defaultStr": "1400000"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The speed index calculated from the passed params and the loops the computer can make in 100ms"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function gives you back an index usually between 0 and 100 that represent\nthe speed estimation of the computer on which this code runs.\nThis index is calculated by estimating the loops (for) count that the computer\ncan make in 100ms and make use of the &quot;slow&quot; and &quot;fast&quot; parameters that represent\nan average of how many loops a &quot;slow&quot; computer can do in this timeframe, vs how many loops a &quot;fast&quot;\ncomputer can make in this timeframe.\nYou can totally update these parameters as you prefer.\nNote that these parameters can/will be updated during time to reflect the most\naverage cases possible.",
                "namespace": "@blackbyte.sugar.shared.perf",
                "status": "stable",
                "snippet": {
                    "label": "speedIndex($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { speedIndex } from '@blackbyte/sugar/perf';\nspeedIndex(); // 78"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "speedIndex.ts",
                "extension": "ts",
                "relPath": "src/shared/perf/speedIndex.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.perf.loopsCount": {
                "id": "@blackbyte.sugar.shared.perf.loopsCount",
                "name": "loopsCount",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "timeframe": {
                        "name": "timeframe",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The timeframe to use for calculation",
                        "default": 100,
                        "defaultStr": "100"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The count of loops executed in the passed timeframe"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function calculate how mane loops are executed in a certain timeframe (ms).\nThis is usefull to estimate the computer speed on which this code is running...",
                "namespace": "@blackbyte.sugar.shared.perf",
                "status": "stable",
                "snippet": {
                    "label": "loopsCount($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { loopsCount } from '@blackbyte/sugar/perf';\nloopsCount(); // 122003"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "loopsCount.ts",
                "extension": "ts",
                "relPath": "src/shared/perf/loopsCount.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.package.parseAuthorString": {
                "id": "@blackbyte.sugar.shared.package.parseAuthorString",
                "name": "parseAuthorString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to parse",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The plain object version of the string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take an author string like &quot;Olivier Bossel &lt;olivier.bossel@gmail.com&gt; (https://blackbyte.space)&quot; and\ntransform it into a plain object with these properties: name, email and url",
                "namespace": "@blackbyte.sugar.shared.package",
                "status": "stable",
                "snippet": {
                    "label": "parseAuthorString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { parseAuthorString } from '@blackbyte/sugar/package';\n parseAuthorString(\"Olivier Bossel <olivier.bossel@gmail.com> (https://blackbyte.space)\")\n// => {\n  \"name\": \"Olivier Bossel\",\n  \"email\": \"olivier.bossel@gmail.com\",\n  \"url\": \"https://olivierbossel.com\"\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "parseAuthorString.ts",
                "extension": "ts",
                "relPath": "src/shared/package/parseAuthorString.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.package.formatPackageJson": {
                "id": "@blackbyte.sugar.shared.package.formatPackageJson",
                "name": "formatPackageJson",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "json": {
                        "name": "json",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The json to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The standardized json"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take a package.json JSON formatted object and standardize\nsome fields like the &quot;author&quot; one to be sure it is an object at the end,\nthe &quot;contributors&quot; array the same way as the &quot;author&quot; one, etc... Here&#39;s the list\nof processed actions:\n1. Transform the string version of the &quot;author&quot; field into an object with the properties &quot;name&quot;, &quot;email&quot; and &quot;url&quot;\n2. Transform the string version of the &quot;contributors&quot; field into an object with the properties &quot;name&quot;, &quot;email&quot; and &quot;url&quot;",
                "namespace": "@blackbyte.sugar.shared.package",
                "status": "stable",
                "snippet": {
                    "label": "formatPackageJson($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { formatPackageJson } from '@blackbyte/sugar/package';\nformatPackageJson({\n   \"author\": \"Olivier Bossel <olivier.bossel@gmail.com> (https://blackbyte.space)\"\n}); // => {\n   \"author\": {\n     \"name\": \"Olivier Bossel\",\n     \"email\": \"olivier.bossel@gmail.com\",\n     \"url\": \"https://olivierbossel.com\"\n   }\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "formatPackageJson.ts",
                "extension": "ts",
                "relPath": "src/shared/package/formatPackageJson.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.toQueryString": {
                "id": "@blackbyte.sugar.shared.object.toQueryString",
                "name": "toQueryString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to serialize",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The query string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Transform an object (key =&gt; pairs) to a query string like &quot;?var1=value1&amp;var2&quot;",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "toQueryString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { toQueryString } from '@blackbyte/sugar/object'\nconsole.log(toQueryString({\n\tvalue1 : 'coco',\n\tvalue1 : 'plop'\n}));\n// => ?value1=coco&value2=plop"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "toQueryString.ts",
                "extension": "ts",
                "relPath": "src/shared/object/toQueryString.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.toPlainObject": {
                "id": "@blackbyte.sugar.shared.object.toPlainObject",
                "name": "toPlainObject",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": null,
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The new simple object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take an object as parameter and return a new one that does not have getters, setters, etc...",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "toPlainObject($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { toPlainObject } from '@blackbyte/sugar/object';\ntoPlainObject({ something: 'cool' });"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "toPlainObject.ts",
                "extension": "ts",
                "relPath": "src/shared/object/toPlainObject.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.toJson": {
                "id": "@blackbyte.sugar.shared.object.toJson",
                "name": "toJson",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Any"
                                }
                            ],
                            "raw": "Any"
                        },
                        "description": "The object to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "The converted object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert class instances to plain JSON object",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "toJson($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { toJson } from '@blackbyte/sugar/object';\nclass MyClass {\n     hello = 'world';\n     something() {}\n}\ntoJson(new MyClass()); // => { hello: 'world' }"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "toJson.ts",
                "extension": "ts",
                "relPath": "src/shared/object/toJson.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.sortDeep": {
                "id": "@blackbyte.sugar.shared.object.sortDeep",
                "name": "sortDeep",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to sort",
                        "defaultStr": ""
                    },
                    "sort": {
                        "name": "sort",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The sort function to use",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The sorted object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Sort an object properties the same way as the Array.sort do it but will do it recusrively to sort the object deeply.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "sortDeep($1, $2)",
                    "code": "sortDeep($1, (a, b) => {\n     $2\n})"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sortDeep } from '@blackbyte/sugar/object';\nsortDeep({\n   lolo: { weight: 2 },\n   coco: { weight: 10 },\n   plop: { weight: 5 },\n   aha: {\n     hello: 'world',\n     coco: 'plop'\n   }\n}, (a, b) => {\n   return a.key.localeCompare(b.key);\n});\n// {\n//   aha: {\n//      coco: 'plop',\n//      hello: 'world'\n//   }\n//   coco: { weight: 10 }\n//   lolo: { weight: 2 },\n//   plop: { weight: 5 },\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sortDeep.ts",
                "extension": "ts",
                "relPath": "src/shared/object/sortDeep.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.sort": {
                "id": "@blackbyte.sugar.shared.object.sort",
                "name": "sort",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to sort",
                        "defaultStr": ""
                    },
                    "sort": {
                        "name": "sort",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The sort function to use. If not specified, will sort the items by key alphabetically",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The sorted object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Sort an object properties the same way as the Array.sort do it.\nThe &quot;a&quot; and &quot;b&quot; argument passed to your sort function will have these properties:\n- key: The key of the object\n- value: The actual value of the object property",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "sort($1, $2)",
                    "code": "sort($1, (a, b) => {\n     // a.key - a.value | b.key - b.value\n     $2\n})"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sort } from '@blackbyte/sugar/object';\nsort({\n   coco: { weight: 10 },\n   lolo: { weight: 2 },\n   plop: { weight: 5 }\n}, (a, b) => {\n  return a.value.weight - b.value.weight;\n});\n// {\n//   lolo: { weight: 2 },\n//   plop: { weight: 5 },\n//   coco: { weight: 10 }\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sort.ts",
                "extension": "ts",
                "relPath": "src/shared/object/sort.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.set": {
                "id": "@blackbyte.sugar.shared.object.set",
                "name": "set",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object in which to set the value",
                        "defaultStr": ""
                    },
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String|String[]"
                        },
                        "description": "The object path where to set the value",
                        "defaultStr": ""
                    },
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to set",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Mixed"
                            }
                        ],
                        "raw": "Mixed"
                    },
                    "description": "Return the setted value if setted correctly, or undefined if something goes wrong..."
                },
                "setting": {
                    "preferAssign": {
                        "name": "preferAssign",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you prefer using Object.assign rather than = for objects to keep references",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Set an object value using a dotted object path like &quot;myObject.myProperty.myValue&quot; to set his position\nIf the path parameter is set to &#39;.&#39;, it will act like an `Object.assign(obj, value)`.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "set($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { set } from '@blackbyte/sugar/object';\n set('myObject.cool.value', 'Hello world'); // => Hello world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "set.ts",
                "extension": "ts",
                "relPath": "src/shared/object/set.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.remove": {
                "id": "@blackbyte.sugar.shared.object.remove",
                "name": "remove",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object in which to set the value",
                        "defaultStr": ""
                    },
                    "dotpath": {
                        "name": "dotpath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String|String[]"
                        },
                        "description": "The dotted object/array path to delete",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Delete an object/array property by passing a dotpath to the element you want to remove.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "remove($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { remove } from '@blackbyte/sugar/object';\nremove(myObject, 'my.cool.value');\nremove(myObject, 'my.cool.value.0');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "remove.ts",
                "extension": "ts",
                "relPath": "src/shared/object/remove.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.objectHash": {
                "id": "@blackbyte.sugar.shared.object.objectHash",
                "name": "objectHash",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "any"
                                }
                            ],
                            "raw": "any"
                        },
                        "description": "The object to hash",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "IObjectHashSettings"
                                }
                            ],
                            "raw": "IObjectHashSettings"
                        },
                        "description": "Some settings to configure your hash generation process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The calculated folder hash"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get back an integrity hash passed object.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "objectHash($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { objectHash } from '@blackbyte/sugar/object';\nobjectHash('my/cool/folder'); // => YZOrKDx9LCLd8X39PoFTflXGpRU=,"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/hash-sum",
                        "description": ""
                    }
                ],
                "filename": "objectHash.ts",
                "extension": "ts",
                "relPath": "src/shared/object/objectHash.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.merge": {
                "id": "@blackbyte.sugar.shared.object.merge",
                "name": "merge",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "args...": {
                        "name": "args...",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "Pass all the objects you want to merge",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The merged object result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Merge one object with another and return the merged object result. This merging implementation support:\n- Merging object with getters/setters\n- n numbers of objects as arguments",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "merge($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { merge } from '@blackbyte/sugar/object';\nmerge({a: 'hello'}, {a: 'plop', hello: 'world');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "merge.ts",
                "extension": "ts",
                "relPath": "src/shared/object/merge.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.map": {
                "id": "@blackbyte.sugar.shared.object.map",
                "name": "map",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to process",
                        "defaultStr": ""
                    },
                    "processor": {
                        "name": "processor",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The processor function that will take as parameters the current property value and the property name",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The processed object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This is the same function as the &quot;Array.map&quot; but for objects. It will iterate over all the properties\nof the passed object and pass the value to your process function. It will then save the property\nwith your processed value",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "map($1, $2)",
                    "code": "map($1, ({value, prop}) => {\n     $2\n})"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { map } from '@blackbyte/sugar/object';\nconst myObject = {\n   hello: 'world',\n   cat: 'Nelson'\n};\nmap(myObject, ({value, prop}) => {\n   return prop === 'hello' ? 'universe' : value;\n});\n{\n   hello: 'universe',\n   cat: 'Nelson'\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "map.ts",
                "extension": "ts",
                "relPath": "src/shared/object/map.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.getKeyByValue": {
                "id": "@blackbyte.sugar.shared.object.getKeyByValue",
                "name": "getKeyByValue",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object in which to search for the value",
                        "defaultStr": ""
                    },
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to find in the object",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The key of the wanted value or false if not found"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Return the key that correspond to the passed value in the passed object",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "getKeyByValue($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getKeyByValue } from '@blackbyte/sugar/object';\ngetKeyByValue({ hello: 'world' }, 'world'); // => hello"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getKeyByValue.ts",
                "extension": "ts",
                "relPath": "src/shared/object/getKeyByValue.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.getGlob": {
                "id": "@blackbyte.sugar.shared.object.getGlob",
                "name": "getGlob",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object in which to set the value",
                        "defaultStr": ""
                    },
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The dotted object path to get",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "A settings object to configure your glob get process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Mixed"
                            }
                        ],
                        "raw": "Mixed"
                    },
                    "description": "The getted value or \"undefined\" if nothing found..."
                },
                "setting": {
                    "deepize": {
                        "name": "deepize",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want the result object to be deepized using the ```deepize``` sugar function",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Retreive an object value using a dotted path like &quot;myObject.myProperty.myValue&quot;.\nIt support glob patterns like &quot;something..id&quot; and returns you a new object containing\nall values with the path that matches the passed glob pattern.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "getGlob($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getGlob } from '@blackbyte/sugar/object';\ngetGlob({\n hello: {\n    world: true,\n    plop: false\n}, 'hello.');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getGlob.ts",
                "extension": "ts",
                "relPath": "src/shared/object/getGlob.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.get": {
                "id": "@blackbyte.sugar.shared.object.get",
                "name": "get",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object in which to set the value",
                        "defaultStr": ""
                    },
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The dotted object path to get",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Mixed"
                            }
                        ],
                        "raw": "Mixed"
                    },
                    "description": "The getted value or \"undefined\" if nothing found..."
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Retreive an object value using a dotted path like &quot;myObject.myProperty.myValue&quot;",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "get($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { get } from '@blackbyte/sugar/object';\nget(myObject, 'my.cool.value'); // => 'Hello world'"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "get.ts",
                "extension": "ts",
                "relPath": "src/shared/object/get.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.flatten": {
                "id": "@blackbyte.sugar.shared.object.flatten",
                "name": "flatten",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to flatten",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of settings to configure your flatten process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The flatten object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Transform the passed multiple level object into a single level one",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "flatten($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { flatten } from '@blackbyte/sugar/object';\nflatten({\n   hello: {\n     world: 'Coco'\n   }\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": ".",
                        "description": "https://www.npmjs.com/package/flat"
                    }
                ],
                "filename": "flatten.ts",
                "extension": "ts",
                "relPath": "src/shared/object/flatten.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.filterObject": {
                "id": "@blackbyte.sugar.shared.object.filterObject",
                "name": "filterObject",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to filter",
                        "defaultStr": ""
                    },
                    "filter": {
                        "name": "filter",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The filter function that take as parameter the property itself, and the property name",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The filtered object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Allow to filter an object using a function. It works the same as the filter method on the Array object type.\nThe passed filter function will have as parameter each object properties and must return true or false depending if you want the\npassed property in the filtered object",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "filterObject($1, $2)",
                    "code": "filterObject"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { filterObject } from '@blackbyte/sugar/object';\nfilterObject({\n   coco: 'hello',\n   plop: true\n}, (key, item) => typeof item === 'string');\n// { coco: 'hello' }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "filterObject.ts",
                "extension": "ts",
                "relPath": "src/shared/object/filterObject.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.ensurePropertyExists": {
                "id": "@blackbyte.sugar.shared.object.ensurePropertyExists",
                "name": "ensurePropertyExists",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object on which to check the path existence",
                        "defaultStr": ""
                    },
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The dotted object path to check",
                        "defaultStr": ""
                    },
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to set to the object path created if not already exist",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Pass a string like &quot;my.cool.object&quot; and the value it has to be and this function will ensure that this deep object exist",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "ensurePropertyExists($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { ensurePropertyExists } from '@blackbyte/sugar/object';\nconst myObj = { hello: 'world' }«\nensurePropertyExists(myObj, 'cool.object', {});\n// { hello: 'world', cool: { object: {} } }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "ensurePropertyExists.ts",
                "extension": "ts",
                "relPath": "src/shared/object/ensurePropertyExists.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.diff": {
                "id": "@blackbyte.sugar.shared.object.diff",
                "name": "diff",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object1": {
                        "name": "object1",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The first object used for the diff process",
                        "defaultStr": ""
                    },
                    "object2": {
                        "name": "object2",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The second object used for the diff process",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of settings to configure the diff process:",
                        "default": {},
                        "defaultStr": "{}",
                        "content": "- deep (true) {Boolean}: Specify if you want a deep diff or a simple one level diff\n- added (true) {Boolean}: Specify if you want to include the props that does not exist on the object1 but exists on the object2\n- deleted (false) {Boolean}: Specify if you want to include the props that exists on the object1 but no more on the object2\n- equals (false) {Boolean}: Specify if you want to include the props that are equals from the object1 to the object2\n- emptyObject (false) {Boolean}: Specify if you want to keep the empty objects in the resulting one\n- updated (true) {Boolean}: Specify if you want to include the updated values"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The object that contains only the differences between the two"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take two objects and return an object that contains only what has been changed between the two.\nThis function is a simple wrapper around the nice object-diff package from Thomas Jensen that you can find here: https://www.npmjs.com/package/object-diff",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "diff($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { diff } from '@blackbyte/sugar/object';\nconst myObject1 = {\n   hello: 'world',\n   plop: 'yop'\n};\nconst myObject2 = {\n   coco: 'plop',\n   hello: 'hey!',\n   plop: 'yop'\n};\ndiff(myObject1, myObject2);\n{\n   coco: 'plop',\n   hello: 'hey!'\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/is-equal",
                        "description": ""
                    }
                ],
                "filename": "diff.ts",
                "extension": "ts",
                "relPath": "src/shared/object/diff.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.deleteProperty": {
                "id": "@blackbyte.sugar.shared.object.deleteProperty",
                "name": "deleteProperty",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object on which you want to delete the property",
                        "defaultStr": ""
                    },
                    "dotPath": {
                        "name": "dotPath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The dotpath to the property you want to delete",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Delete an object property using a dotPath like &quot;something.else&quot;",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "deleteProperty($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { deleteProperty } from '@blackbyte/sugar/object';\nconst myObject = {\n   hello: 'world',\n   plop: 'yop'\n};\ndeleteProperty(myObject, 'plop');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deleteProperty.ts",
                "extension": "ts",
                "relPath": "src/shared/object/deleteProperty.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.deepize": {
                "id": "@blackbyte.sugar.shared.object.deepize",
                "name": "deepize",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The converted object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take an object like this one:\n\n```js\n{\n  &#39;something.cool&#39;: &#39;hello&#39;\n}\n```\n\nand convert it to something like this:\n\n```js\n{\n  something: {\n    cool: &#39;hello&#39;\n  }\n}\n```",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "deepize($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { deepize } from '@blackbyte/sugar/object';\ndeepize({ 'something.cool': 'hello' }); // => { something: { cool: 'hello' } }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/flat",
                        "description": ""
                    }
                ],
                "filename": "deepize.ts",
                "extension": "ts",
                "relPath": "src/shared/object/deepize.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.deepSearch": {
                "id": "@blackbyte.sugar.shared.object.deepSearch",
                "name": "deepSearch",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to search in",
                        "defaultStr": ""
                    },
                    "filter": {
                        "name": "filter",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The filter function that take as parameter the property itself, and the property name",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The searched object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take an object and a filter function that will be called for each properties of the object\nand that will return true or false depending on the property you want to keep or not.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "example": [
                    {
                        "language": "js",
                        "code": "import { deepSearch } from '@blackbyte/sugar/object';\ndeepSearch ({\n   coco: 'hello',\n   plop: true,\n   sub: {\n     property: 'world'\n   }\n}, ({key, item}) => typeof item === 'string');\n// {\n//   coco: 'hello',\n//   sub: {\n//     property: 'world'\n//   }\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepSearch.ts",
                "extension": "ts",
                "relPath": "src/shared/object/deepSearch.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.deepMerge": {
                "id": "@blackbyte.sugar.shared.object.deepMerge",
                "name": "deepMerge",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "objects": {
                        "name": "objects",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        "any"
                                    ]
                                }
                            ],
                            "raw": "any[]"
                        },
                        "description": "Pass all the objects you want to merge",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TDeepMergeSettings"
                                }
                            ],
                            "raw": "TDeepMergeSettings"
                        },
                        "description": "Some settings to configure your merging process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The merged object result"
                },
                "setting": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Merge or not arrays",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "clone": {
                        "name": "clone",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want the result object to be a clone or the same first passed object",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Deep merge one object with another and return the merged object result. This merging implementation support:\n- Merging object with getters/setters\n- n numbers of objects as arguments\n- Choose beetween cloning first (default) the object or keeping the first passed object as result\nNote that by default the resulting object is a clone and do not have the same reference that the first passed object.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "deepMerge($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { deepMerge } from '@blackbyte/sugar/object';\ndeepMerge([{a: {b: {c: 'c', d: 'd'}}}, {a: {b: {e: 'e', f: 'f'}}}]);\n// => { a: { b: { c: 'c', d: 'd', e: 'e', f: 'f' } } }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepMerge.ts",
                "extension": "ts",
                "relPath": "src/shared/object/deepMerge.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.deepMap": {
                "id": "@blackbyte.sugar.shared.object.deepMap",
                "name": "deepMap",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object you want to map through",
                        "defaultStr": ""
                    },
                    "processor": {
                        "name": "processor",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The processor function that take as parameter the actual property value, the current property name and the full dotted path to the current property",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of settings to configure your deepMap process:",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "classInstances": {
                        "name": "classInstances",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want the objects to be processed the same as other values",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if we want to process also arrays or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "clone": {
                        "name": "clone",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to clone the object passed before cleaning it",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "privateProps": {
                        "name": "privateProps",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to clean also the private properties that starts with \"_\"",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function is the same as the &quot;map&quot; one. The only difference is that this one goes deep into the object",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "deepMap($1, $2)",
                    "code": "deepMap($1, ({object, prop, value, path}) => {\n     $2\n})"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { deepMap } from '@blackbyte/sugar/object';\ndeepMap({\n   hello: 'world'\n}, ({object, prop, value, path}) => {\n   return '~ ' + value;\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepMap.ts",
                "extension": "ts",
                "relPath": "src/shared/object/deepMap.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.deepFilter": {
                "id": "@blackbyte.sugar.shared.object.deepFilter",
                "name": "deepFilter",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to filter",
                        "defaultStr": ""
                    },
                    "filter": {
                        "name": "filter",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The filter function that take as parameter the property itself, and the property name",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The filtered object"
                },
                "setting": {
                    "clone": {
                        "name": "clone",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to clone the object before filter it",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Allow to filter an object using a function and this through all of the object structure. It works the same as the filter method on the Array object type.\nThe passed filter function will have as parameter each object properties and must return true or false depending if you want the\npassed property in the filtered object",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "example": [
                    {
                        "language": "js",
                        "code": "import { deepFilter } from '@blackbyte/sugar/object';\ndeepFilter ({\n   coco: 'hello',\n   plop: true,\n   sub: {\n     property: 'world'\n   }\n}, ({key, value}) => typeof item === 'string');\n// {\n//   coco: 'hello'\n//   sub: {\n//     property: 'world'\n//   }\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepFilter.ts",
                "extension": "ts",
                "relPath": "src/shared/object/deepFilter.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.deepClean": {
                "id": "@blackbyte.sugar.shared.object.deepClean",
                "name": "deepClean",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object you want to map through",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of settings to configure your deepMap process:",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "cleaner": {
                        "name": "cleaner",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The cleaner function that take as parameter the actual property value, the current property name and the full dotted path to the current property",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if we want to process also arrays or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "clone": {
                        "name": "clone",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to clone the object passed before cleaning it",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function takes an object as input and returns a cleaned version of it.\nYou can pass a cleaner function that has to returns true or false. If returns true, the element will be\nkeeped. If false, it will be removed from the output.\nThe default cleaner function remove all that is either null, &quot;&quot; or undefined.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "deepClean($1)",
                    "code": "deepClean($1);"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { deepClean } from '@blackbyte/sugar/object';\ndeepClean({\n   hello: 'world',\n   something: null\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepClean.ts",
                "extension": "ts",
                "relPath": "src/shared/object/deepClean.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.decycle": {
                "id": "@blackbyte.sugar.shared.object.decycle",
                "name": "decycle",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The new object circular references free"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This method simply remove the circular references in the passed object",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "decycle($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { decycle } from '@blackbyte/sugar/object';\ndecycle({\n   something: 'cool',\n   with: 'circular references',\n   //..\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/json-cyclic",
                        "description": ""
                    }
                ],
                "filename": "decycle.ts",
                "extension": "ts",
                "relPath": "src/shared/object/decycle.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.clone": {
                "id": "@blackbyte.sugar.shared.object.clone",
                "name": "clone",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to copy",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "Specify some settings to configure your clone process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The cloned object"
                },
                "setting": {
                    "deep": {
                        "name": "deep",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to clone the object deeply",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to clone an object either at 1 level, or deeply.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "clone($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { clone } from '@blackbyte/sugar/object';\nclone({\n   hello: 'world'\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/lodash",
                        "description": ""
                    }
                ],
                "filename": "clone.ts",
                "extension": "ts",
                "relPath": "src/shared/object/clone.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.object.camelCaseProps": {
                "id": "@blackbyte.sugar.shared.object.camelCaseProps",
                "name": "camelCaseProps",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object on which to apply the camel case treatment",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "IApplyScopeSettings"
                                }
                            ],
                            "raw": "IApplyScopeSettings"
                        },
                        "description": "Some settings to configure your scope application process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "deep": {
                        "name": "deep",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to apply the treatment deep in the object or just in the first level",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take an object as argument and return the same one but with properties in camel case.",
                "namespace": "@blackbyte.sugar.shared.object",
                "status": "stable",
                "snippet": {
                    "label": "camelCaseProps($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { camelCaseProps } from '@blackbyte/sugar/object';\ncamelCaseProps({\n   'hello-world': true\n});\n// {\n//   helloWorld: true\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "camelCaseProps.ts",
                "extension": "ts",
                "relPath": "src/shared/object/camelCaseProps.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.number.toBase": {
                "id": "@blackbyte.sugar.shared.number.toBase",
                "name": "toBase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "number": {
                        "name": "number",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The number to convert",
                        "defaultStr": ""
                    },
                    "base": {
                        "name": "base",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The base to convert to",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The converted number in string format"
                },
                "setting": {
                    "chars": {
                        "name": "chars",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The characters set to use for conversion",
                        "default": "'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'",
                        "defaultStr": "'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert a number to another base between 1 and the length of the &quot;chars&quot; settings",
                "namespace": "@blackbyte.sugar.shared.number",
                "status": "stable",
                "snippet": {
                    "label": "toBase($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { toBase } from '@blackbyte/sugar/number'\ntoBase(1024, 62); // qF"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "toBase.ts",
                "extension": "ts",
                "relPath": "src/shared/number/toBase.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.number.pad": {
                "id": "@blackbyte.sugar.shared.number.pad",
                "name": "pad",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "number": {
                        "name": "number",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The number to pad",
                        "defaultStr": ""
                    },
                    "width": {
                        "name": "width",
                        "type": {
                            "types": [
                                {
                                    "type": "Integer"
                                }
                            ],
                            "raw": "Integer"
                        },
                        "description": "The width of pad to apply",
                        "defaultStr": ""
                    },
                    "character": {
                        "name": "character",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The character to use",
                        "default": "0",
                        "defaultStr": "\"0\""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Pad a number n of x 0 or another passed character",
                "namespace": "@blackbyte.sugar.shared.number",
                "status": "stable",
                "snippet": {
                    "label": "pad($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { pad } from '@blackbyte/sugar/number'\npad(123, 4) // 0123"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pad.ts",
                "extension": "ts",
                "relPath": "src/shared/number/pad.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.math.roundWithSign": {
                "id": "@blackbyte.sugar.shared.math.roundWithSign",
                "name": "roundWithSign",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "number": {
                        "name": "number",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The number to round",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The rounded number"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to round a number by keeping his sign &quot;+&quot; or &quot;-&quot;",
                "namespace": "@blackbyte.sugar.shared.math",
                "status": "stable",
                "snippet": {
                    "label": "roundWithSign($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { roundWithSign } from '@blackbyte/sugar/math';\nroundWithSign(1.5); // => 1\nroundWithSign(-1.5); // => -1"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "roundWithSign.ts",
                "extension": "ts",
                "relPath": "src/shared/math/roundWithSign.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.math.easeClamp": {
                "id": "@blackbyte.sugar.shared.math.easeClamp",
                "name": "easeClamp",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "num": {
                        "name": "num",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The number to clamp",
                        "defaultStr": ""
                    },
                    "min": {
                        "name": "min",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The minimum value",
                        "defaultStr": ""
                    },
                    "max": {
                        "name": "max",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The maximum value",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The clamped number"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Clamp a number between two values with easing in and out",
                "namespace": "@blackbyte.sugar.shared.math",
                "status": "stable",
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeClamp } from '@blackbyte/sugar/math';\neaseClamp(-20, -10, 0, 100, 110); // => -10"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeClamp.ts",
                "extension": "ts",
                "relPath": "src/shared/math/easeClamp.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.math.distanceBetween": {
                "id": "@blackbyte.sugar.shared.math.distanceBetween",
                "name": "distanceBetween",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "point1": {
                        "name": "point1",
                        "type": {
                            "types": [
                                {
                                    "type": "Point"
                                }
                            ],
                            "raw": "Point"
                        },
                        "description": "The point 1, x and y value",
                        "defaultStr": ""
                    },
                    "point2": {
                        "name": "point2",
                        "type": {
                            "types": [
                                {
                                    "type": "Point"
                                }
                            ],
                            "raw": "Point"
                        },
                        "description": "The point 2, x and y value",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The distance between the two points"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Get the distance between two points",
                "namespace": "@blackbyte.sugar.shared.math",
                "status": "stable",
                "snippet": {
                    "label": "distanceBetween($1, $2)",
                    "code": "distanceBetween({\n     x: $1, y: $2\n}, {\n     x: $3, y: $4\n})"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { distanceBetween } from '@blackbyte/sugar/geom'\ndistanceBetween({\n\tx: 10, y: 20\n}, {\n\tx: 10, y: 30\n}) // 10"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "distanceBetween.ts",
                "extension": "ts",
                "relPath": "src/shared/math/distanceBetween.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.math.clamp": {
                "id": "@blackbyte.sugar.shared.math.clamp",
                "name": "clamp",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "num": {
                        "name": "num",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The number to clamp",
                        "defaultStr": ""
                    },
                    "min": {
                        "name": "min",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The minimum value",
                        "defaultStr": ""
                    },
                    "max": {
                        "name": "max",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The maximum value",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The clamped number"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Clamp a number between two values",
                "namespace": "@blackbyte.sugar.shared.math",
                "status": "stable",
                "snippet": {
                    "label": "clamp($1, $2, $3)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { clamp } from '@blackbyte/sugar/math';\nclamp(10, 0, 100); // => 10\nclamp(0, 0, 100); // => 0\nclamp(100, 0, 100); // => 100\nclamp(101, 0, 100); // => 100"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "clamp.ts",
                "extension": "ts",
                "relPath": "src/shared/math/clamp.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.math.circleConstrain": {
                "id": "@blackbyte.sugar.shared.math.circleConstrain",
                "name": "circleConstrain",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "center": {
                        "name": "center",
                        "type": {
                            "types": [
                                {
                                    "type": "Vector2"
                                }
                            ],
                            "raw": "Vector2"
                        },
                        "description": "The center point of the circle",
                        "defaultStr": ""
                    },
                    "radius": {
                        "name": "radius",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The radius to constrain the point in",
                        "defaultStr": ""
                    },
                    "point": {
                        "name": "point",
                        "type": {
                            "types": [
                                {
                                    "type": "Vector2"
                                }
                            ],
                            "raw": "Vector2"
                        },
                        "description": "The point to constrain",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Vector2"
                            }
                        ],
                        "raw": "Vector2"
                    },
                    "description": "The new constrained value for the point"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Take as parameter a central point, a radius and a points to constrain inside the circle defined by the radius",
                "namespace": "@blackbyte.sugar.shared.math",
                "status": "stable",
                "snippet": {
                    "label": "circleConstrain($1, $1)",
                    "code": "__circleConstain({\n     x: $1, y: $2\n}, $3, {\n     x: $4, y: $5\n})"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { circleConstrain } from '@blackbyte/sugar/math'\ncircleConstrain({\n\tx: 10, y: 10\n}, 10, {\n\tx: 10, y: 5\n})"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/questions/8515900/how-to-constrain-movement-within-the-area-of-a-circle",
                        "description": ""
                    }
                ],
                "filename": "circleConstrain.ts",
                "extension": "ts",
                "relPath": "src/shared/math/circleConstrain.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isYyyymmddDate": {
                "id": "@blackbyte.sugar.shared.is.isYyyymmddDate",
                "name": "isYyyymmddDate",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "date": {
                        "name": "date",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The date to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is valid, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if is a valid yyyy.mm.dd date\nThis will match : yyyy.mm.dd | yyyy/mm/dd | yyyy-mm-dd | yyyy mm dd",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isYyyymmddDate($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isYyyymmddDate } from '@blackbyte/sugar/is'\nif (isYyyymmddDate('2018.12.25')) {\n    // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isYyyymmddDate.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isYyyymmddDate.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isWindows": {
                "id": "@blackbyte.sugar.shared.is.isWindows",
                "name": "isWindows",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if mac OS X, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the app run on mac OS X or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isWindows()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isWindows } from '@blackbyte/sugar/is';\nisWindows(); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isWindows.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isWindows.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isValidNumber": {
                "id": "@blackbyte.sugar.shared.is.isValidNumber",
                "name": "isValidNumber",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "any"
                                }
                            ],
                            "raw": "any"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's in a valid number, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a valid number.\nA valid number is either an integer or a number (float).",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isValidNumber()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isValidNumber } from '@blackbyte/sugar/is'\nisValidNumber(12) // true\nisValidNumber('he') // false\nisValidNumber(undefined) // false\nisValidNumber(NaN) // false"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isValidNumber.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isValidNumber.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.isUrlCompliant": {
                "id": "@blackbyte.sugar.shared.string.isUrlCompliant",
                "name": "isUrlCompliant",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if compliant, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function check if the passed string is url compliant.\nThis mean that it has no spaces, and no special characters",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "isUrlCompliant($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "import { isUrlCompliant } from '@blackbyte/sugar/string';\nisUrlCompliant('Hello world'); // false\nisUrlCompliant('/something/cool'); // true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isUrlCompliant.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isUrlCompliant.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isUrl": {
                "id": "@blackbyte.sugar.shared.is.isUrl",
                "name": "isUrl",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a valid url",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isUrl($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isUrl } from '@blackbyte/sugar/is';\nisUrl('http://google.com') => true\nisUrl('ftp://web.coco.com:2222') => false\nisUrl('hello') => false"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.freecodecamp.org/news/check-if-a-javascript-string-is-a-url/",
                        "description": ""
                    }
                ],
                "filename": "isUrl.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isUrl.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.testEnv": {
                "id": "@blackbyte.sugar.shared.is.testEnv",
                "name": "testEnv",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if in environment environment, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the current environment is in a test process or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isTestEnv()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isTestEnv } from '@blackbyte/sugar/is';\nisTestEnv(); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isTestEnv.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isTestEnv.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isTerminal": {
                "id": "@blackbyte.sugar.shared.is.isTerminal",
                "name": "isTerminal",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is in the terminal, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply returns if the process runs inside a terminal or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isTerminal($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isTerminal } from '@blackbyte/sugar/is';\nisTerminal(); // => true"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isTerminal.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isTerminal.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isString": {
                "id": "@blackbyte.sugar.shared.is.isString",
                "name": "isString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's a String, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a js String",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isString } from '@blackbyte/sugar/is'\nif (isString({}) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isString.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isString.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isRegexp": {
                "id": "@blackbyte.sugar.shared.is.isRegexp",
                "name": "isRegexp",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Regexp"
                            }
                        ],
                        "raw": "Regexp"
                    },
                    "description": "true if it's a Regexp, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a js Regexp",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isRegex($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isRegex } from '@blackbyte/sugar/is'\nif (isRegex(/^hello$/g) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isRegex.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isRegex.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isPlainObject": {
                "id": "@blackbyte.sugar.shared.is.isPlainObject",
                "name": "isPlainObject",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                },
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Object|Array"
                        },
                        "description": "The object(s) to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is plain object(s), false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed object (or array of objects) is/are plain object(s)",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isPlainObject($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isPlainObject } from '@blackbyte/sugar/is';\nisPlainObject({ hello: 'world'}); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isPlainObject.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isPlainObject.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isPath": {
                "id": "@blackbyte.sugar.shared.is.isPath",
                "name": "isPath",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if the path is valide, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed string is a valid path or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isPath($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isPath } from '@blackbyte/sugar/is';\nisPath('hello/world'); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isPath.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isPath.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isOsx": {
                "id": "@blackbyte.sugar.shared.is.isOsx",
                "name": "isOsx",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if mac OS X, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the app run on mac OS X or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isOsx()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isOsx } from '@blackbyte/sugar/is';\nisOsx(); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isOsx.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isOsx.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isOdd": {
                "id": "@blackbyte.sugar.shared.is.isOdd",
                "name": "isOdd",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if odd, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if a number is odd or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isOdd($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isOdd } from '@blackbyte/sugar/is'\nisOdd(1) // true\nisOdd(2) // false"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isOdd.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isOdd.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isObject": {
                "id": "@blackbyte.sugar.shared.is.isObject",
                "name": "isObject",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's a object, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a js object",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isObject($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isObject } from '@blackbyte/sugar/is'\nif (isObject({}) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isObject.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isObject.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isNumber": {
                "id": "@blackbyte.sugar.shared.is.isNumber",
                "name": "isNumber",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a number",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isNumber($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isNumber } from '@blackbyte/sugar/is';\nisNumber(12) => true\nisNumber(22.3) => true\nisNumber('20') => false"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isNumber.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isNumber.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isNode": {
                "id": "@blackbyte.sugar.shared.is.isNode",
                "name": "isNode",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if running under javascript runtime, false if not..."
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the current script is running under node runtime or not...",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isNode()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isNode } from '@blackbyte/sugar/is';\nisNode(); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isNode.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isNode.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isModuleSystem": {
                "id": "@blackbyte.sugar.shared.is.isModuleSystem",
                "name": "isModuleSystem",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "systemNames": {
                        "name": "systemNames",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        {
                                            "type": "string",
                                            "value": "esm"
                                        },
                                        {
                                            "type": "string",
                                            "value": "cjs"
                                        }
                                    ]
                                }
                            ],
                            "raw": "('esm'|'cjs')[]"
                        },
                        "description": "An array of system names to check against",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if the current system is one of the passed system names, false otherwise"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the current module system the code runs on is one of the passed system names like &quot;esm&quot; or &quot;cjs&quot;.",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isModuleSystem($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isModuleSystem } from '@blackbyte/sugar/is';\nisModuleSystem('esm'); // => true\nisModuleSystem('cjs'); // => false"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isModuleSystem.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isModuleSystem.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isMmddyyyyDate": {
                "id": "@blackbyte.sugar.shared.is.isMmddyyyyDate",
                "name": "isMmddyyyyDate",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "date": {
                        "name": "date",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The date to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is valid, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if is a valid mm.dd.yyyy date\nThis will match : mm.dd.yyyy | mm/dd/yyyy | mm-dd-yyyy | mm dd yyyy",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isMmddyyyyDate($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isMmddyyyyDate } from '@blackbyte/sugar/is'\nif (isMmddyyyyDate('12.25.2018')) {\n    // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isMmddyyyyDate.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isMmddyyyyDate.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isMap": {
                "id": "@blackbyte.sugar.shared.is.isMap",
                "name": "isMap",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's a Map, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a js Map",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isMap($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isMap } from '@blackbyte/sugar/is'\nconst map = new Map();\nif (isMap(map) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isMap.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isMap.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isLinux": {
                "id": "@blackbyte.sugar.shared.is.isLinux",
                "name": "isLinux",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if linux, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the app run on linux",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isLinux($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isLinux } from '@blackbyte/sugar/is';\nisLinux(); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isLinux.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isLinux.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isJson": {
                "id": "@blackbyte.sugar.shared.is.isJson",
                "name": "isJson",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's a valid json, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a valid json",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isJson($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isJson } from '@blackbyte/sugar/is'\nif (isJson('[{id:10}]')) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isJson.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isJson.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isIsoTime": {
                "id": "@blackbyte.sugar.shared.is.isIsoTime",
                "name": "isIsoTime",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a valid iso date string",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isIsoTime($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isIsoTime } from '@blackbyte/sugar/is';\nisIsoTime('john.doe@gmail.com') => false\nisIsoTime('plop@yop.com') => false\nisIsoTime('hello') => false\nisIsoTime('17:21') => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html",
                        "description": ""
                    }
                ],
                "filename": "isIsoTime.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isIsoTime.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isIsoDateTime": {
                "id": "@blackbyte.sugar.shared.is.isIsoDateTime",
                "name": "isIsoDateTime",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a valid iso date time string",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isIsoDateTime($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isIsoDateTime } from '@blackbyte/sugar/is';\nisIsoDateTime('john.doe@gmail.com') => false\nisIsoDateTime('plop@yop.com') => false\nisIsoDateTime('2008-08-30 17:21:59') => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html",
                        "description": ""
                    }
                ],
                "filename": "isIsoDateTime.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isIsoDateTime.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isIsoDate": {
                "id": "@blackbyte.sugar.shared.is.isIsoDate",
                "name": "isIsoDate",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a valid iso date string",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isIsoDate($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isIsoDate } from '@blackbyte/sugar/is';\nisIsoDate('john.doe@gmail.com') => false\nisIsoDate('plop@yop.com') => false\nisIsoDate('hello') => false\nisIsoDate('2008-08') => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html",
                        "description": ""
                    }
                ],
                "filename": "isIsoDate.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isIsoDate.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isInteger": {
                "id": "@blackbyte.sugar.shared.is.isInteger",
                "name": "isInteger",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is an integer",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isInteger($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isInteger } from '@blackbyte/sugar/is';\nisInteger(10) => true\nisInteger('hello') => false"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isInteger.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isInteger.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.string.isIdCompliant": {
                "id": "@blackbyte.sugar.shared.string.isIdCompliant",
                "name": "isIdCompliant",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "string": {
                        "name": "string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if compliant, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function check if the passed value is &quot;id&quot; compliant.\nThis mean that it has no special characters, no spaces and that it is lowercase",
                "namespace": "@blackbyte.sugar.shared.string",
                "status": "stable",
                "snippet": {
                    "label": "isIdCompliant($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "import { isIdCompliant } from '@blackbyte/sugar/string';\nisIdCompliant('Hello world'); // => false\nisIdCompliant('hello-world'); // => true"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isIdCompliant.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isIdCompliant.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isGlob": {
                "id": "@blackbyte.sugar.shared.is.isGlob",
                "name": "isGlob",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$string": {
                        "name": "$string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a valid glob pattern, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed string is a valid glob pattern or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isGlob($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isGlob } from '@blackbyte/sugar/is';\nisGlob('something/.js); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/is-glob",
                        "description": ""
                    }
                ],
                "filename": "isGlob.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isGlob.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isFunction": {
                "id": "@blackbyte.sugar.shared.is.isFunction",
                "name": "isFunction",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's a function, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a js function",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isFunction($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isFunction } from '@blackbyte/sugar/is'\nif (isFunction(function() {})) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isFunction.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isFunction.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isEven": {
                "id": "@blackbyte.sugar.shared.is.isEven",
                "name": "isEven",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if even, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if a number is even or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isEven($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isEven } from '@blackbyte/sugar/is'\nisEven(1) // false\nisEven(2) // true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isEven.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isEven.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isEsm": {
                "id": "@blackbyte.sugar.shared.is.isEsm",
                "name": "isEsm",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if the current system is esm"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the current module system the code runs on &quot;esm&quot; module system.",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isEsm()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isEsm } from '@blackbyte/sugar/is';\nisEsm(); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isEsm.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isEsm.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isEmail": {
                "id": "@blackbyte.sugar.shared.is.isEmail",
                "name": "isEmail",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a valid email address",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isEmail($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isEmail } from '@blackbyte/sugar/is';\nisEmail('john.doe@gmail.com') => true\nisEmail('plop@yop.com') => true\nisEmail('hello') => false"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isEmail.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isEmail.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isDomNode": {
                "id": "@blackbyte.sugar.js.is.isDomNode",
                "name": "isDomNode",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "element": {
                        "name": "element",
                        "type": {
                            "types": [
                                {
                                    "type": "any"
                                }
                            ],
                            "raw": "any"
                        },
                        "description": "The element to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a DOM node, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed element is a DOM node",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isDomNode($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isDomNode } from '@blackbyte/sugar/dom'\nisDomNode($myElement);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/questions/384286/how-do-you-check-if-a-javascript-object-is-a-dom-object",
                        "description": ""
                    }
                ],
                "filename": "isDomNode.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isDomNode.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isDomElement": {
                "id": "@blackbyte.sugar.js.is.isDomElement",
                "name": "isDomElement",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "element": {
                        "name": "element",
                        "type": {
                            "types": [
                                {
                                    "type": "any"
                                }
                            ],
                            "raw": "any"
                        },
                        "description": "The element to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a DOM element, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the passed element is a DOM element",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isDomElement($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isDomElement } from '@blackbyte/sugar/dom'\nisDomElement($myElement);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/questions/384286/how-do-you-check-if-a-javascript-object-is-a-dom-object",
                        "description": ""
                    }
                ],
                "filename": "isDomElement.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isDomElement.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isDdmmyyyyDate": {
                "id": "@blackbyte.sugar.shared.is.isDdmmyyyyDate",
                "name": "isDdmmyyyyDate",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "date": {
                        "name": "date",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The date to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is valid, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if is a valid dd.mm.yyyy date\nThis will match : dd.mm.yyyy | dd/mm/yyyy | dd-mm-yyyy | dd mm yyyy",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isDdmmyyyyDate($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isDdmmyyyyDate } from '@blackbyte/sugar/is'\nif (isDdmmyyyyDate('20.12.2018')) {\n    // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isDdmmyyyyDate.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isDdmmyyyyDate.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.cyclic": {
                "id": "@blackbyte.sugar.shared.is.cyclic",
                "name": "cyclic",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            },
                            {
                                "type": "false"
                            }
                        ],
                        "raw": "String|false"
                    },
                    "description": "false if all is ok, a string that tells where the circular dep has been found if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function check if the passed object has circular dependencies and if so, returns where it has been found in the object",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isCyclic($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isCyclic } from '@blackbyte/sugar/is';\nconst obj = { hello: 'world' };\nobj.cyclic = obj;\nisCyclic(obj);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/questions/14962018/detecting-and-fixing-circular-references-in-javascript",
                        "description": ""
                    }
                ],
                "filename": "isCyclic.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isCyclic.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isCreditCard": {
                "id": "@blackbyte.sugar.shared.is.isCreditCard",
                "name": "isCreditCard",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a valid credit card number",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isCreditCard($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import {isCreditCard } from '@blackbyte/sugar/is';\nisCreditCard('john.doe@gmail.com') => true\nisCreditCard('plop@yop.com') => true\nisCreditCard('hello') => false\nisCreditCard('378282246310006') => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isCreditCard.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isCreditCard.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isColor": {
                "id": "@blackbyte.sugar.shared.is.isColor",
                "name": "isColor",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "The check result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a color",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isColor($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isColor } from '@blackbyte/sugar/is';\nisColor('red') => true\nisColor('#fff') => true\nisColor('hello') => false"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "http://stackoverflow.com/questions/6386090/validating-css-color-names",
                        "description": ""
                    }
                ],
                "filename": "isColor.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isColor.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isClassInstance": {
                "id": "@blackbyte.sugar.shared.is.isClassInstance",
                "name": "isClassInstance",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Any"
                                }
                            ],
                            "raw": "Any"
                        },
                        "description": "The object to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is an custom object instance, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed item is an object class and not a plain object.",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isClassInstance($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isClassInstance } from '@blackbyte/sugar/is';\nif (isClassInstance({\n     something: 'hello'\n})); // => false\nclass MyClass {\n     constructor() {}\n}\nisClassInstance(new MyClass());"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isClassInstance.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isClassInstance.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.class": {
                "id": "@blackbyte.sugar.shared.is.class",
                "name": "class",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "variable": {
                        "name": "variable",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                },
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Mixed|Array"
                        },
                        "description": "The variable(s) to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is class(es), false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed variable (or array of variables) is/are plain variable(s)",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isClass($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isClass } = from '@blackbyte/sugar/is';\nisClass({ hello: 'world'}); // => false\nconst myCoolClass = class Coco{};\nisClass(myCoolClass); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/is-class",
                        "description": ""
                    }
                ],
                "filename": "isClass.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isClass.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isCjs": {
                "id": "@blackbyte.sugar.shared.is.isCjs",
                "name": "isCjs",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if the current system is esm"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the current module system the code runs on &quot;commonjs&quot; module system.",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isCjs()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isCjs } from '@blackbyte/sugar/is';\nisCjs(); // => true"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isCjs.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isCjs.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isBrowser": {
                "id": "@blackbyte.sugar.shared.is.isBrowser",
                "name": "isBrowser",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's in a browser, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the script is running inside a browser or not",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isBrowser()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isBrowser } from '@blackbyte/sugar/is'\nif (isBrowser() {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isBrowser.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isBrowser.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isBoolean": {
                "id": "@blackbyte.sugar.shared.is.isBoolean",
                "name": "isBoolean",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's a Boolean, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a js Boolean",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isBoolean($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isBoolean } from '@blackbyte/sugar/is'\nif (isBoolean(true) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isBoolean.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isBoolean.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isBase64": {
                "id": "@blackbyte.sugar.shared.is.isBase64",
                "name": "isBase64",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's a Boolean, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a base 64 string",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isBase64($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isBase64 } from '@blackbyte/sugar/is'\nif (isBase64('wfwefwefiowjfiojwiefjwoiejfiowjfi9jef98je9f3j') {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isBase64.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isBase64.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.is.isArray": {
                "id": "@blackbyte.sugar.shared.is.isArray",
                "name": "isArray",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if it's a Array, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed value is a js Array",
                "namespace": "@blackbyte.sugar.shared.is",
                "status": "stable",
                "snippet": {
                    "label": "isArray($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isArray } from '@blackbyte/sugar/is'\nif (isArray([]) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isArray.ts",
                "extension": "ts",
                "relPath": "src/shared/is/isArray.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.html.unescapeHtml": {
                "id": "@blackbyte.sugar.shared.html.unescapeHtml",
                "name": "unescapeHtml",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "html": {
                        "name": "html",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The html to unescape",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The unescaped html"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to unescape some html characters like &amp;lt;, etc...",
                "namespace": "@blackbyte.sugar.shared.html",
                "status": "stable",
                "snippet": {
                    "label": "unescapeHtml($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { unescapeHtml } from '@blackbyte/sugar/html';\nunescapeHtml('&lt;s-code-example&gt;'); // => <s-code-example>"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/unescape",
                        "description": ""
                    }
                ],
                "filename": "unescapeHtml.ts",
                "extension": "ts",
                "relPath": "src/shared/html/unescapeHtml.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.html.stripTags": {
                "id": "@blackbyte.sugar.shared.html.stripTags",
                "name": "stripTags",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "html": {
                        "name": "html",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The html string to process",
                        "defaultStr": ""
                    },
                    "allowedTags": {
                        "name": "allowedTags",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String[]"
                        },
                        "description": "The tags that are allowed like ['a','p','h1','h2']...",
                        "defaultStr": ""
                    },
                    "tagReplacement": {
                        "name": "tagReplacement",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "A string with which you want to replace the tags",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string without tags"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Strip tags of an html string.\nThis is a simple wrapper of the nice &quot;striptags&quot; package that you can find here: https://www.npmjs.com/package/striptags",
                "namespace": "@blackbyte.sugar.shared.html",
                "status": "stable",
                "snippet": {
                    "label": "stripTags($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { stripTags } from '@blackbyte/sugar/html'\nstripTags('<p><span>Hello</span> world</p>', '<span>') // <span>Hello</span> world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/striptags",
                        "description": ""
                    }
                ],
                "filename": "stripTags.ts",
                "extension": "ts",
                "relPath": "src/shared/html/stripTags.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.html.tags": {
                "id": "@blackbyte.sugar.shared.html.tags",
                "name": "tags",
                "type": {
                    "types": [
                        {
                            "type": "Object"
                        }
                    ],
                    "raw": "Object"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The new text"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "An object of tags to replace which have as value the replacement function that take the tag name, the tag content and must return the replacement content",
                "namespace": "@blackbyte.sugar.shared.html",
                "status": "stable",
                "snippet": {
                    "label": "replaceTags($1m $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { replaceTags } from '@blackbyte/sugar/html';\n replaceTags('<span>Hello</span> world', {\n   span: (tag, content) => `<div>${content}</div>`; // => <div>Hello</div> world\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "replaceTags.ts",
                "extension": "ts",
                "relPath": "src/shared/html/replaceTags.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.html.extractCssClassesNames": {
                "id": "@blackbyte.sugar.shared.html.extractCssClassesNames",
                "name": "extractCssClassesNames",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "html": {
                        "name": "html",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The HTML to process.",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "String[]"
                    },
                    "description": "The finded css classes names"
                },
                "setting": {
                    "expandPleasantCssClassname": {
                        "name": "expandPleasantCssClassname",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to expand the pleasant css classes names like \"s-typo:p\" to \"s-typo--p\"",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to extract all the classes names from a passed html string.\nYou can use it with other things than html but depending on the complexity of your string, it may not\nwork as expected...",
                "namespace": "@blackbyte.sugar.shared.html",
                "status": "stable",
                "snippet": {
                    "label": "extractCssClassesNames($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { extractCssClassesNames } from '@blackbyte/sugar/html';\nextractCssClassesNames('...');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "extractCssClassesNames.ts",
                "extension": "ts",
                "relPath": "src/shared/html/extractCssClassesNames.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.html.expandPleasantCssClassnames": {
                "id": "@blackbyte.sugar.shared.html.expandPleasantCssClassnames",
                "name": "expandPleasantCssClassnames",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "html": {
                        "name": "html",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The HTML to process. It can be actually any string values like .vue file, etc...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string with converted classnames"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to convert &quot;colon&quot; classnames like &quot;s-something:cool @desktop something&quot;\nto comprehensive classnames for css like &quot;s-something s-something-cool something_desktop&quot;, etc...",
                "namespace": "@blackbyte.sugar.shared.html",
                "status": "stable",
                "snippet": {
                    "label": "expandPleasantCssClassnames($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { expandPleasantCssClassnames } from '@blackbyte/sugar/html';\nexpandPleasantCssClassnames('...');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "expandPleasantCssClassnames.ts",
                "extension": "ts",
                "relPath": "src/shared/html/expandPleasantCssClassnames.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.html.expandPleasantCssClassname": {
                "id": "@blackbyte.sugar.shared.html.expandPleasantCssClassname",
                "name": "expandPleasantCssClassname",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "classesStr": {
                        "name": "classesStr",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The classes string to convert like \"s-typo:h1 s-font:40\", etc...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string with converted classnames"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to convert &quot;colon&quot; classnames like &quot;s-something:cool @desktop something&quot;\nto comprehensive classnames for css like &quot;s-something s-something-cool something_desktop&quot;, etc...",
                "namespace": "@blackbyte.sugar.shared.html",
                "status": "stabée",
                "snippet": {
                    "label": "expandPleasantCssClassname($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { expandPleasantCssClassname } from '@blackbyte/sugar/html';\nexpandPleasantCssClassname('...');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "expandPleasantCssClassname.ts",
                "extension": "ts",
                "relPath": "src/shared/html/expandPleasantCssClassname.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.html.escapeHtml": {
                "id": "@blackbyte.sugar.shared.html.escapeHtml",
                "name": "escapeHtml",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "html": {
                        "name": "html",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The html to unescape",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The unescaped html"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to escape some html characters like &amp;lt;, etc...",
                "namespace": "@blackbyte.sugar.shared.html",
                "status": "stable",
                "snippet": {
                    "label": "escapeHtml($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { escapeHtml } from '@blackbyte/sugar/html';\nescapeHtml('<s-code-example>'); // => &lt;s-code-example&gt;"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/escape-html",
                        "description": ""
                    }
                ],
                "filename": "escapeHtml.ts",
                "extension": "ts",
                "relPath": "src/shared/html/escapeHtml.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.html.encodeEntities": {
                "id": "@blackbyte.sugar.shared.html.encodeEntities",
                "name": "encodeEntities",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "html": {
                        "name": "html",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The html to unescape",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The unescaped html"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to encode some entities in a string like &quot;&lt;&quot; to &quot;&amp;lt;&quot;\nIt supports all the",
                "namespace": "@blackbyte.sugar.shared.html",
                "status": "stable",
                "snippet": {
                    "label": "encodeEntities($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { encodeEntities } from '@blackbyte/sugar/html';\nencodeEntities('<s-code-example>'); // => &lt;s-code-example&gt;"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/escape-html",
                        "description": ""
                    }
                ],
                "filename": "encodeEntities.ts",
                "extension": "ts",
                "relPath": "src/shared/html/encodeEntities.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.function.throttle": {
                "id": "@blackbyte.sugar.shared.function.throttle",
                "name": "throttle",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "threshhold": {
                        "name": "threshhold",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The delay in ms to wait between two function calls",
                        "defaultStr": ""
                    },
                    "fn": {
                        "name": "fn",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to throttle",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Function"
                            }
                        ],
                        "raw": "Function"
                    },
                    "description": "The throttled function"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called once each threshhold time",
                "namespace": "@blackbyte.sugar.shared.function",
                "status": "stable",
                "snippet": {
                    "label": "throttle($1, $2)",
                    "code": "throttle($1, () => {\n     $2\n})"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { throttle } from '@blackbyte/sugar/function';\nconst myThrottledFn = throttle(1000, () => {\n\t\t// my function content that will be\n\t\t// executed only once each second\n});\n\ndocument.addEventListener('scroll', (e) => {\n\t\t// call my throttled function\n\t\tmyThrottledFn();\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "throttle.ts",
                "extension": "ts",
                "relPath": "src/shared/function/throttle.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.function.sleep": {
                "id": "@blackbyte.sugar.shared.function.sleep",
                "name": "sleep",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "timeout": {
                        "name": "timeout",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The timeout to sleep in ms",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A simple promise resolved once the timeout is finished"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function is a simple &quot;setTimeout&quot; wrapper inside a promise.",
                "namespace": "@blackbyte.sugar.shared.function",
                "status": "stable",
                "snippet": {
                    "label": "sleep($1)",
                    "code": "await sleep($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sleep } from '@blackbyte/sugar/function';\nawait sleep(2000);"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sleep.ts",
                "extension": "ts",
                "relPath": "src/shared/function/sleep.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.function.memoize": {
                "id": "@blackbyte.sugar.shared.function.memoize",
                "name": "memoize",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "fn": {
                        "name": "fn",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to memoize his result",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "The memoized function result"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function can be used to memorize a function call result in order to save memory.\nThis is just a &quot;proxy&quot; of the &quot;memoizee&quot; package.",
                "namespace": "@blackbyte.sugar.shared.function",
                "status": "stable",
                "snippet": {
                    "label": "memoize($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { memoize } from '@blackbyte/sugar/function';\nconst fn = memoize(function(text) => {\n   return `Hello ${text}`;\n});\nconst result = fn('world'); // first execution. no cache\nconst result1 = fn('plop'); // first execution with this argument, no cache\nconst result2 = fn('world'); // taken from cache"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/memoizee",
                        "description": ""
                    }
                ],
                "filename": "memoize.ts",
                "extension": "ts",
                "relPath": "src/shared/function/memoize.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.function.getArgsNames": {
                "id": "@blackbyte.sugar.shared.function.getArgsNames",
                "name": "getArgsNames",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "func": {
                        "name": "func",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function reference of which get the arguments names",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "An array of arguments names"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Get the arguments names of the passed function. Return an array of the arguments names",
                "namespace": "@blackbyte.sugar.shared.function",
                "status": "beta",
                "snippet": {
                    "label": "getArgsNames($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getArgsNames } from '@blackbyte/sugar/function';\nfunction hello(world, coco, plop) { }\ngetArgsNames(hello); // => ['world', 'coco', 'plop']"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getArgsNames.ts",
                "extension": "ts",
                "relPath": "src/shared/function/getArgsNames.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.function.easeInterval": {
                "id": "@blackbyte.sugar.shared.function.easeInterval",
                "name": "easeInterval",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "duration": {
                        "name": "duration",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The duration of your interval process you want",
                        "defaultStr": ""
                    },
                    "cb": {
                        "name": "cb",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "A callback function to call at each interval",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TEaseIntervalSettings"
                                }
                            ],
                            "raw": "TEaseIntervalSettings"
                        },
                        "description": "Some settings to customize your interval process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "SPromise"
                            }
                        ],
                        "raw": "SPromise"
                    },
                    "description": "An SPromise that will be resolved once the process is complete, and through which you can subscribe to the \"interval\" event that is the same as the \"cb\" parameter"
                },
                "setting": {
                    "inteval": {
                        "name": "inteval",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "An interval in ms to call your callback function",
                        "default": "1000/25",
                        "defaultStr": "1000/25"
                    },
                    "easing": {
                        "name": "easing",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "An easing function that take as parameter a value between 0 and 1",
                        "default": "easeInOutQuart",
                        "defaultStr": "easeInOutQuart"
                    },
                    "from": {
                        "name": "from",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The value to start with",
                        "default": 0,
                        "defaultStr": "0"
                    },
                    "to": {
                        "name": "to",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The value to end with",
                        "default": 100,
                        "defaultStr": "100"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to call a callback function exactly as the `setInterval` would do but with an easing that you can specify,\nas well as an `interval` setting to customize how many time your function will be called.\nBy default this function will pass the &quot;easedPercent&quot; that represent the percentage of your passed &quot;duration&quot; with the easing applied on it.\nWith that you can make everything you want inside your callback function.",
                "namespace": "@blackbyte.sugar.shared.function",
                "status": "stable",
                "snippet": {
                    "label": "easeInterval($1, $2)",
                    "code": "const easeInterval = easeInterval($1, percent => {\n     $2\n});\n// easeInterval.cancel(); // stop the easing process\nawait easeInterval;"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInterval } from '@blackbyte/sugar/function';\nawait easeInterval(2000, (easedPercent) => {\n     // do something...\n}, {\n     interval: 1000 / 25 // 25 times by second\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "easeInterval.ts",
                "extension": "ts",
                "relPath": "src/shared/function/easeInterval.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.function.debounce": {
                "id": "@blackbyte.sugar.shared.function.debounce",
                "name": "debounce",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "delay": {
                        "name": "delay",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "A delay in ms to wait between two function calls",
                        "defaultStr": ""
                    },
                    "fn": {
                        "name": "fn",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to debounce",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called only once after\nthe delay passed",
                "namespace": "@blackbyte.sugar.shared.function",
                "status": "stable",
                "snippet": {
                    "label": "debounce($1, $2)",
                    "code": "debounce($1, () => {\n     $2\n})"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { debounce } from '@blackbyte/sugar/function';\nconst myDebouncedFn = debounce(1000, () => {\n\t\t// my function content that will be\n\t\t// executed only once after the 1 second delay\n});\n\ndocument.addEventListener('scroll', (e) => {\n\t\t// call my debounced function\n\t\tmyDebouncedFn();\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "debounce.ts",
                "extension": "ts",
                "relPath": "src/shared/function/debounce.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.format.formatFileSize": {
                "id": "@blackbyte.sugar.shared.format.formatFileSize",
                "name": "formatFileSize",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "size": {
                        "name": "size",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                },
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "Number|String"
                        },
                        "description": "The size to transform in bytes",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The \"filesize\" settings to customize the output. See [filesize](https://www.npmjs.com/package/filesize) settings",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The human readable version of the passed size"
                },
                "setting": {
                    "base": {
                        "name": "base",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "(number) Number base, default is 10",
                        "default": 10,
                        "defaultStr": "10"
                    },
                    "bits": {
                        "name": "bits",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "(boolean) Enables `bit` sizes, default is false",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exponent": {
                        "name": "exponent",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "(number) Specifies the SI suffix via exponent, e.g. 2 is MB for bytes, default is 0",
                        "default": 0,
                        "defaultStr": "0"
                    },
                    "fullform": {
                        "name": "fullform",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "(boolean) Enables full form of unit of measure, default is false",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "[fullforms]": {
                        "name": "[fullforms]",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "(array) Array of full form overrides, default is []",
                        "defaultStr": ""
                    },
                    "locale": {
                        "name": "locale",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                },
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "Boolean|String"
                        },
                        "description": "(boolean|string) Localize the output, default is false",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "pad": {
                        "name": "pad",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "(boolean) Should the output be padded to the left, default is false",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "precision": {
                        "name": "precision",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "(number) The precision to use when outputting decimal values, default is 2",
                        "default": 2,
                        "defaultStr": "2"
                    },
                    "round": {
                        "name": "round",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "(number) The rounding function, default is 2",
                        "default": 2,
                        "defaultStr": "2"
                    },
                    "separator": {
                        "name": "separator",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "(string) Separator of thousands, default is '.'",
                        "default": "'.'",
                        "defaultStr": "'.'"
                    },
                    "spacer": {
                        "name": "spacer",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "(string) Spacer of the output, default is ' '",
                        "default": "' '",
                        "defaultStr": "' '"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Transform into human readable string a file size from a number (float or integer) or string.\nThis function use the wonderfull &quot;filesize&quot; npm package under the houd.",
                "namespace": "@blackbyte.sugar.shared.format",
                "status": "stable",
                "snippet": {
                    "label": "formatFileSize($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { formatFilesize } from '@blackbyte/sugar/fs';\nformatFilesize(163931); // => 326.86 KB"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/filesize",
                        "description": ""
                    }
                ],
                "filename": "fileSize.ts",
                "extension": "ts",
                "relPath": "src/shared/format/fileSize.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonWebFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonWebFileExtensions",
                "name": "commonWebFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: html, htm, css, js, php, asp, jsp, py, rb, pl, cgi, cfm, xml, json, rss, xhtml, ts, jsx, tsx, scss, sass, less, vue, svelte\nExtended formats includes: aspx, ashx, asmx, axd, do, action, faces, xhtml, jspx, tag, tld, erb, rhtml, haml, slim, ejs, hbs, handlebars, mustache, twig, blade, smarty, ftl, vm, vsl, tpl, tmpl, phtml, php3, php4, php5, phps, pht, phar, shtml, shtm, stm, ihtml, mhtml, mht, wml, wap, csp, cer, part, webmanifest, appcache, webapp, map, coffee, dart, elm, cljs, elm",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonWebFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonWebFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonWebFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonWebFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonWebFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonVideoFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonVideoFileExtensions",
                "name": "commonVideoFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: mp4, avi, mkv, mov, wmv, flv, webm, m4v, mpg, mpeg, 3gp, 3g2, vob, ts, mts, m2ts, ogv, divx, xvid, asf\nExtended formats includes: h264, h265, rm, rmvb, swf, f4v, f4p, f4a, f4b, mod, tod, mxf, r3d, braw, prores, dnxhd, avchd, mks, mk3d, dav, dat, &#39;dvrms, evo, ifo, ivf, m1v, m2v, m4p, mp2v, mpe, mpv, mpv2, mqv, nsv, nuv, ogg, qt, ram, rec, rv, smk, thp, vc1, vfw, vid, vivo, vp6, vp7, vp8, vp9, wm, wmp, wvx, yuv",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonVideoFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonVideoFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonVideoFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonVideoFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonVideoFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonTextFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonTextFileExtensions",
                "name": "commonTextFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: txt, htm, html, md, json, csv, rss, xhtml, xml, log, rtf, doc, docx, odt, pdf, tex, latex, readme, changelog, license, yaml, yml, ini, cfg, conf, properties\nExtended formats includes: asc, asciidoc, adoc, rst, textile, wiki, mediawiki, creole, pod, texi, texinfo, info, man, nroff, troff, groff, me, ms, mm, sgml, sgm, dtd, ent, mod, xsd, rng, rnc, xsl, xslt, fo, dita, ditamap, ditaval, docbook, dbk, fb2, opf, ncx, epub, mobi, azw, azw3, kf8, pdb, lit, lrf, rb, tcr, pml, prc, imp, ebk, tr2, tr3, tomeraider",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonTextFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonTextFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonTextFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonTextFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonTextFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonProgrammingFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonProgrammingFileExtensions",
                "name": "commonProgrammingFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: js, ts, jsx, tsx, py, java, c, cpp, cs, php, rb, go, rs, swift, kt, dart, html, css, scss, sass, less, json, xml, sql, sh, bat, ps1, r, scala, clj, h, hpp, asp, jsp, cfm, pl, vb, class\nExtended formats includes: asm, awk, bas, boa, boo, cbl, cob, coffee, cr, d, diff, e, erl, ex, exs, f, f77, f90, f95, for, forth, fs, fsx, groovy, hs, iml, inc, io, jl, lisp, lsp, lua, m, ml, mli, nim, p, pas, patch, pike, pro, prolog, pyx, rkt, sc, scm, smalltalk, sml, st, tcl, v, vhd, vhdl, vim, ws, xsl, xslt, yacc, zig.",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonProgrammingFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonProgrammingFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonProgrammingFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonProgrammingFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonProgrammingFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonMediaFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonMediaFileExtensions",
                "name": "commonMediaFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common media file extensions with or without the dot",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonMediaFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonMediaFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonMediaFileExtensions(); // => ['avi','mp3',...]"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonMediaFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonMediaFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonImageFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonImageFileExtensions",
                "name": "commonImageFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: jpg, jpeg, png, gif, bmp, svg, webp, ico, tiff, tif\nExtended formats includes: psd, ai, ps, avif, heic, heif, raw, cr2, nef, orf, sr2, arw, dng, rw2, raf, pef, x3f, crw, mrw, dcr, kdc, srf, erf, 3fr, mef, mos, ptx, r3d, fff, iiq, rwl, rwz, bay, cap, dcs, dcx, eip, emf, eps, exr, fax, fpx, g3, hdr, img, j2c, j2k, jp2, jpc, jpf, jpx.",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonImageFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonImageFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonImageFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonImageFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonImageFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonFontFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonFontFileExtensions",
                "name": "commonFontFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: ttf, otf, woff, woff2, eot\nExtended formats includes: fnt, fon, pfb, pfm, afm, bdf, pcf, snf, pfa, gsf, cff, otc, ttc, dfont, suit, lwfn, ffil, pdb, etx, gdr, cha, chr, bmap, fdb, fd, pk, gf, mf, vf, tfm, ofm, ufm, wfn, fft, sfd, ufo, glif.",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonFontFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonFontFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonFontFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonFontFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonFontFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonFileExtensions",
                "name": "commonFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "types": {
                        "name": "types",
                        "type": {
                            "types": [
                                {
                                    "type": "Types"
                                }
                            ],
                            "raw": "Types"
                        },
                        "description": "An array of types to include in the result",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common file extensions with or without the dot.\nYou can filter extensions by types:\n- audio\n- compressed\n- data\n- disc\n- email\n- executable\n- font\n- image\n- media\n- programming\n- text\n- video\n- web",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonFileExtensions(); // => ['avi','mp3',...]"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonExecutableFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonExecutableFileExtensions",
                "name": "commonExecutableFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: exe, msi, bat, cmd, com, scr, bin, run, app, deb, rpm, dmg, pkg, apk, ipa, jar, sh, py, pl, rb, php, js, vbs, ps1, cgi\nExtended formats includes: gadget, jsr, wsf, pi, pif, scf, lnk, inf, reg, msc, cpl, drv, sys, ocx, dll, so, dylib, bundle, framework, action, workflow, command, tool, out, elf, bin32, bin64, x86, x64, arm, mips, sparc, ppc, prg, prc, xex, xbe, nro, nso, rpx, wbfs, cia, gb, gbc, gba, nds, nes, smc, sfc, n64, z64, v64",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonExecutableFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonExecutableFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonExecutableFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonExecutableFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonExecutableFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonEmailFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonEmailFileExtensions",
                "name": "commonEmailFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: eml, msg, pst, ost, oft, vcf, mbox, emlx, dbx.\nExtended formats includes: email, emix, mbx, tbb, wab, contact, group, p7m, p7s, smime, winmail.dat, tnef, vcs, vcard, ldif, nws, fol, pmm, pmr, pmi, mmf, msf, snm, bms, ims, mbg, arc, pab, oab, nk2, pip.",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonEmailFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonEmailFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonEmailFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonEmailFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonEmailFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonDiscFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonDiscFileExtensions",
                "name": "commonDiscFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: iso, dmg, img, bin, cue, nrg, mdf, mds, toast, vcd, cdi, b5t, b6t, bwt, ccd, clone, dao, tao.\nExtended formats includes: c2d, cif, fcd, p01, pdi, pxi, xmd, gi, pqi, disc, ratdvd, sdi, xdi, mdx, ashdisk, bif, daa, dao, dvd, fdi, gbi, ima, lcd, md0, md1, md2, ncd, pvm, vcm, vdi, vhd, vmdk, wim, xva.",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonDiscFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonDiscFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonDiscFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonDiscFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonDiscFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonDataFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonDataFileExtensions",
                "name": "commonDataFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: json, xml, csv, sql, db, sqlite, log, txt, yaml, yml, ini, cfg, conf, properties, env, tsv, dat, dbf, mdb, accdb, xlsx, xls, ods, parquet, avro, jsonl, ndjson.\nExtended formats includes: sav, dta, por, sas7bdat, xpt, rdata, rds, feather, hdf5, h5, nc, cdf, mat, pickle, pkl, msgpack, bson, cbor, protobuf, pb, arff, weka, libsvm, svmlight, tfrecord, lmdb, leveldb, rocksdb, bdb, gdbm, dbm, ndbm, qdbm, tc, tch, fdb, realm, sqlite3, db3, s3db, sl3, dump, backup, bak",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "__commonDataFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __commonDataFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = __commonDataFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonDataFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonDataFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonCompressedFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonCompressedFileExtensions",
                "name": "commonCompressedFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: zip, rar, 7z, tar, gz, &#39;targz, tgz, bz2, &#39;tarbz2, tbz2, xz, &#39;tarxz, txz, iso, dmg, cab, deb, rpm, pkg, jar, war, apk\nExtended formats includes: ace, alz, arc, arj, bz, cpio, egg, lha, lz, lzh, lzma, lzo, pak, sit, sitx, &#39;tar.lz&#39;, &#39;tar.Z&#39;, tbz, tlz, tz, tZ, wim, xar, z, zipx",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "commonCompressedFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { commonCompressedFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = commonCompressedFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonCompressedFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonCompressedFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.extension.commonAudioFileExtensions": {
                "id": "@blackbyte.sugar.shared.extension.commonAudioFileExtensions",
                "name": "commonAudioFileExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TCommonFileExtensionsSettings"
                                }
                            ],
                            "raw": "TCommonFileExtensionsSettings"
                        },
                        "description": "Settings to customize the function behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Array<String>"
                    },
                    "description": "The array of extensions"
                },
                "setting": {
                    "dot": {
                        "name": "dot",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the dot will be added to the extension",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "exclude": {
                        "name": "exclude",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "An array of extensions to exclude",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "extended": {
                        "name": "extended",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "If true, the extended formats will be included",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get an array of common text file extensions with or without the dot\nCommon formats includes: mp3, wav, flac, aac, m4a, ogg, wma, opus, aiff, alac, ape, webm, ac3, dts, amr, mid, midi, cda, ra, au, voc, gsm, pcm\nExtended formats includes: 3gp, 8svx, aa, aax, ac4, act, aif, amv, awb, awg, bwf, caf, dct, dff, dsf, dss, dvf, dxd, eac3, ec3, flv, iklax, it, ivs, kar, la, m1a, m2a, m3u, m3u8, m4b, m4p, mka, mld, mlp, mmf, mod, mogg, mp2, mpa, mpc, mpp, mpu, msv, nmf, oga, ogm, ogv, ogx, pls, ram, raw, rax, rf64, rmi, s3m, saf, sd2, shn, sln, smp, snd, spx, tak, thd, tta, vox, vqf, w64, wax, wm, wmv, wpl, wv, wvx, xa, xm, xspf",
                "namespace": "@blackbyte.sugar.shared.extension",
                "status": "stable",
                "snippet": {
                    "label": "commonAudioFileExtensions()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { commonAudioFileExtensions } from '@blackbyte/sugar/extension';\nconst extensions = commonAudioFileExtensions();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "commonAudioFileExtensions.ts",
                "extension": "ts",
                "relPath": "src/shared/extension/commonAudioFileExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.linear": {
                "id": "@blackbyte.sugar.shared.easing.linear",
                "name": "linear",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease linear function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "__linear($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __linear } from '@blackbyte/sugar/easing';\n__linear(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "linear.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/linear.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeOutQuint": {
                "id": "@blackbyte.sugar.shared.easing.easeOutQuint",
                "name": "easeOutQuint",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease out quint function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeOutQuint($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeOutQuint } from '@blackbyte/sugar/easing';\neaseOutQuint(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeOutQuint.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeOutQuint.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeOutQuart": {
                "id": "@blackbyte.sugar.shared.easing.easeOutQuart",
                "name": "easeOutQuart",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease out quart function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeOutQuart($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeOutQuart } from '@blackbyte/sugar/easing';\neaseOutQuart(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeOutQuart.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeOutQuart.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeOutQuad": {
                "id": "@blackbyte.sugar.shared.easing.easeOutQuad",
                "name": "easeOutQuad",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease out quad function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeOutQuad($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeOutQuad } from '@blackbyte/sugar/easing';\neaseOutQuad(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeOutQuad.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeOutQuad.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeOutCubic": {
                "id": "@blackbyte.sugar.shared.easing.easeOutCubic",
                "name": "easeOutCubic",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease out cubic function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeOutCubic($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeOutCubic } from '@blackbyte/sugar/easing';\neaseOutCubic(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeOutCubic.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeOutCubic.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeInQuint": {
                "id": "@blackbyte.sugar.shared.easing.easeInQuint",
                "name": "easeInQuint",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease in quint function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeInQuint($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInQuint } from '@blackbyte/sugar/easing';\neaseInQuint(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeInQuint.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeInQuint.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeInQuart": {
                "id": "@blackbyte.sugar.shared.easing.easeInQuart",
                "name": "easeInQuart",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease in quart function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeInQuart($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInQuart } from '@blackbyte/sugar/easing';\neaseInQuart(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeInQuart.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeInQuart.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeInQuad": {
                "id": "@blackbyte.sugar.shared.easing.easeInQuad",
                "name": "easeInQuad",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease in quad function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeInQuad($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInQuad } from '@blackbyte/sugar/easing';\neaseInQuad(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeInQuad.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeInQuad.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeInOutQuint": {
                "id": "@blackbyte.sugar.shared.easing.easeInOutQuint",
                "name": "easeInOutQuint",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease in out quint function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeInOutQuint($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInOutQuint } from '@blackbyte/sugar/easing';\neaseInOutQuint(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeInOutQuint.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeInOutQuint.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeInOutQuart": {
                "id": "@blackbyte.sugar.shared.easing.easeInOutQuart",
                "name": "easeInOutQuart",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease in out quart function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeInOutQuart($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInOutQuart } from '@blackbyte/sugar/easing';\neaseInOutQuart(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeInOutQuart.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeInOutQuart.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeInOutQuad": {
                "id": "@blackbyte.sugar.shared.easing.easeInOutQuad",
                "name": "easeInOutQuad",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease in out quad function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeInOutQuad($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInOutQuad } from '@blackbyte/sugar/easing';\neaseInOutQuad(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeInOutQuad.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeInOutQuad.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeInOutCubic": {
                "id": "@blackbyte.sugar.shared.easing.easeInOutCubic",
                "name": "easeInOutCubic",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease in out cubic function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeInOutCubic($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInOutCubic } from '@blackbyte/sugar/easing';\neaseInOutCubic(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeInOutCubic.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeInOutCubic.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.easeInCubic": {
                "id": "@blackbyte.sugar.shared.easing.easeInCubic",
                "name": "easeInCubic",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "t": {
                        "name": "t",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The current time",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The value depending on time"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ease in cubic function",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "easeInCubic($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { easeInCubic } from '@blackbyte/sugar/easing';\neaseInCubic(0.4);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "easeInCubic.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/easeInCubic.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.easing.availableEasingsArray": {
                "id": "@blackbyte.sugar.shared.easing.availableEasingsArray",
                "name": "availableEasingsArray",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "An array of all the easing functions available"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply return back an array of all the available easings function in the sugar toolkit",
                "namespace": "@blackbyte.sugar.shared.easing",
                "status": "stable",
                "snippet": {
                    "label": "availableEasingsArray()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { availableEasingsArray } from '@blackbyte/sugar/easing';\navailableEasingsArray();"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "availableEasingsArray.ts",
                "extension": "ts",
                "relPath": "src/shared/easing/availableEasingsArray.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.datetime.wait": {
                "id": "@blackbyte.sugar.shared.datetime.wait",
                "name": "wait",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "timeout": {
                        "name": "timeout",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The timeout to wait in ms",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A simple promise resolved once the timeout is finished"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function is a simple &quot;setTimeout&quot; wrapper inside a promise.",
                "namespace": "@blackbyte.sugar.shared.datetime",
                "status": "stable",
                "snippet": {
                    "label": "wait($1)",
                    "code": "await wait($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { wait } from '@blackbyte/sugar/datetime';\nawait wait(2000);"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "wait.ts",
                "extension": "ts",
                "relPath": "src/shared/datetime/wait.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.date.utcTime": {
                "id": "@blackbyte.sugar.shared.date.utcTime",
                "name": "utcTime",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "hours": {
                        "name": "hours",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Display the hours or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "minutes": {
                        "name": "minutes",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Display the minutes or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "seconds": {
                        "name": "seconds",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Display the seconds or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "date": {
                        "name": "date",
                        "type": {
                            "types": [
                                {
                                    "type": "Date"
                                }
                            ],
                            "raw": "Date"
                        },
                        "description": "The date to use to display the time",
                        "default": "new Date()",
                        "defaultStr": "new Date()"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The time string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This method allows you to display easily the time in UTC format like &quot;10:20:32&quot;",
                "namespace": "@blackbyte.sugar.shared.date",
                "status": "stable",
                "snippet": {
                    "label": "utcTime()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { utcTime } from '@blackbyte/sugar/date';\nutcTime(); // => 10:20:32\nutcTime(true, true, false); // => 10:20"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "utcTime.ts",
                "extension": "ts",
                "relPath": "src/shared/datetime/utcTime.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.datetime.timeAgo": {
                "id": "@blackbyte.sugar.shared.datetime.timeAgo",
                "name": "timeAgo",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "timestamp": {
                        "name": "timestamp",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The timestamp to transform",
                        "defaultStr": ""
                    },
                    "format": {
                        "name": "format",
                        "type": {
                            "types": [
                                {
                                    "type": "string",
                                    "value": "short"
                                },
                                {
                                    "type": "string",
                                    "value": "medium"
                                },
                                {
                                    "type": "string",
                                    "value": "long"
                                }
                            ],
                            "raw": "'short'|'medium'|'long'"
                        },
                        "description": "The format you want back",
                        "default": "'medium'",
                        "defaultStr": "'medium'"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The converted value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Simple &quot;time&quot; ago for your Unix timestamps and JavaScript Date objects.",
                "namespace": "@blackbyte.sugar.shared.datetime",
                "status": "stable",
                "snippet": {
                    "label": "timeAgo($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { timeAgo } from '@blackbyte/sugar/datetime';\ntimeAgo(1611344957); // => 7 secs ago"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/js-ago",
                        "description": ""
                    }
                ],
                "filename": "timeAgo.ts",
                "extension": "ts",
                "relPath": "src/shared/datetime/timeAgo.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.datetime.sleep": {
                "id": "@blackbyte.sugar.shared.datetime.sleep",
                "name": "sleep",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "timeout": {
                        "name": "timeout",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The timeout to sleep in ms",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A simple promise resolved once the timeout is finished"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function is a simple &quot;setTimeout&quot; wrapper inside a promise.",
                "namespace": "@blackbyte.sugar.shared.datetime",
                "status": "stable",
                "snippet": {
                    "label": "sleep($1)",
                    "code": "await sleep($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sleep } from '@blackbyte/sugar/datetime';\nawait sleep(2000);"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sleep.ts",
                "extension": "ts",
                "relPath": "src/shared/datetime/sleep.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.datetime.formatDuration": {
                "id": "@blackbyte.sugar.shared.datetime.formatDuration",
                "name": "formatDuration",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "duration": {
                        "name": "duration",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The duration in ms to format",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The formatted estimation duration"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function let you pass a duration in ms and get back a formatted estimation like &quot;2.4m&quot;, &quot;30s&quot;, etc...",
                "namespace": "@blackbyte.sugar.shared.datetime",
                "status": "stable",
                "snippet": {
                    "label": "formatDuration($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { formatDuration } from '@blackbyte/sugar/datetime';\nformatDuration(2000); // => 2s"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "formatDuration.ts",
                "extension": "ts",
                "relPath": "src/shared/datetime/formatDuration.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.datetime.convertTime": {
                "id": "@blackbyte.sugar.shared.datetime.convertTime",
                "name": "convertTime",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "from": {
                        "name": "from",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "String|Number"
                        },
                        "description": "The value to start from like \"10s\", \"20ms\", \"2h\", etc... Supports 'ms', 'millisecond', 'milliseconds', 's', 'second', 'seconds', 'm', 'minute', 'minutes', 'h', 'hour', 'hours', 'd', 'day', 'days', 'w', 'week', 'weeks', 'month', 'months', 'y', 'year', 'years'",
                        "defaultStr": ""
                    },
                    "to": {
                        "name": "to",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The format you want to get back. Can be 'ms' | 'millisecond' | 'milliseconds' | 's' | 'second' | 'seconds' | 'm' | 'minute' | 'minutes' | 'h' | 'hour' | 'hours' | 'd' | 'day' | 'days' | 'w' | 'week' | 'weeks' | 'month' | 'months' | 'y' | 'year' | 'years'",
                        "default": "'ms'",
                        "defaultStr": "'ms'"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The converted value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to convert time like seconds, ms, hours, minutes, etc... from one format to another",
                "namespace": "@blackbyte.sugar.shared.datetime",
                "status": "stable",
                "snippet": {
                    "label": "convertTime($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { convertTime } from '@blackbyte/sugar/datetime';\nconvertTime('10s', 'ms'); // => 10000"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "convertTime.ts",
                "extension": "ts",
                "relPath": "src/shared/datetime/convertTime.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.css.stripCssComments": {
                "id": "@blackbyte.sugar.shared.css.stripCssComments",
                "name": "stripCssComments",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "css": {
                        "name": "css",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The css code to process",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of settings",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed css code"
                },
                "setting": {
                    "block": {
                        "name": "block",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Remove the blocks comments",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "line": {
                        "name": "line",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Remove the line comments",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply remove all the css comments like:\n- Multiline blocks css comments begining with / *, ending with\n/\n- Single line comments begining with //",
                "namespace": "@blackbyte.sugar.shared.css",
                "status": "stable",
                "snippet": {
                    "label": "stripCssComments($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { stripCssComments } from '@blackbyte/sugar/css';\nstripCssComments(`\n// something cool\nbody { background-color: red; }\n`);\n// body { background-color: red }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/strip-css-comments",
                        "description": ""
                    }
                ],
                "filename": "stripCssComments.ts",
                "extension": "ts",
                "relPath": "src/shared/css/stripCssComments.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.css.isValidCssUnitValue": {
                "id": "@blackbyte.sugar.shared.css.isValidCssUnitValue",
                "name": "isValidCssUnitValue",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "String|Number"
                        },
                        "description": "The value to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a valid unit based value, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function tells you if the passed value is a valid css unit based one like 10px, 20em, etc...",
                "namespace": "@blackbyte.sugar.shared.css",
                "status": "stable",
                "snippet": {
                    "label": "isValidCssUnitValue($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isValidCssUnitValue } from '@blackbyte/sugar/css';\nisValidCssUnitValue('10px'); // => true\nisValidCssUnitValue('default'); // => false"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isValidCssUnitValue.ts",
                "extension": "ts",
                "relPath": "src/shared/css/isValidCssUnitValue.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.css.transform.styleString2Object": {
                "id": "@blackbyte.sugar.js.css.transform.styleString2Object",
                "name": "styleString2Object",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "style": {
                        "name": "style",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The style string",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "",
                                "of": [
                                    "Object"
                                ]
                            }
                        ],
                        "raw": "(Object)"
                    },
                    "description": "The string object representation"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Transform a style string to an object representation",
                "namespace": "@blackbyte.sugar.js.css.transform",
                "status": "stable",
                "snippet": {
                    "label": "styleStringToObject($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { styleStringToObject } from '@blackbyte/sugar/css'\nconst styleString =  styleStringToObject('padding-left:20px; display:block;');\n// output => {\n//\t\tpaddingLeft : '20px',\n// \t\tdisplay : 'block'\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "styleStringToObject.ts",
                "extension": "ts",
                "relPath": "src/shared/css/transform/styleStringToObject.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.css.transform.styleObject2String": {
                "id": "@blackbyte.sugar.js.css.transform.styleObject2String",
                "name": "styleObject2String",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "styleObj": {
                        "name": "styleObj",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of style to apply",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "(String)"
                    },
                    "description": "The string style representation"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Transform a style object to inline string separated by ;",
                "namespace": "@blackbyte.sugar.js.css.transform",
                "status": "stable",
                "snippet": {
                    "label": "styleObjectToString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { styleObjectToString } from '@blackbyte/sugar/css'\nconst styleString =  styleObjectToString({\n\t\tpaddingLeft : '20px',\n\t\tdisplay : 'block'\n});\n// output => padding-left:20px; display:block;"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "styleObjectToString.ts",
                "extension": "ts",
                "relPath": "src/shared/css/transform/styleObjectToString.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.css.rule.removeVendorPrefix": {
                "id": "@blackbyte.sugar.js.css.rule.removeVendorPrefix",
                "name": "removeVendorPrefix",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "propertyName": {
                        "name": "propertyName",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "prefixed property name",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "string"
                            }
                        ],
                        "raw": "string"
                    },
                    "description": "unprefixed property name"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Remove vendor prefixes from CSSPropertyNames",
                "namespace": "@blackbyte.sugar.js.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "removeVendorPrefix($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { removeVendorPrefix } from '@blackbyte/sugar/css';\nremoveVendorPrefix('moz-something'); // 'something'"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/marionebl/jogwheel/blob/main/source/library/remove-vendor-prefix.js",
                        "description": ""
                    }
                ],
                "filename": "removeVendorPrefix.ts",
                "extension": "ts",
                "relPath": "src/shared/css/rule/removeVendorPrefix.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.crypto.sha512": {
                "id": "@blackbyte.sugar.shared.crypto.sha512",
                "name": "sha512",
                "type": {
                    "types": [
                        {
                            "type": "Object"
                        }
                    ],
                    "raw": "Object"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Expose two function named &quot;encrypt&quot; and &quot;decrypt&quot; that you can use to process your content using the sha512 algorithm",
                "namespace": "@blackbyte.sugar.shared.crypto",
                "status": "stable",
                "snippet": {
                    "label": "sha512.encrypt($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sha512 } from '@blackbyte/sugar/crypto';\nsha512.encrypt('hello world');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sha512.ts",
                "extension": "ts",
                "relPath": "src/shared/crypto/sha512.ts",
                "children": {
                    "encrypt": {
                        "id": "s0d1117670b9d4c1f2728756eca3942963b8c453f2eec046e877888ee4b97570d",
                        "name": "encrypt",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "param": {
                            "message": {
                                "name": "message",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The message to encrypt",
                                "defaultStr": ""
                            }
                        },
                        "return": {
                            "type": {
                                "types": [
                                    {
                                        "type": "String"
                                    }
                                ],
                                "raw": "String"
                            },
                            "description": "The encrypted string"
                        },
                        "description": "Encrypt",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://blackbyte.space"
                        }
                    }
                }
            },
            "@blackbyte.sugar.shared.crypto.sha256": {
                "id": "@blackbyte.sugar.shared.crypto.sha256",
                "name": "sha256",
                "type": {
                    "types": [
                        {
                            "type": "Object"
                        }
                    ],
                    "raw": "Object"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Expose two function named &quot;encrypt&quot; and &quot;decrypt&quot; that you can use to process your content using the sha256 algorithm",
                "namespace": "@blackbyte.sugar.shared.crypto",
                "status": "stable",
                "snippet": {
                    "label": "sha256.encrypt($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sha256 } from '@blackbyte/sugar/crypto';\nsha256.encrypt('hello world');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sha256.ts",
                "extension": "ts",
                "relPath": "src/shared/crypto/sha256.ts",
                "children": {
                    "encrypt": {
                        "id": "s0d1117670b9d4c1f2728756eca3942963b8c453f2eec046e877888ee4b97570d",
                        "name": "encrypt",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "param": {
                            "message": {
                                "name": "message",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The message to encrypt",
                                "defaultStr": ""
                            }
                        },
                        "return": {
                            "type": {
                                "types": [
                                    {
                                        "type": "String"
                                    }
                                ],
                                "raw": "String"
                            },
                            "description": "The encrypted string"
                        },
                        "description": "Encrypt",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://blackbyte.space"
                        }
                    }
                }
            },
            "@blackbyte.sugar.shared.crypto.object": {
                "id": "@blackbyte.sugar.shared.crypto.object",
                "name": "object",
                "type": {
                    "types": [
                        {
                            "type": "Object"
                        }
                    ],
                    "raw": "Object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Expose two function named &quot;encrypt&quot; and &quot;decrypt&quot; that you can use to process your content using the object algorithm",
                "namespace": "@blackbyte.sugar.shared.crypto",
                "status": "stable",
                "snippet": {
                    "label": "object.encrypt($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { object } from '@blackbyte/sugar/crypto';\nobject.encrypt({\n     hello: 'world'\n});"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.io"
                },
                "filename": "object.ts",
                "extension": "ts",
                "relPath": "src/shared/crypto/object.ts",
                "children": {
                    "encrypt": {
                        "id": "s556650b970146fd602ff321fa7b8c1622f8d51853d148282c0fde010ce8a989f",
                        "name": "encrypt",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "param": {
                            "object": {
                                "name": "object",
                                "type": {
                                    "types": [
                                        {
                                            "type": "Object"
                                        }
                                    ],
                                    "raw": "Object"
                                },
                                "description": "The object to encrypt",
                                "defaultStr": ""
                            },
                            "salt": {
                                "name": "salt",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The salt to encode the object. Needed to decode correctly the object",
                                "default": "blackbyte.sugar.crypto.object",
                                "defaultStr": "\"blackbyte.sugar.crypto.object\""
                            }
                        },
                        "return": {
                            "type": {
                                "types": [
                                    {
                                        "type": "String"
                                    }
                                ],
                                "raw": "String"
                            },
                            "description": "The encrypted object"
                        },
                        "description": "Encrypt",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://blackbyte.io"
                        }
                    },
                    "decrypt": {
                        "id": "s40a2cd5f75c8cca0fe4476c67ca5960d7eacf1df99e0cfbfa7e2a228e8b0a92f",
                        "name": "decrypt",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "param": {
                            "encodedObject": {
                                "name": "encodedObject",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The object to decrypt",
                                "defaultStr": ""
                            },
                            "salt": {
                                "name": "salt",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The salt to decode the object",
                                "default": "'blackbyte.sugar.crypto.object'",
                                "defaultStr": "'blackbyte.sugar.crypto.object'"
                            }
                        },
                        "return": {
                            "type": {
                                "types": [
                                    {
                                        "type": "Object"
                                    }
                                ],
                                "raw": "Object"
                            },
                            "description": "The decrypted object"
                        },
                        "description": "Decrypt",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://blackbyte.io"
                        }
                    }
                }
            },
            "@blackbyte.sugar.shared.crypto.md5": {
                "id": "@blackbyte.sugar.shared.crypto.md5",
                "name": "md5",
                "type": {
                    "types": [
                        {
                            "type": "Object"
                        }
                    ],
                    "raw": "Object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Expose two function named &quot;encrypt&quot; and &quot;decrypt&quot; that you can use to process your content using the md5 algorithm",
                "namespace": "@blackbyte.sugar.shared.crypto",
                "status": "stable",
                "snippet": {
                    "label": "md5.encrypt($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { md5 } from '@blackbyte/sugar/crypto';\nmd5.encrypt('hello world');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "md5.ts",
                "extension": "ts",
                "relPath": "src/shared/crypto/md5.ts",
                "children": {
                    "encrypt": {
                        "id": "s0d1117670b9d4c1f2728756eca3942963b8c453f2eec046e877888ee4b97570d",
                        "name": "encrypt",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "param": {
                            "message": {
                                "name": "message",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The message to encrypt",
                                "defaultStr": ""
                            }
                        },
                        "return": {
                            "type": {
                                "types": [
                                    {
                                        "type": "String"
                                    }
                                ],
                                "raw": "String"
                            },
                            "description": "The encrypted string"
                        },
                        "description": "Encrypt",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://blackbyte.space"
                        }
                    }
                }
            },
            "@blackbyte.sugar.shared.crypto.base64": {
                "id": "@blackbyte.sugar.shared.crypto.base64",
                "name": "base64",
                "type": {
                    "types": [
                        {
                            "type": "Object"
                        }
                    ],
                    "raw": "Object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Expose two function named &quot;encrypt&quot; and &quot;decrypt&quot; that you can use to process your content using the base64 algorithm",
                "namespace": "@blackbyte.sugar.shared.crypto",
                "status": "stable",
                "snippet": {
                    "label": "base64.encrypt($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { base64 } from '@blackbyte/sugar/crypto';\nbase64.encrypt('hello world');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "base64.ts",
                "extension": "ts",
                "relPath": "src/shared/crypto/base64.ts",
                "children": {
                    "encrypt": {
                        "id": "s961e0f5aa08b4176edfa568833baf981acb6fd78a268535b4b649080c8519618",
                        "name": "encrypt",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "param": {
                            "message": {
                                "name": "message",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The message to encrypt",
                                "defaultStr": ""
                            }
                        },
                        "return": {
                            "type": {
                                "types": [
                                    {
                                        "type": "String"
                                    }
                                ],
                                "raw": "String"
                            },
                            "description": "The encrypted message"
                        },
                        "description": "Encrypt",
                        "since": "1.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://blackbyte.space"
                        }
                    },
                    "decrypt": {
                        "id": "s643092eb4af4dbd7c9d193f6d00abc82d86eea7bc4c3625dcfc7ede5d8916275",
                        "name": "decrypt",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "param": {
                            "message": {
                                "name": "message",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The message to decrypt",
                                "defaultStr": ""
                            }
                        },
                        "return": {
                            "type": {
                                "types": [
                                    {
                                        "type": "String"
                                    }
                                ],
                                "raw": "String"
                            },
                            "description": "The decrypted message"
                        },
                        "description": "Decrypt",
                        "since": "1.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://blackbyte.space"
                        }
                    }
                }
            },
            "@blackbyte.sugar.shared.crypto.aes": {
                "id": "@blackbyte.sugar.shared.crypto.aes",
                "name": "aes",
                "type": {
                    "types": [
                        {
                            "type": "Object"
                        }
                    ],
                    "raw": "Object"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Expose two function named &quot;encrypt&quot; and &quot;decrypt&quot; that you can use to process your content using the aes algorithm",
                "namespace": "@blackbyte.sugar.shared.crypto",
                "status": "stable",
                "snippet": {
                    "label": "aes.encrypt($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { aes } from '@blackbyte/sugar/crypto';\naes.encrypt('hello world');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.io"
                },
                "filename": "aes.ts",
                "extension": "ts",
                "relPath": "src/shared/crypto/aes.ts",
                "children": {
                    "encrypt": {
                        "id": "sb9c7e637ee4b84c5fa3aa2b0bf53e4b56bb37f3ef2e63b5f39df4d4cc012a12f",
                        "name": "encrypt",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "param": {
                            "message": {
                                "name": "message",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The message to encrypt",
                                "defaultStr": ""
                            },
                            "key": {
                                "name": "key",
                                "type": {
                                    "types": [
                                        {
                                            "type": "String"
                                        }
                                    ],
                                    "raw": "String"
                                },
                                "description": "The secret key to encrypt",
                                "default": "'blackbyte.sugar.crypto.aes'",
                                "defaultStr": "'blackbyte.sugar.crypto.aes'"
                            }
                        },
                        "return": {
                            "type": {
                                "types": [
                                    {
                                        "type": "String"
                                    }
                                ],
                                "raw": "String"
                            },
                            "description": "The encrypted message"
                        },
                        "description": "Encrypt",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://blackbyte.io"
                        }
                    }
                }
            },
            "@blackbyte.sugar.shared.convert.xmlToJson": {
                "id": "@blackbyte.sugar.shared.convert.xmlToJson",
                "name": "xmlToJson",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "xml": {
                        "name": "xml",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The xml string to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The corresponding json object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a xml string as input and return a json object.",
                "namespace": "@blackbyte.sugar.shared.convert",
                "status": "stable",
                "snippet": {
                    "label": "xmlToJson($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import ( xmlToJson ) from '@blackbyte/sugar/convert';\nxmlToJson('...');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/fast-xml-parser",
                        "description": ""
                    }
                ],
                "filename": "xmlTojson.ts",
                "extension": "ts",
                "relPath": "src/shared/convert/xmlTojson.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.convert.mapToObject": {
                "id": "@blackbyte.sugar.shared.convert.mapToObject",
                "name": "mapToObject",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "map": {
                        "name": "map",
                        "type": {
                            "types": [
                                {
                                    "type": "Map"
                                }
                            ],
                            "raw": "Map"
                        },
                        "description": "The map object to convert into object",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The plain object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take a Map object and convert it to a plain object",
                "namespace": "@blackbyte.sugar.shared.convert",
                "status": "stable",
                "snippet": {
                    "label": "mapToObject($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { mapToObject } from '@blackbyte/sugar/convert';\nconst myMap = new Map();\nmyMap.set('hello', 'world');\nmapToObject(myMap);\n// {\n//   hello: 'world'\n// }"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "mapToObject.ts",
                "extension": "ts",
                "relPath": "src/shared/convert/mapToObject.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.rgba2hsla": {
                "id": "@blackbyte.sugar.shared.color.rgba2hsla",
                "name": "rgba2hsla",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "r": {
                        "name": "r",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                },
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Number|String|Object"
                        },
                        "description": "The red value between 0-255 or an object representing r, b, g, a or a string representing the rgba(...) color",
                        "defaultStr": ""
                    },
                    "g": {
                        "name": "g",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The green value between 0-255",
                        "defaultStr": ""
                    },
                    "b": {
                        "name": "b",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The blue value between 0-255",
                        "defaultStr": ""
                    },
                    "a": {
                        "name": "a",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The alpha value between 0-100|0-1",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "object"
                            }
                        ],
                        "raw": "object"
                    },
                    "description": "The hsl object representation with a \"toString\" method"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "RGBA to HSL",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "rgbaToHsla($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { rgbaToHsla } from '@blackbyte/sugar/color';\nrgbaToHsla(10,20,50,10);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/colors-convert",
                        "description": ""
                    }
                ],
                "filename": "rgbaToHsla.ts",
                "extension": "ts",
                "relPath": "src/shared/color/rgbaToHsla.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.rgba2hex": {
                "id": "@blackbyte.sugar.shared.color.rgba2hex",
                "name": "rgba2hex",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "r": {
                        "name": "r",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                },
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Number|String|Object"
                        },
                        "description": "The red value between 0-255 or an object representing r, g, b, a or a string representing the rgba(...) color",
                        "defaultStr": ""
                    },
                    "g": {
                        "name": "g",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The green value between 0-255",
                        "defaultStr": ""
                    },
                    "b": {
                        "name": "b",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The blue value between 0-255",
                        "defaultStr": ""
                    },
                    "a": {
                        "name": "a",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The alpha value between 0-100|0-1",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "string"
                            }
                        ],
                        "raw": "string"
                    },
                    "description": "The hex string representation like #ff004f"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "RGBA to HEX",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "rgbaToHex($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { rgbaToHex } from '@blackbyte/sugar/color';\nrgbaToHex(10,20,30,10);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/colors-convert",
                        "description": ""
                    }
                ],
                "filename": "rgbaToHex.ts",
                "extension": "ts",
                "relPath": "src/shared/color/rgbaToHex.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.parseRgba": {
                "id": "@blackbyte.sugar.shared.color.parseRgba",
                "name": "parseRgba",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "rgbaString": {
                        "name": "rgbaString",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "The rgba string (rgba(r,g,b,a)) to parse",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "object"
                            }
                        ],
                        "raw": "object"
                    },
                    "description": "The rgba object representation"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Parse RGBA string and return an object",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "parseRgba($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { parseRgba } from '@blackbyte/sugar/color';\nparseRgba('rgba(20,10,100,20)');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "parseRgba.ts",
                "extension": "ts",
                "relPath": "src/shared/color/parseRgba.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.parseHsla": {
                "id": "@blackbyte.sugar.shared.color.parseHsla",
                "name": "parseHsla",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "hslaString": {
                        "name": "hslaString",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "The hsl string (hsl(h,s,l)) to parse",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "object"
                            }
                        ],
                        "raw": "object"
                    },
                    "description": "The hsl object representation"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Parse HSL",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "parseHsla($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { parseHsla } from '@blackbyte/sugar/color';\nparseHsla('hsl(20,20,20)');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "parseHsla.ts",
                "extension": "ts",
                "relPath": "src/shared/color/parseHsla.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.hslToRgba": {
                "id": "@blackbyte.sugar.shared.color.hslToRgba",
                "name": "hslToRgba",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "h": {
                        "name": "h",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                },
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Number|String|Object"
                        },
                        "description": "The hue value between 0-360 an object representing h, s, l, (a) or a string representing the hsla(...) color",
                        "defaultStr": ""
                    },
                    "s": {
                        "name": "s",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The saturation value between 0-100|0-1",
                        "defaultStr": ""
                    },
                    "l": {
                        "name": "l",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The luminence value between 0-100|0-1",
                        "defaultStr": ""
                    },
                    "a": {
                        "name": "a",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The alpha value between 0-100|0-1",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "object"
                            }
                        ],
                        "raw": "object"
                    },
                    "description": "The rgba object representation with a \"toString\" method"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "HSL to RGBA",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "hslaToRgba($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __hslToRgba } from '@blackbyte/sugar/color';\n__hslToRgba(10,20,30);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/colors-convert",
                        "description": ""
                    }
                ],
                "filename": "hslaToRgba.ts",
                "extension": "ts",
                "relPath": "src/shared/color/hslaToRgba.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.hslaToHexa": {
                "id": "@blackbyte.sugar.shared.color.hslaToHexa",
                "name": "hslaToHexa",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "h": {
                        "name": "h",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                },
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Number|String|Object"
                        },
                        "description": "The hue value between 0-360 an object representing h, s, l, (a) or a string representing the hsla(...) color",
                        "defaultStr": ""
                    },
                    "s": {
                        "name": "s",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The saturation value between 0-100|0-1",
                        "defaultStr": ""
                    },
                    "l": {
                        "name": "l",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The luminence value between 0-100|0-1",
                        "defaultStr": ""
                    },
                    "a": {
                        "name": "a",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The alpha value between 0-100|0-1",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The hex string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "HSLA to HEX",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "hslaToHexa($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { hslaToHexa } from '@blackbyte/sugar/color';\nhslaToHexa(10,20,30,1);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/colors-convert",
                        "description": ""
                    }
                ],
                "filename": "hslaToHexa.ts",
                "extension": "ts",
                "relPath": "src/shared/color/hslaToHexa.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.hslaToHex": {
                "id": "@blackbyte.sugar.shared.color.hslaToHex",
                "name": "hslaToHex",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "h": {
                        "name": "h",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                },
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Number|String|Object"
                        },
                        "description": "The hue value between 0-360 an object representing h, s, l, (a) or a string representing the hsla(...) color",
                        "defaultStr": ""
                    },
                    "s": {
                        "name": "s",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The saturation value between 0-100|0-1",
                        "defaultStr": ""
                    },
                    "l": {
                        "name": "l",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The luminence value between 0-100|0-1",
                        "defaultStr": ""
                    },
                    "a": {
                        "name": "a",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The alpha value between 0-100|0-1",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The hex string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "HSLA to HEX",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "hslaToHex($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { hslaToHex } from '@blackbyte/sugar/color';\nhslaToHex(10,20,30);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/colors-convert",
                        "description": ""
                    }
                ],
                "filename": "hslaToHex.ts",
                "extension": "ts",
                "relPath": "src/shared/color/hslaToHex.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.hexToRgba": {
                "id": "@blackbyte.sugar.shared.color.hexToRgba",
                "name": "hexToRgba",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "hex": {
                        "name": "hex",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "The hex string to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "object"
                            }
                        ],
                        "raw": "object"
                    },
                    "description": "The rgba object representation with a \"toString\" method"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Hex to RGBA",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "hexToRgba($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { hexToRgba } from '@blackbyte/sugar/color';\nhexToRgba('#ff00ff');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/colors-convert",
                        "description": ""
                    }
                ],
                "filename": "hexToRgba.ts",
                "extension": "ts",
                "relPath": "src/shared/color/hexToRgba.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.convertColor": {
                "id": "@blackbyte.sugar.shared.color.convertColor",
                "name": "convertColor",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "input": {
                        "name": "input",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "The input color to convert",
                        "defaultStr": ""
                    },
                    "format": {
                        "name": "format",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The format wanted",
                        "default": "rgba",
                        "defaultStr": "\"rgba\""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Mixed"
                            }
                        ],
                        "raw": "Mixed"
                    },
                    "description": "The converted color"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take as input any color format like rgba Object, hsl Object, hsv Object, hex String, rgba String, hsl String or hsv String\nand convert it into the wanted format like &quot;rgba&quot;, &quot;hsl&quot;, &quot;hsv&quot;, &quot;hex&quot;, &quot;rgbaString&quot;, &quot;hslString&quot; or &quot;hsvString&quot;",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "convertColor($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { convertColor } from '@blackbyte/sugar/color';\nconvertColor('rgba(10,20,30,100)', 'rgba'); // => { r: 10, g: 20, b: 30, a: 100 }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "convertColor.ts",
                "extension": "ts",
                "relPath": "src/shared/color/convertColor.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.color.alphaToHex": {
                "id": "@blackbyte.sugar.shared.color.alphaToHex",
                "name": "alphaToHex",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "alpha": {
                        "name": "alpha",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The alpha to convert to hex (0-1)",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The hex string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Take alpha (0-1) and convert it to hex like &quot;FF&quot;, &quot;80&quot;, etc...",
                "namespace": "@blackbyte.sugar.shared.color",
                "status": "stable",
                "snippet": {
                    "label": "alphaToHex($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { alphaToHex } from '@blackbyte/sugar/color';\nalphaToHex(1); // FF"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "alphaToHex.ts",
                "extension": "ts",
                "relPath": "src/shared/color/alphaToHex.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.class.toPlainObject": {
                "id": "@blackbyte.sugar.shared.class.toPlainObject",
                "name": "toPlainObject",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "instance": {
                        "name": "instance",
                        "type": {
                            "types": [
                                {
                                    "type": "Mixed"
                                }
                            ],
                            "raw": "Mixed"
                        },
                        "description": "Any class instance to transform into a plain object",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "A plain object version of the the class instance"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a instance as parameter and return a plain object of it",
                "namespace": "@blackbyte.sugar.shared.class",
                "status": "stable",
                "snippet": {
                    "label": "toPlainObject($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { toPlainObject } from '@blackbyte/sugar/class';\nclass Coco {\n   constructor() {\n     this.hello = 'world';\n   }\n}\ntoPlainObject(new Coco()); // => { hello: 'world' }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "toPlainObject.ts",
                "extension": "ts",
                "relPath": "src/shared/class/toPlainObject.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.class.methodExists": {
                "id": "@blackbyte.sugar.shared.class.methodExists",
                "name": "methodExists",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "instance": {
                        "name": "instance",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The instance to check the methods on",
                        "defaultStr": ""
                    },
                    "...methods": {
                        "name": "...methods",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The methods to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            },
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Boolean|Array"
                    },
                    "description": "Return true if all is ok, and an array of missing methods if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if one or more methods exists on a class instance",
                "namespace": "@blackbyte.sugar.shared.class",
                "status": "stable",
                "snippet": {
                    "label": "methodExists($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "class Coco {\n   hello() {}\n}\nimport { methodExists } from '@blackbyte/sugar/class';\nconst myInstance = new Coco();\nmethodExists(myInstance, 'hello', 'world'); // => ['world'];\nmethodExists(myInstance, 'hello'); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "methodExists.ts",
                "extension": "ts",
                "relPath": "src/shared/class/methodExists.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.class.getMethods": {
                "id": "@blackbyte.sugar.shared.class.getMethods",
                "name": "getMethods",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "instance": {
                        "name": "instance",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The instance of the object to get the methods names of",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "A simple array of all the methods names"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take an instance as parameter and return all the methods in array format",
                "namespace": "@blackbyte.sugar.shared.class",
                "status": "beta",
                "snippet": {
                    "label": "getMethods($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getMethods } from '@blackbyte/sugar/class';\nmyClass {\n constructor() {}\n hello() {}\n world() {}\n}\nconst myInstance = new myClass();\ngetMethods(myInstance); // => ['hello','world']"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getMethods.ts",
                "extension": "ts",
                "relPath": "src/shared/class/getMethods.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.class.getExtendsStack": {
                "id": "@blackbyte.sugar.shared.class.getExtendsStack",
                "name": "getExtendsStack",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "cls": {
                        "name": "cls",
                        "type": {
                            "types": [
                                {
                                    "type": "Class"
                                }
                            ],
                            "raw": "Class"
                        },
                        "description": "The class to get the stack of",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TGetExtendsStackSettings"
                                }
                            ],
                            "raw": "TGetExtendsStackSettings"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "An object of all the parent classes"
                },
                "setting": {
                    "includeBaseClass": {
                        "name": "includeBaseClass",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to include the base class in the stack or not",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a class as parameter and return an array of all the class names used to extends this one...",
                "namespace": "@blackbyte.sugar.shared.class",
                "status": "beta",
                "snippet": {
                    "label": "getExtendsStack($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getExtendsStack } from '@blackbyte/sugar/class';\nclass Coco extends Error {}\nclass Plop extends Coco {}\ngetExtendsStack(Plop); // => {Coco: [class ...], Error: [class ...]};"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getExtendsStack.ts",
                "extension": "ts",
                "relPath": "src/shared/class/getExtendsStack.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.class.cloneClass": {
                "id": "@blackbyte.sugar.shared.class.cloneClass",
                "name": "cloneClass",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "class": {
                        "name": "class",
                        "type": {
                            "types": [
                                {
                                    "type": "Class"
                                }
                            ],
                            "raw": "Class"
                        },
                        "description": "The class to clone",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Class"
                            }
                        ],
                        "raw": "Class"
                    },
                    "description": "A new class"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Clone ES6 Classes",
                "namespace": "@blackbyte.sugar.shared.class",
                "status": "stable",
                "snippet": {
                    "label": "cloneClass($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { cloneClass } from '@blackbyte/sugar/class';\nconst NewClass = cloneClass(class MyClass() {});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/clone-class",
                        "description": ""
                    }
                ],
                "filename": "cloneClass.ts",
                "extension": "ts",
                "relPath": "src/shared/class/cloneClass.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.unique": {
                "id": "@blackbyte.sugar.shared.array.unique",
                "name": "unique",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to deduplicates",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The deduplicated array"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take an array as parameter and return a new one\nwith all the duplicates values removed.",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "unique($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { unique } from '@blackbyte/sugar/array';\nunique(['hello','world','hello','world']); // => ['hello','world']"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "unique.ts",
                "extension": "ts",
                "relPath": "src/shared/array/unique.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.splitEvery": {
                "id": "@blackbyte.sugar.shared.array.splitEvery",
                "name": "splitEvery",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to split",
                        "defaultStr": ""
                    },
                    "every": {
                        "name": "every",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "Every how many items to split the array",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "An array of arrays splited"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Split an array every N items",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "splitEvery($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { splitEvery } from '@blackbyte/sugar/array';\nsplitEvery([1,2,3,4,5,6,7,8,9], 3);\n// [[1,2,3],[4,5,6],[7,8,9]]"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "splitEvery.ts",
                "extension": "ts",
                "relPath": "src/shared/array/splitEvery.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.sameItems": {
                "id": "@blackbyte.sugar.shared.array.sameItems",
                "name": "sameItems",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "...arrays": {
                        "name": "...arrays",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The arrays you want to compare",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "Some settings to refine your comparaison process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "An array containing all the items that are present in all the passed arrays"
                },
                "setting": {
                    "references": {
                        "name": "references",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to use the references comparaison or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "hash": {
                        "name": "hash",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to allows transforming object etc in to hashes and compare this instead",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take two arrays and return all the items that are the same.\nYou can specify if you want only comparing by reference for object, etc... or if\nyou want to transform items in hashes and compare that instead.",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "beta",
                "snippet": {
                    "label": "sameItems($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sameItems } from '@blackbyte/sugar/array';\nsameItems([1,2,3,4], [1,3,5]); // => [1,3]"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sameItems.ts",
                "extension": "ts",
                "relPath": "src/shared/array/sameItems.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.pickSome": {
                "id": "@blackbyte.sugar.shared.array.pickSome",
                "name": "pickSome",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        "Any"
                                    ]
                                }
                            ],
                            "raw": "Any[]"
                        },
                        "description": "The array in which you want to pick a random item",
                        "defaultStr": ""
                    },
                    "$min": {
                        "name": "$min",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The minimum number of items to pick",
                        "default": 1,
                        "defaultStr": "1"
                    },
                    "$max": {
                        "name": "$max",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The maximum number of items to pick",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "The random array item(s)"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This returns you one or more random item of the passed array",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "pickSome($1,$2,$3);"
                },
                "example": [
                    {
                        "language": "ts",
                        "code": "import { pickSome } from '@blackbyte/sugar/array':\npickSome(['hello','world','test'], 1, 2);"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pickSome.ts",
                "extension": "ts",
                "relPath": "src/shared/array/pickSome.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.pickRandom": {
                "id": "@blackbyte.sugar.shared.array.pickRandom",
                "name": "pickRandom",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array from which to pick a random item",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "A random array item"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Pick a random item in the passed array",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "pickRandom($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { pickRandom } from '@blackbyte/sugar/array';\nconst array = ['hello','world'];\npickRandom(array); // => 'world'"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pickRandom.ts",
                "extension": "ts",
                "relPath": "src/shared/array/pickRandom.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.moveItem": {
                "id": "@blackbyte.sugar.shared.array.moveItem",
                "name": "moveItem",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to process",
                        "defaultStr": ""
                    },
                    "from": {
                        "name": "from",
                        "type": {
                            "types": [
                                {
                                    "type": "any"
                                },
                                {
                                    "type": "integer"
                                }
                            ],
                            "raw": "any|integer"
                        },
                        "description": "Either the element itself that you want to move, or the index of the element you want to move",
                        "defaultStr": ""
                    },
                    "to": {
                        "name": "to",
                        "type": {
                            "types": [
                                {
                                    "type": "any"
                                },
                                {
                                    "type": "integer"
                                }
                            ],
                            "raw": "any|integer"
                        },
                        "description": "Either the element itself where you want to move the first one, or the index of the element you want to move your element to",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The processed array"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to move an item to another place in the array",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "moveItem($1, $2, $3)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { moveItem } from '@blackbyte/sugar/array';\nconst myArray = ['hello','world','something'];\nmoveItem(myArray, 0, 1); // ['world','hello','something']"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "moveItem.ts",
                "extension": "ts",
                "relPath": "src/shared/array/moveItem.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.keysLast": {
                "id": "@blackbyte.sugar.shared.array.keysLast",
                "name": "keysLast",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to process",
                        "defaultStr": ""
                    },
                    "keys": {
                        "name": "keys",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The keys to end the array with",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The processed array"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Make sure the passed array ends with the passed keys",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "keysLast($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { keysLast } from '@blackbyte/sugar/array'\nkeysLast(['a','b','d','g','c'], ['d','g'])\n// ['a','b','c','d','g']"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "keysLast.ts",
                "extension": "ts",
                "relPath": "src/shared/array/keysLast.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.keysFirst": {
                "id": "@blackbyte.sugar.shared.array.keysFirst",
                "name": "keysFirst",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to sort",
                        "defaultStr": ""
                    },
                    "keys": {
                        "name": "keys",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The keys to start the array with",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The processed array"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Make sure the passed array start with the passed keys",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "keysFirst($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { keysFirst } from '@blackbyte/sugar/array'\nkeysFirst(['a','b','d','g','c'], ['d','g'])\n// ['d','g','a','b','c']"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "keysFirst.ts",
                "extension": "ts",
                "relPath": "src/shared/array/keysFirst.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.intersection": {
                "id": "@blackbyte.sugar.shared.array.intersection",
                "name": "intersection",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "...arrays": {
                        "name": "...arrays",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The arrays you want to compare",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "Some settings to refine your comparaison process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "An array containing all the items that are present in all the passed arrays"
                },
                "setting": {
                    "references": {
                        "name": "references",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to use the references comparaison or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "hash": {
                        "name": "hash",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to allows transforming object etc in to hashes and compare this instead",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take two arrays and return all the items that are the same.\nYou can specify if you want only comparing by reference for object, etc... or if\nyou want to transform items in hashes and compare that instead.",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "intersection($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { intersection } from '@blackbyte/sugar/array';\nintersection([1,2,3,4], [1,3,5]); // => [1,3]"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "intersection.ts",
                "extension": "ts",
                "relPath": "src/shared/array/intersection.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.fromQuantifier": {
                "id": "@blackbyte.sugar.shared.array.fromQuantifier",
                "name": "fromQuantifier",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "quantifier": {
                        "name": "quantifier",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "String|Number"
                        },
                        "description": "The quantifier to generate",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TFromQuantifierSettings"
                                }
                            ],
                            "raw": "TFromQuantifierSettings"
                        },
                        "description": "Some settings to configure your array generation",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The generated array"
                },
                "setting": {
                    "max": {
                        "name": "max",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The maximum wanted when using > and >= quantifiers",
                        "defaultStr": ""
                    },
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "A function that take the current index and that MUST return the value wanted in the generated array",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to generate an array from a certain passed quantifier like &quot;2&quot;, &quot;&amp;lt;10&quot;, &quot;&amp;gt;10&quot;, &quot;9-12&quot;, etc...\nThis is useful to create arrays that are depending on user-friendly quantifier and it&#39;s used for example in the\ns-postcss-sugar-plugin for the `@s.lod(&amp;gt;2)` mixin.",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "fromQuantifier($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { fromQuantifier } from '@blackbyte/sugar/array'\nfromQuantifier(3); // => [0,1,2]\nfromQuantifier('3-5'); // => [3,4,5]\nfromQuantifier('3-6', {\n   value(i) => `c-${i}`\n}); // => ['c-3','c-4','c-5','c-6']"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "fromQuantifier.ts",
                "extension": "ts",
                "relPath": "src/shared/array/fromQuantifier.ts",
                "children": {}
            },
            "@blackbyte.sugar.shared.array.asyncForEach": {
                "id": "@blackbyte.sugar.shared.array.asyncForEach",
                "name": "asyncForEach",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "array": {
                        "name": "array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to loop on",
                        "defaultStr": ""
                    },
                    "asyncFn": {
                        "name": "asyncFn",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The async function to call on each items",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Allow to make some async foreach on your arrays",
                "namespace": "@blackbyte.sugar.shared.array",
                "status": "stable",
                "snippet": {
                    "label": "asyncForEach($1, $2)",
                    "code": "await asyncForEach($1, (item, idx) => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { asyncForEach } from '@blackbyte/sugar/array';\nconst waitFor = (ms) => new Promise(r => setTimeout(r, ms));\nasyncForEach([0,1,2,3], async (item) => {\n   await waitWor(50);\n   console.log(item);\n});\n// 0\n// 1\n// 2\n// 3"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "asyncForEach.ts",
                "extension": "ts",
                "relPath": "src/shared/array/asyncForEach.ts",
                "children": {}
            },
            "@blackbyte.sugar.php.url.gravatarUrl": {
                "id": "@blackbyte.sugar.php.url.gravatarUrl",
                "name": "gravatarUrl",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$email": {
                        "name": "$email",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The email address to get the gravatar url for.",
                        "defaultStr": ""
                    },
                    "$settings": {
                        "name": "$settings",
                        "type": {
                            "types": [
                                {
                                    "type": "GravatarUrlSettings"
                                }
                            ],
                            "raw": "GravatarUrlSettings"
                        },
                        "description": "Some settings to configure your gravatar url",
                        "default": "new GravatarUrlSettings()",
                        "defaultStr": "new GravatarUrlSettings()"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "Containing either just a URL or a complete image tag"
                },
                "setting": {
                    "$s": {
                        "name": "$s",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "Size in pixels, defaults to 80px [ 1 - 2048 ]",
                        "default": 80,
                        "defaultStr": "80"
                    },
                    "$d": {
                        "name": "$d",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "Default imageset to use [ 404 | mp | identicon | monsterid | wavatar ]",
                        "default": "'mp'",
                        "defaultStr": "'mp'"
                    },
                    "$r": {
                        "name": "$r",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "Maximum rating (inclusive) [ g | pg | r | x ]",
                        "default": "'g'",
                        "defaultStr": "'g'"
                    },
                    "$img": {
                        "name": "$img",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "True to return a complete IMG tag False for just the URL",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "$atts": {
                        "name": "$atts",
                        "type": {
                            "types": [
                                {
                                    "type": "array"
                                }
                            ],
                            "raw": "array"
                        },
                        "description": "Optional, additional key/value attributes to include in the IMG tag",
                        "default": [],
                        "defaultStr": "[]"
                    }
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function returns the gravatar url for a given email address.",
                "namespace": "@blackbyte.sugar.php.url",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\gravatar\\url($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Url\\gravatarUrl('olivier.bossel@gmail.com');"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "gravatarUrl.php",
                "extension": "php",
                "relPath": "src/php/url/gravatarUrl.php",
                "children": {}
            },
            "@blackbyte.sugar.php.url.currentUrl": {
                "id": "@blackbyte.sugar.php.url.currentUrl",
                "name": "currentUrl",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The current url"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "Return the current url",
                "namespace": "@blackbyte.sugar.php.url",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Url\\currentUrl();"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Url\\currentUrl();\n// https://blackbyte.space/hello/world?query=string"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "currentUrl.php",
                "extension": "php",
                "relPath": "src/php/url/currentUrl.php",
                "children": {}
            },
            "@blackbyte.sugar.php.theme.getTheme": {
                "id": "@blackbyte.sugar.php.theme.getTheme",
                "name": "getTheme",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$default": {
                        "name": "$default",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The default theme to return if no theme has been setted",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The theme name"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get the setted theme from the `theme` cookie.\nYou can simply set/restore the theme in frontend using the `__setTheme`, `__restoreTheme` functions from the\n`@blackbyte/sugar/theme` package.",
                "namespace": "@blackbyte.sugar.php.theme",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Theme\\getTheme($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "$theme = \\Sugar\\Theme\\getTheme('dark');"
                    }
                ],
                "since": "2.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "getTheme.php",
                "extension": "php",
                "relPath": "src/php/theme/getTheme.php",
                "children": {}
            },
            "@blackbyte.sugar.php.string.toString": {
                "id": "@blackbyte.sugar.php.string.toString",
                "name": "toString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$value": {
                        "name": "$value",
                        "type": {
                            "types": [
                                {
                                    "type": "Any"
                                }
                            ],
                            "raw": "Any"
                        },
                        "description": "The value to convert into a string",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The generated string"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to transform pretty much any types like Array, Object, etc... into a string version that you can display\nin documentation, etc...",
                "namespace": "@blackbyte.sugar.php.string",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\String\\toString($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\String\\toString(['hello','world']); // => \"['hello','world']\""
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "toString.php",
                "extension": "php",
                "relPath": "src/php/string/toString.php",
                "children": {}
            },
            "@blackbyte.sugar.php.string.simplifySpecialChars": {
                "id": "@blackbyte.sugar.php.string.simplifySpecialChars",
                "name": "simplifySpecialChars",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$string": {
                        "name": "$string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function take a string and replace all the special chars like &quot;é&quot;, &quot;à&quot;, etc...\nwith their simple version like &quot;a&quot;, &quot;e&quot;, etc...",
                "namespace": "@blackbyte.sugar.php.string",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\String\\simplifySpecialChars($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\String\\simplifySpecialChars('Hellô world'); // => Hello world"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/questions/14114411/remove-all-special-characters-from-a-string/14114443",
                        "description": ""
                    }
                ],
                "filename": "simplifySpecialChars.php",
                "extension": "php",
                "relPath": "src/php/string/simplifySpecialChars.php",
                "children": {}
            },
            "@blackbyte.sugar.php.string.replaceTokens": {
                "id": "@blackbyte.sugar.php.string.replaceTokens",
                "name": "replaceTokens",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$string": {
                        "name": "$string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    },
                    "$tokens": {
                        "name": "$tokens",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The tokens to replace",
                        "default": [],
                        "defaultStr": "[]"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function take care of replacing some tokens like &quot;%serverIp&quot;, &quot;%clientIp&quot;, from the passed\nstring using the passed tokens array to replace.\nSome built-in tokens are available like &quot;%localIp&quot;, &quot;%externalIp&quot;\nHere&#39;s the list of supported tokens: (this list can be updated with new tokens)\n- %localIp: The server ip in local network\n- %externalIp: The server external ip",
                "namespace": "@blackbyte.sugar.php.string",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\String\\replaceTokens($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\String\\replaceTokens('Hello $hello %externalIp, how are you?', [\n 'hello' => 'world'\n]); // => Hello world 156.436.56.75, how are you?"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "replaceTokens.php",
                "extension": "php",
                "relPath": "src/php/string/replaceTokens.php",
                "children": {}
            },
            "@blackbyte.sugar.php.string.randomString": {
                "id": "@blackbyte.sugar.php.string.randomString",
                "name": "randomString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$length": {
                        "name": "$length",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The length of the string you want",
                        "defaultStr": ""
                    },
                    "$characters": {
                        "name": "$characters",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The characters you want to use to generate the string",
                        "default": "'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'",
                        "defaultStr": "'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The generated string"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to generate a random string using the characters and the wanted length\nspecified in the params",
                "namespace": "@blackbyte.sugar.php.string",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\String\\randomString($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\String\\randomString(10); // => ak93mdkaod"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "randomString.php",
                "extension": "php",
                "relPath": "src/php/string/randomString.php",
                "children": {}
            },
            "@blackbyte.sugar.php.string.idCompliant": {
                "id": "@blackbyte.sugar.php.string.idCompliant",
                "name": "idCompliant",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$string": {
                        "name": "$string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function take a string and return a version of it that you can safely use\nin html id for example. It replace spaces with &#39;-&#39; as well as all the special characters\nwith their simple version like &quot;à&quot; will be replaces by &quot;a&quot;",
                "namespace": "@blackbyte.sugar.php.string",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\String\\idCompliant($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\String\\idCompliant('Hello world'); // => hello-world"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "idCompliant.php",
                "extension": "php",
                "relPath": "src/php/string/idCompliant.php",
                "children": {}
            },
            "@blackbyte.sugar.php.string.fileNameCompliant": {
                "id": "@blackbyte.sugar.php.string.fileNameCompliant",
                "name": "fileNameCompliant",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$string": {
                        "name": "$string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to process",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The processed string"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function take a string as input and return a string that is compliant with the file name rules",
                "namespace": "@blackbyte.sugar.php.string",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\String\\fileNameCompliant($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\String\\fileNameCompliant('Hello world'); // => hello-world"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "fileNameCompliant.php",
                "extension": "php",
                "relPath": "src/php/string/fileNameCompliant.php",
                "children": {}
            },
            "@blackbyte.sugar.php.string.camelCase": {
                "id": "@blackbyte.sugar.php.string.camelCase",
                "name": "camelCase",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$string": {
                        "name": "$string",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The string to camelCase",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The camelCased string"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "Capital case a string",
                "namespace": "@blackbyte.sugar.php.string",
                "status": "stable",
                "snippet": {
                    "label": "\\Sugar\\String\\camelCase($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\String\\camelCase('hello world'); // => helloWorld"
                    }
                ],
                "since": "2.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/change-case",
                        "description": ""
                    }
                ],
                "filename": "camelCase.php",
                "extension": "php",
                "relPath": "src/php/string/camelCase.php",
                "children": {}
            },
            "@blackbyte.sugar.php.package.packageMetas": {
                "id": "@blackbyte.sugar.php.package.packageMetas",
                "name": "packageMetas",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path of the package to search metas for",
                        "default": "$_SERVER['DOCUMENT_ROOT']",
                        "defaultStr": "$_SERVER['DOCUMENT_ROOT']"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The metas object information containing these data: name, description, version, author and license"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function take a package root path and returns the metas informations from one of these sources:\n- package.json\n- composer.json",
                "namespace": "@blackbyte.sugar.php.package",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Package\\packageMetas($1)"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "$metas = \\Sugar\\Package\\packageMetas();"
                    }
                ],
                "since": "2.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "packageMetas.php",
                "extension": "php",
                "relPath": "src/php/package/packageMetas.php",
                "children": {}
            },
            "@blackbyte.sugar.php.object.sort": {
                "id": "@blackbyte.sugar.php.object.sort",
                "name": "sort",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to sort",
                        "defaultStr": ""
                    },
                    "sort": {
                        "name": "sort",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The sort function to use",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The sorted object"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "Sort an object properties the same way Array.sort made it in js.",
                "namespace": "@blackbyte.sugar.php.object",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Object\\sort($1, $2);",
                    "code": "\\Sugar\\Object\\sort($1, function(\\$a, \\$b) {\n     $0\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __sort } from '@blackbyte/sugar/object';\n__sort({\n   coco: { weight: 10 },\n   lolo: { weight: 2 },\n   plop: { weight: 5 }\n}, (a, b) => {\n  return a.value.weight - b.value.weight;\n});\n// {\n//   lolo: { weight: 2 },\n//   plop: { weight: 5 },\n//   coco: { weight: 10 }\n// }"
                    }
                ],
                "since": "2.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sort.php",
                "extension": "php",
                "relPath": "src/php/object/sort.php",
                "children": {}
            },
            "@blackbyte.sugar.php.object.get": {
                "id": "@blackbyte.sugar.php.object.get",
                "name": "get",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$object": {
                        "name": "$object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object from which to get the value",
                        "defaultStr": ""
                    },
                    "$dotpath": {
                        "name": "$dotpath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The dotpath to get in the object",
                        "defaultStr": ""
                    },
                    "$separator": {
                        "name": "$separator",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The dotpath separator",
                        "default": "'.'",
                        "defaultStr": "'.'"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "The getted value"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get a value from the passed object using the passed dotpath.\nY",
                "namespace": "@blackbyte.sugar.php.object",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Object\\get($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "$obj = (object) [\n  \"hello\" => (object) [\n     \"world\" => \"plop\"\n  ]\n];\n\\Sugar\\Object\\get($obj, 'hello.world'); // \"plop\""
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "get.php",
                "extension": "php",
                "relPath": "src/php/object/get.php",
                "children": {}
            },
            "@blackbyte.sugar.php.object.firstItem": {
                "id": "@blackbyte.sugar.php.object.firstItem",
                "name": "firstItem",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$object": {
                        "name": "$object",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                },
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Array|Object"
                        },
                        "description": "The object to get value from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "The first object value"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get back the first item value of an object",
                "namespace": "@blackbyte.sugar.php.object",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Object\\firstItem($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Object\\firstItem((object) [\n 'hello' => 'world',\n 'something' => 'cool'\n]); // world"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://developer.wordpress.org/reference/functions/deepMap/",
                        "description": ""
                    }
                ],
                "filename": "firstItem.php",
                "extension": "php",
                "relPath": "src/php/object/firstItem.php",
                "children": {}
            },
            "@blackbyte.sugar.php.object.filter": {
                "id": "@blackbyte.sugar.php.object.filter",
                "name": "filter",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$object": {
                        "name": "$object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to filter",
                        "defaultStr": ""
                    },
                    "$filter": {
                        "name": "$filter",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "String|Function"
                        },
                        "description": "The filter to use",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The filtered object"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you filter some object items either by:\n- `^...`: The keys that starts with the passed string\n- `...$`: The keys that ends with the passed string\n- `function($key, $value) { retur true; }`: A function that must return true or false",
                "namespace": "@blackbyte.sugar.php.object",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Object\\filter($1, $2);",
                    "code": "\\Sugar\\Object\\filter($1, funciton(\\$key, \\$value) {\n     $0\n});"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "$obj = (object) [\n  \"hello\" => 'world',\n  \"yop\" => 'plop',\n  \"helloPlop\" => true\n];\n\\Sugar\\Object\\filter($obj, '^hel'); // (object) [\"hello\" => 'world', \"helloPlop\" => true]\n\\Sugar\\Object\\filter($obj, function($key, $value) {\n  return false;\n}); // (object) []"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "filter.php",
                "extension": "php",
                "relPath": "src/php/object/filter.php",
                "children": {}
            },
            "@blackbyte.sugar.php.object.deepMerge": {
                "id": "@blackbyte.sugar.php.object.deepMerge",
                "name": "deepMerge",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$object1": {
                        "name": "$object1",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The first object",
                        "defaultStr": ""
                    },
                    "$object2": {
                        "name": "$object2",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The second object",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The merged object"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to merge deeply two objects",
                "namespace": "@blackbyte.sugar.php.object",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Object\\deepMerge($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Object\\deepMerge((object) [\n 'hello' => 'world'\n], (object) [\n 'plop' => true\n]);"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://developer.wordpress.org/reference/functions/deepMerge/",
                        "description": ""
                    }
                ],
                "filename": "deepMerge.php",
                "extension": "php",
                "relPath": "src/php/object/deepMerge.php",
                "children": {}
            },
            "@blackbyte.sugar.php.object.deepMap": {
                "id": "@blackbyte.sugar.php.object.deepMap",
                "name": "deepMap",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array": {
                        "name": "$array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to deep map on",
                        "defaultStr": ""
                    },
                    "$callback": {
                        "name": "$callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to run on each values. Must return the new value to set",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The processed array"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to map deeply on an array (object)",
                "namespace": "@blackbyte.sugar.php.object",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Object\\deepMap($1, $2);",
                    "code": "\\Sugar\\Array\\deepMap($1, function(\\$prop, \\$value, \\$object) {\n     $0\n});"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Object\\deepMap([\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n], function($prop, $value, $object) {\n     return 'Hello ' . $value;\n});\n// [\n//   'prop1' => 'Hello Plop',\n//   'prop2' => 'Hello World'\n// ]"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://developer.wordpress.org/reference/functions/deepMap/",
                        "description": ""
                    }
                ],
                "filename": "deepMap.php",
                "extension": "php",
                "relPath": "src/php/object/deepMap.php",
                "children": {}
            },
            "@blackbyte.sugar.php.object.deepFilter": {
                "id": "@blackbyte.sugar.php.object.deepFilter",
                "name": "deepFilter",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$value": {
                        "name": "$value",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array/object to deep filter on",
                        "defaultStr": ""
                    },
                    "$callback": {
                        "name": "$callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to run on each values. If return true, the item is kept, if false, it is removed",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The processed array/object"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to filter deeply an object or an array.\nIt will call the $callback closure on higher elements first then will go deeper on left items",
                "namespace": "@blackbyte.sugar.php.object",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Object\\deepFilter($1, $2);",
                    "code": "\\Sugar\\Object\\deepFilter($1, function(\\$prop, \\$value) {\n     $0\n});"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Object\\deepFilter((object) [\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n], function($prop, $value) {\n     return false;\n});\n// []"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepFilter.php",
                "extension": "php",
                "relPath": "src/php/object/deepFilter.php",
                "children": {}
            },
            "@blackbyte.sugar.php.object.deepDiff": {
                "id": "@blackbyte.sugar.php.object.deepDiff",
                "name": "deepDiff",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$object1": {
                        "name": "$object1",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The base object on which to deepDiff the second",
                        "defaultStr": ""
                    },
                    "$object2": {
                        "name": "$object2",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object you want to deepDiff the first one",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The object with all the differences"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function take two objects and return only what is different from one to the other",
                "namespace": "@blackbyte.sugar.php.object",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Object\\deepDiff($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Object\\deepDiff((object) [\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n], (object) [\n   'prop1' => 'Plop'\n   'prop2' => 'World'\n]);\n// [\n//   'prop1' => 'Plop'\n// ]"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepDiff.php",
                "extension": "php",
                "relPath": "src/php/object/deepDiff.php",
                "children": {}
            },
            "@blackbyte.sugar.php.network.ipAddress": {
                "id": "@blackbyte.sugar.php.network.ipAddress",
                "name": "ipAddress",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$type": {
                        "name": "$type",
                        "type": {
                            "types": [
                                {
                                    "type": "string",
                                    "value": "local"
                                },
                                {
                                    "type": "string",
                                    "value": "external"
                                }
                            ],
                            "raw": "\"local\"|\"external\""
                        },
                        "description": "Specify which ip address you want",
                        "default": "local",
                        "defaultStr": "\"local\""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "Your local or external ip address"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get either your &quot;local&quot; ip in the local network, either\nyour public ip address on the internet.",
                "namespace": "@blackbyte.sugar.php.network",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Network\\ipAddress();"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\Network\\ipAddress(); // => 192.168.1.23\nSugar\\Network\\ipAddress('external'); // => 23.45.322.67"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "ipAddress.php",
                "extension": "php",
                "relPath": "src/php/network/ipAddress.php",
                "children": {}
            },
            "@blackbyte.sugar.php.is.isUrl": {
                "id": "@blackbyte.sugar.php.is.isUrl",
                "name": "isUrl",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$url": {
                        "name": "$url",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The url to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if a valid url, false if not"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function simply check if the passed string a an url or not",
                "namespace": "@blackbyte.sugar.php.is",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Is\\url($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\Is\\url('something'); // => false\nSugar\\Is\\url('http://hello.com'); // => true"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.php.net/manual/en/function.preg-match.php#93824",
                        "description": ""
                    }
                ],
                "filename": "isUrl.php",
                "extension": "php",
                "relPath": "src/php/is/isUrl.php",
                "children": {}
            },
            "@blackbyte.sugar.php.is.isRequestFromIframe": {
                "id": "@blackbyte.sugar.php.is.isRequestFromIframe",
                "name": "isRequestFromIframe",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if from iframe, false if not"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function simply check if the request has been made from an iframe",
                "namespace": "@blackbyte.sugar.php.is",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Is\\requestFromIframe($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Is\\requestFromIframe();"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.php.net/manual/en/function.preg-match.php#93824",
                        "description": ""
                    }
                ],
                "filename": "isRequestFromIframe.php",
                "extension": "php",
                "relPath": "src/php/is/isRequestFromIframe.php",
                "children": {}
            },
            "@blackbyte.sugar.php.is.isAssocArray": {
                "id": "@blackbyte.sugar.php.is.isAssocArray",
                "name": "isAssocArray",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$ar": {
                        "name": "$ar",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if associative, false if not"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "Check if the passed array is associative or not",
                "namespace": "@blackbyte.sugar.php.is",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Is\\assoc($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\Is\\assocArray(['hello' => 'world']); // => true\nSugar\\Is\\assocArray('hello', 'world'); // => false"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isAssocArray.php",
                "extension": "php",
                "relPath": "src/php/is/isAssocArray.php",
                "children": {}
            },
            "@blackbyte.sugar.php.is.isAbsolutePath": {
                "id": "@blackbyte.sugar.php.is.isAbsolutePath",
                "name": "isAbsolutePath",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$path": {
                        "name": "$path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if absolute, false if not"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This method simply check if the passed path is absolute or not",
                "namespace": "@blackbyte.sugar.php.is",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Is\\absolutePath($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "Sugar\\Is\\absolutePath('my/cool/path'); // => false\nSugar\\Is\\absolutePath('http://something.com/my/cool/path'); // => true\nSugar\\Is\\absolutePath('/my/cool/path'); // => true"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isAbsolutePath.php",
                "extension": "php",
                "relPath": "src/php/is/isAbsolutePath.php",
                "children": {}
            },
            "@blackbyte.sugar.php.fs.traverseUp": {
                "id": "@blackbyte.sugar.php.fs.traverseUp",
                "name": "traverseUp",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "from": {
                        "name": "from",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "Specify the folder path from which to start",
                        "defaultStr": ""
                    },
                    "callback": {
                        "name": "callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "raw": "Function|null"
                        },
                        "description": "The callback function to call on each folder path. It this returns true, the process stops and the current folder path is returned",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The folder path on which the callback has returned true, or null if not"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "Go up through the filesystem from a specified folder until the closure returns truc and returns the path",
                "namespace": "@blackbyte.sugar.php.fs",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Fs\\traverseUp($1, $2)",
                    "code": "\\Sugar\\Fs\\traverseUp($1, function(\\$path) {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "const finalPath = \\Sugar\\Fs\\traverseUp('/Users/something/cool', function($path) {\n   if (count(explode('/', $path)) <= 2) {\n     return true;\n   }\n}); // '/Users/something'"
                    }
                ],
                "since": "2.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "traverseUp.php",
                "extension": "php",
                "relPath": "src/php/fs/traverseUp.php",
                "children": {}
            },
            "@blackbyte.sugar.php.fs.relativePath": {
                "id": "@blackbyte.sugar.php.fs.relativePath",
                "name": "relativePath",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$from": {
                        "name": "$from",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The from path",
                        "defaultStr": ""
                    },
                    "$to": {
                        "name": "$to",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The to path",
                        "defaultStr": ""
                    },
                    "$separator": {
                        "name": "$separator",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The separator to use",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "Return the relative path between two paths",
                "namespace": "@blackbyte.sugar.php.fs",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Fs\\relativePath($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Fs\\relativePath('/path/to/file.ext', '/path/to); // => file.ext"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "relativePath.php",
                "extension": "php",
                "relPath": "src/php/fs/relativePath.php",
                "children": {}
            },
            "@blackbyte.sugar.php.fs.extension": {
                "id": "@blackbyte.sugar.php.fs.extension",
                "name": "extension",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "The path to parse and get the extension from": {
                        "name": "The path to parse and get the extension from",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": null,
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The extension of the passed path"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "Return the extension of the passed path",
                "namespace": "@blackbyte.sugar.php.fs",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Fs\\extension($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Fs\\extension('/path/to/file.ext'); // => ext"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "extension.php",
                "extension": "php",
                "relPath": "src/php/fs/extension.php",
                "children": {}
            },
            "@blackbyte.sugar.php.faker.richText": {
                "id": "@blackbyte.sugar.php.faker.richText",
                "name": "richText",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$element": {
                        "name": "$element",
                        "type": {
                            "types": [
                                {
                                    "type": "DOMElement"
                                }
                            ],
                            "raw": "DOMElement"
                        },
                        "description": "The element to change the tag name",
                        "defaultStr": ""
                    },
                    "$name": {
                        "name": "$name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The new tag name",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "DOMElement"
                            }
                        ],
                        "raw": "DOMElement"
                    },
                    "description": "The new element"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function simply returns you a rich text content that you can use in your tests for example.\n\n$",
                "namespace": "@blackbyte.sugar.php.faker",
                "status": "stable",
                "snippet": {
                    "label": "\\Sugar\\Faker\\richText($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "print \\Sugar\\Faker\\richText();"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "richText.php",
                "extension": "php",
                "relPath": "src/php/faker/richText.php",
                "children": {}
            },
            "@blackbyte.sugar.php.dom.changeTagName": {
                "id": "@blackbyte.sugar.php.dom.changeTagName",
                "name": "changeTagName",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$element": {
                        "name": "$element",
                        "type": {
                            "types": [
                                {
                                    "type": "DOMElement"
                                }
                            ],
                            "raw": "DOMElement"
                        },
                        "description": "The element to change the tag name",
                        "defaultStr": ""
                    },
                    "$name": {
                        "name": "$name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The new tag name",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "DOMElement"
                            }
                        ],
                        "raw": "DOMElement"
                    },
                    "description": "The new element"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function simply change the tag name of a passed element",
                "namespace": "@blackbyte.sugar.php.dom",
                "status": "stable",
                "snippet": {
                    "label": "\\Sugar\\Dom\\changeTagName($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "print \\Sugar\\Dom\\changeTagName($element, 'a');"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "changeTagName.php",
                "extension": "php",
                "relPath": "src/php/dom/changeTagName.php",
                "children": {}
            },
            "@blackbyte.sugar.php.array.pre": {
                "id": "@blackbyte.sugar.php.array.pre",
                "name": "pre",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$toPrint": {
                        "name": "$toPrint",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The data to print",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The printed data"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function simply print your passed &quot;object/array&quot; in a &quot;&lt;pre&gt;&quot; tag using the &quot;print_r&quot; function.",
                "namespace": "@blackbyte.sugar.php.array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Debug\\pre($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "print \\Sugar\\Debug\\pre([\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n]);"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pre.php",
                "extension": "php",
                "relPath": "src/php/debug/pre.php",
                "children": {}
            },
            "@blackbyte.sugar.php.convert.toObject": {
                "id": "@blackbyte.sugar.php.convert.toObject",
                "name": "toObject",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array": {
                        "name": "$array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The base array to convert to an object",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The resulting object"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to convert recursively an associative array to an object",
                "namespace": "@blackbyte.sugar.php.convert",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Convert\\toObject($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Convert\\toObject([\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n]);"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "toObject.php",
                "extension": "php",
                "relPath": "src/php/convert/toObject.php",
                "children": {}
            },
            "@blackbyte.sugar.php.convert.toArray": {
                "id": "@blackbyte.sugar.php.convert.toArray",
                "name": "toArray",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$object": {
                        "name": "$object",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The base object to convert to an array",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The resulting associative array"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to convert recursively an object to an associative array",
                "namespace": "@blackbyte.sugar.php.convert",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Convert\\toArray($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Convert\\toArray((object) [\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n]);"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "toArray.php",
                "extension": "php",
                "relPath": "src/php/convert/toArray.php",
                "children": {}
            },
            "@blackbyte.sugar.php.array.pickSome": {
                "id": "@blackbyte.sugar.php.array.pickSome",
                "name": "pickSome",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array": {
                        "name": "$array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array in which you want to pick a random item",
                        "defaultStr": ""
                    },
                    "$min": {
                        "name": "$min",
                        "type": {
                            "types": [
                                {
                                    "type": "Integer"
                                }
                            ],
                            "raw": "Integer"
                        },
                        "description": "The minimum number of items to pick",
                        "default": 1,
                        "defaultStr": "1"
                    },
                    "$max": {
                        "name": "$max",
                        "type": {
                            "types": [
                                {
                                    "type": "Integer"
                                }
                            ],
                            "raw": "Integer"
                        },
                        "description": "The maximum number of items to pick",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "The random array item(s)"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This returns you one or more random item of the passed array",
                "namespace": "@blackbyte.sugar.php.array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Array\\pickSome($1,$2,$3);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Array\\pickSome(['hello','world','test'], 1, 2);"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pickSome.php",
                "extension": "php",
                "relPath": "src/php/array/pickSome.php",
                "children": {}
            },
            "@blackbyte.sugar.php.array.pickRandom": {
                "id": "@blackbyte.sugar.php.array.pickRandom",
                "name": "pickRandom",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array": {
                        "name": "$array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array in which you want to pick a random item",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "The random array item"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This returns you a random item of the passed array",
                "namespace": "@blackbyte.sugar.php.array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Array\\pickRandom($1);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Array\\pickRandom(['hello','world','test']);"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pickRandom.php",
                "extension": "php",
                "relPath": "src/php/array/pickRandom.php",
                "children": {}
            },
            "@blackbyte.sugar.php.array.get": {
                "id": "@blackbyte.sugar.php.array.get",
                "name": "get",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array": {
                        "name": "$array",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object from which to get the value",
                        "defaultStr": ""
                    },
                    "$dotpath": {
                        "name": "$dotpath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The dotpath to get in the object",
                        "defaultStr": ""
                    },
                    "$separator": {
                        "name": "$separator",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The dotpath separator",
                        "default": "'.'",
                        "defaultStr": "'.'"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Any"
                            }
                        ],
                        "raw": "Any"
                    },
                    "description": "The getted value"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get a value from the passed object using the passed dotpath",
                "namespace": "@blackbyte.sugar.php.array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Array\\get($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "$obj = [\n  \"hello\" => [\n     \"world\" => \"plop\"\n  ]\n];\n\\Sugar\\Array\\get($obj, 'hello.world'); // \"plop\""
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "get.php",
                "extension": "php",
                "relPath": "src/php/array/get.php",
                "children": {}
            },
            "@blackbyte.sugar.php.array.filter": {
                "id": "@blackbyte.sugar.php.array.filter",
                "name": "filter",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array": {
                        "name": "$array",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The object to filter",
                        "defaultStr": ""
                    },
                    "$filter": {
                        "name": "$filter",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "String|Function"
                        },
                        "description": "The filter to use",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The filtered object"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you filter some array items either by:\n- `^...`: The keys that starts with the passed string\n- `...$`: The keys that ends with the passed string\n- `function($key, $value) { retur true; }`: A function that must return true or false",
                "namespace": "@blackbyte.sugar.php.array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Array\\filter($1, $2);",
                    "code": "\\Sugar\\Array\\filter($1, function(\\$key, \\$value) {\n     $0\n});"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "$obj = [\n  \"hello\" => 'world',\n  \"yop\" => 'plop',\n  \"helloPlop\" => true\n];\n\\Sugar\\Array\\filter($obj, '^hel'); // [\"hello\" => 'world', \"helloPlop\" => true]\n\\Sugar\\Array\\filter($obj, function($key, $value) {\n  return false;\n}); // []"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "filter.php",
                "extension": "php",
                "relPath": "src/php/array/filter.php",
                "children": {}
            },
            "@blackbyte.sugar.php.array.deepMerge": {
                "id": "@blackbyte.sugar.php.array.deepMerge",
                "name": "deepMerge",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array1": {
                        "name": "$array1",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The base array on which to merge the second",
                        "defaultStr": ""
                    },
                    "$array2": {
                        "name": "$array2",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array you want to merge in the first one",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The resulting array"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function take two arrays and merge them deeply by keeping distinct\nproperty keys.",
                "namespace": "@blackbyte.sugar.php.array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Array\\deepMerge($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Array\\merge_deep([\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n], [\n   'prop1' => 'Plop'\n]);\n// [\n//   'prop1' => 'Plop',\n//   'prop2' => 'World'\n// ]"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepMerge.php",
                "extension": "php",
                "relPath": "src/php/array/deepMerge.php",
                "children": {}
            },
            "@blackbyte.sugar.php.array.deepMap": {
                "id": "@blackbyte.sugar.php.array.deepMap",
                "name": "deepMap",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array": {
                        "name": "$array",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array to deep map on",
                        "defaultStr": ""
                    },
                    "$callback": {
                        "name": "$callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to run on each values. Must return the new value to set",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The processed array"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to map deeply on an array (object)",
                "namespace": "@blackbyte.sugar.php.array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Arrayray\\deepMap($1, $2);",
                    "code": "\\Sugar\\Array\\deepMap($1, function(\\$prop, \\$value, \\$array) {\n     $0\n});"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Array\\deepMap([\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n], function($prop, $value, $array) {\n     return 'Hello ' . $value;\n});\n// [\n//   'prop1' => 'Hello Plop',\n//   'prop2' => 'Hello World'\n// ]"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://developer.wordpress.org/reference/functions/deepMap/",
                        "description": ""
                    }
                ],
                "filename": "deepMap.php",
                "extension": "php",
                "relPath": "src/php/array/deepMap.php",
                "children": {}
            },
            "@blackbyte.sugar.php.array.deepFilter": {
                "id": "@blackbyte.sugar.php.array.deepFilter",
                "name": "deepFilter",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$value": {
                        "name": "$value",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array/object to deep filter on",
                        "defaultStr": ""
                    },
                    "$callback": {
                        "name": "$callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to run on each values. If return true, the item is kept, if false, it is removed",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The processed array/object"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function allows you to filter deeply an object or an array.\nIt will call the $callback closure on higher elements first then will go deeper on left items",
                "namespace": "@blackbyte.sugar.php.array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Arrayray\\deepFilter($1, $2);",
                    "code": "\\Sugar\\Array\\deepFilter($1, function(\\$prop, \\$value) {\n     $0\n});"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Array\\deepFilter((object) [\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n], function($prop, $value) {\n     return false;\n});\n// []"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepFilter.php",
                "extension": "php",
                "relPath": "src/php/array/deepFilter.php",
                "children": {}
            },
            "@blackbyte.sugar.php.Sugar.Array.deepDiff": {
                "id": "@blackbyte.sugar.php.Sugar.Array.deepDiff",
                "name": "deepDiff",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$array1": {
                        "name": "$array1",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The base array on which to deepDiff the second",
                        "defaultStr": ""
                    },
                    "$array2": {
                        "name": "$array2",
                        "type": {
                            "types": [
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "Array"
                        },
                        "description": "The array you want to deepDiff the first one",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "The array with all the differences"
                },
                "platform": [
                    {
                        "name": "php",
                        "description": ""
                    }
                ],
                "description": "This function take two arrays and return only what is different from one to the other",
                "namespace": "@blackbyte.sugar.php.Sugar.Array",
                "status": "beta",
                "snippet": {
                    "label": "\\Sugar\\Arrayray\\deepDiff($1, $2);"
                },
                "example": [
                    {
                        "language": "php",
                        "code": "\\Sugar\\Array\\deepDiff([\n   'prop1' => 'Hello',\n   'prop2' => 'World'\n], [\n   'prop1' => 'Plop'\n   'prop2' => 'World'\n]);\n// [\n//   'prop1' => 'Plop'\n// ]"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deepDiff.php",
                "extension": "php",
                "relPath": "src/php/array/deepDiff.php",
                "children": {}
            },
            "@blackbyte.sugar.node.type.resolveTypeString": {
                "id": "@blackbyte.sugar.node.type.resolveTypeString",
                "name": "resolveTypeString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "typeString": {
                        "name": "typeString",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The type string to parse",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TResolveTypeStringSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TResolveTypeStringSettings>"
                        },
                        "description": "A setting object to configure your resolve process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "TResolveTypeStringResult"
                                ]
                            }
                        ],
                        "raw": "Promise<TResolveTypeStringResult>"
                    },
                    "description": "A promise resolved once the type string has been resolved"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The cwd to use to resolve the type string when they are path",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This method simply parse the passed typeString like &quot;string | number&quot;, or &quot;string &amp; path&quot;, etc... and return\nan object defining the resolved type with interface if defined, etc...",
                "namespace": "@blackbyte.sugar.node.type",
                "status": "beta",
                "snippet": {
                    "label": "resolveTypeString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { resolveTypeString } from '@blackbyte/sugar/type';\nresolveTypeString('string');\n// {\n//    types: [{\n//       type: 'string',\n//       of: undefined,\n//       value: undefined\n//    }],\n// }"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "resolveTypeString.ts",
                "extension": "ts",
                "relPath": "src/node/type/resolveTypeString.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.string.uniqid": {
                "id": "@blackbyte.sugar.node.string.uniqid",
                "name": "uniqid",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "A 8 bytes uniqid string"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Generate a uniqid string of 8 bytes. Work using the [uniqid](https://www.npmjs.com/package/uniqid) npm package under the hood.",
                "namespace": "@blackbyte.sugar.node.string",
                "status": "stable",
                "snippet": {
                    "label": "uniqid()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { uniqid } from '@blackbyte/sugar/string';\nconsole.log(uniqid()); // => 1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/uuid",
                        "description": ""
                    }
                ],
                "filename": "uniqid.ts",
                "extension": "ts",
                "relPath": "src/node/string/uniqid.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.project.detectProjectType": {
                "id": "@blackbyte.sugar.node.project.detectProjectType",
                "name": "detectProjectType",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The root project directory to detect the type from",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "IDetectProjectTypeResult"
                            }
                        ],
                        "raw": "IDetectProjectTypeResult"
                    },
                    "description": "An object that describe the detected project type"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to detect the project type like &quot;next&quot;, &quot;nuxt&quot;, etc...\nIf the project type is not detected, it will return &quot;unknown&quot; for the type and &quot;1.0.0&quot; for the version.\nHere the list of detected project types:\n\n- next\n- nuxt\n- astro\n- remix\n- sveltekit\n- laravel",
                "namespace": "@blackbyte.sugar.node.project",
                "status": "beta",
                "snippet": {
                    "label": "detectProjectType()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { detectProjectType } from '@coffeekraken/sugar/project';\ndetectProjectType();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "detectProjectType.ts",
                "extension": "ts",
                "relPath": "src/node/project/detectProjectType.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.path.packageRootDir": {
                "id": "@blackbyte.sugar.node.path.packageRootDir",
                "name": "packageRootDir",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "from": {
                        "name": "from",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "Specify from where the research has to be done",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Some settings to configure the research",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The finded package path or false if not finded"
                },
                "setting": {
                    "highest": {
                        "name": "highest",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want the highest package possible",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "upCount": {
                        "name": "upCount",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "Specify a number of packages to go up. Cannot be used alongside the `highest` setting",
                        "defaultStr": "undefined"
                    },
                    "requiredProperties": {
                        "name": "requiredProperties",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String[]"
                        },
                        "description": "Specify some required properties that MUST be present in the package.json to be considered as a valid package",
                        "default": "['name','version']",
                        "defaultStr": "['name','version']"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Return the path to either the first finded package root going up the folders, or the highest package root finded",
                "namespace": "@blackbyte.sugar.node.path",
                "status": "beta",
                "snippet": {
                    "label": "packageRootDir()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { packageRootDir } from '@blackbyte/sugar/path';\nconst root = packageRootDir();"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/find-package-json",
                        "description": ""
                    }
                ],
                "filename": "packageRootDir.ts",
                "extension": "ts",
                "relPath": "src/node/package/packageRootDir.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.package.packageJsonSync": {
                "id": "@blackbyte.sugar.node.package.packageJsonSync",
                "name": "packageJsonSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "nameOrPath": {
                        "name": "nameOrPath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "the package name or path wanted",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TComposerVendorDirSettings"
                                }
                            ],
                            "raw": "TComposerVendorDirSettings"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "JSON"
                            }
                        ],
                        "raw": "JSON"
                    },
                    "description": "The composer.json content"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory in which you want to start the research",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "monorepo": {
                        "name": "monorepo",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you are in a monorepo context",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "checkExistence": {
                        "name": "checkExistence",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to check if the vendor dir exists",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take a package name (or &quot;.&quot; for the current package) as parameter, and return the corresponding\npackage.json JSON content",
                "namespace": "@blackbyte.sugar.node.package",
                "status": "beta",
                "snippet": {
                    "label": "packageJsonSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { packageJsonSync } from '@blackbyte/sugar/package`;\npackageJsonSync('blackbyte/sugar');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "Implement a cache strategy to avoid making same process again and again"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "packageJsonSync.ts",
                "extension": "ts",
                "relPath": "src/node/package/packageJsonSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.package.packageDir": {
                "id": "@blackbyte.sugar.node.package.packageDir",
                "name": "packageDir",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "nameOrPath": {
                        "name": "nameOrPath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "the package name or path wanted",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TPackageDirSettings"
                                }
                            ],
                            "raw": "TPackageDirSettings"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The package path"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory in which you want to start the research",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "monorepo": {
                        "name": "monorepo",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you are in a monorepo context",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "checkExistence": {
                        "name": "checkExistence",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to check if the vendor dir exists",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take a package name as parameter, and return the corresponding\npackage direcory path",
                "namespace": "@blackbyte.sugar.node.package",
                "status": "beta",
                "snippet": {
                    "label": "packageDir($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { packageDir } from '@blackbyte/sugar/package`;\npackageDir('lodash');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "Implement a cache strategy to avoid making same process again and again"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "packageDir.ts",
                "extension": "ts",
                "relPath": "src/node/package/packageDir.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.package.nodeModulesDir": {
                "id": "@blackbyte.sugar.node.package.nodeModulesDir",
                "name": "nodeModulesDir",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TNodeModulesDirSettings"
                                }
                            ],
                            "raw": "TNodeModulesDirSettings"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The package path"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory in which you want to start the research",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "monorepo": {
                        "name": "monorepo",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you are in a monorepo context",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "checkExistence": {
                        "name": "checkExistence",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to check if the vendor dir exists",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply returns the &quot;node_modules&quot; directory path",
                "namespace": "@blackbyte.sugar.node.package",
                "status": "beta",
                "snippet": {
                    "label": "nodeModulesDir($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { nodeModulesDir } from '@blackbyte/sugar/composer`;\nnodeModulesDir('lodash');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "nodeModulesDir.ts",
                "extension": "ts",
                "relPath": "src/node/package/nodeModulesDir.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.package.addPackageDependencies": {
                "id": "@blackbyte.sugar.node.package.addPackageDependencies",
                "name": "addPackageDependencies",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "deps": {
                        "name": "deps",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The dependencies to add",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TAddPackageDependenciesSettings"
                                }
                            ],
                            "raw": "TAddPackageDependenciesSettings"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "any"
                                ]
                            }
                        ],
                        "raw": "Promise<any>"
                    },
                    "description": "A promise with the package.json content as object"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory in which you want to start the research",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "dev": {
                        "name": "dev",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to add the dependencies to the devDependencies",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "global": {
                        "name": "global",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to add the dependencies to the global package.json",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "install": {
                        "name": "install",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to install the dependencies after adding them",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "override": {
                        "name": "override",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to override the dependencies if they already exists",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to add some dependencies to a package.json file",
                "namespace": "@blackbyte.sugar.node.package",
                "status": "beta",
                "snippet": {
                    "label": "addPackageDependencies($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { addPackageDependencies } from '@blackbyte/sugar/package`;\naddPackageDependencies('lodash');"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "addPackageDependencies.ts",
                "extension": "ts",
                "relPath": "src/node/package/addPackageDependencies.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.is.isSymlink": {
                "id": "@blackbyte.sugar.node.is.isSymlink",
                "name": "isSymlink",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a sySlink, false if not"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function check if the passed string path is a sySlink or not",
                "namespace": "@blackbyte.sugar.node.is",
                "status": "stable",
                "snippet": {
                    "label": "isSymlink($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isSymlink } from '@blackbyte/sugar/is';\nisSymlink('something/cool');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    },
                    {
                        "priority": "normal",
                        "description": "Tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isSymlink.ts",
                "extension": "ts",
                "relPath": "src/node/is/isSymlink.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.is.isFfolder": {
                "id": "@blackbyte.sugar.node.is.isFfolder",
                "name": "isFfolder",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a folder, false if not"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function check if the passed string path is a folder or not",
                "namespace": "@blackbyte.sugar.node.is",
                "status": "stable",
                "snippet": {
                    "label": "isFolder($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isfolder } from '@blackbyte/sugar/is';\nisfolder('something/cool');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isFolder.ts",
                "extension": "ts",
                "relPath": "src/node/is/isFolder.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.is.isFile": {
                "id": "@blackbyte.sugar.node.is.isFile",
                "name": "isFile",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a file, false if not"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function check if the passed string path is a file or not",
                "namespace": "@blackbyte.sugar.node.is",
                "status": "stable",
                "snippet": {
                    "label": "isFile($1);"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isFile } from '@blackbyte/sugar/is';\nisFile('something/cool');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isFile.ts",
                "extension": "ts",
                "relPath": "src/node/is/isFile.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.is.isDirectory": {
                "id": "@blackbyte.sugar.node.is.isDirectory",
                "name": "isDirectory",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a directory, false if not"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function check if the passed string path is a directory or not",
                "namespace": "@blackbyte.sugar.node.is",
                "status": "stable",
                "snippet": {
                    "label": "isDirectory($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isDirectory } from '@blackbyte/sugar/is';\nisDirectory('something/cool');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "interface"
                    },
                    {
                        "priority": "normal",
                        "description": "doc"
                    },
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isDirectory.ts",
                "extension": "ts",
                "relPath": "src/node/is/isDirectory.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.is.isCommandExists": {
                "id": "@blackbyte.sugar.node.is.isCommandExists",
                "name": "isCommandExists",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "command": {
                        "name": "command",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The command to check like \"ls\", \"node\", etc...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise fullfiled once the check has finished with true of false as value"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to check if a command exists on the system where the script is running",
                "namespace": "@blackbyte.sugar.node.is",
                "status": "stable",
                "snippet": {
                    "label": "isCommandExists($1)",
                    "code": "await isCommandExists($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isCommandExists } from '@blackbyte/sugar/is';\nawait  isCommandExists('ls'); // => true"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isCommandExists.ts",
                "extension": "ts",
                "relPath": "src/node/is/isCommandExists.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.writeTmpFileSync": {
                "id": "@blackbyte.sugar.node.fs.writeTmpFileSync",
                "name": "writeTmpFileSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "data": {
                        "name": "data",
                        "type": {
                            "types": [
                                {
                                    "type": "Any"
                                }
                            ],
                            "raw": "Any"
                        },
                        "description": "The data to write in the file",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TWriteTmpFileSyncSettings"
                                }
                            ],
                            "raw": "TWriteTmpFileSyncSettings"
                        },
                        "description": "Some settings to customize your temp file creation",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved when the writeTmpFileSync is completed with the path to it"
                },
                "setting": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "A path relative to the temp folder to store your file",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Create a temporary file on the disk with the passed content and returns the path\nto it.",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "writeTmpFileSync($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { writeTmpFileSync } from '@blackbyte/sugar/fs';\nconst path = writeTmpFileSync('Hello World');"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "writeTmpFileSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/writeTmpFileSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.writeTmpFile": {
                "id": "@blackbyte.sugar.node.fs.writeTmpFile",
                "name": "writeTmpFile",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "data": {
                        "name": "data",
                        "type": {
                            "types": [
                                {
                                    "type": "Any"
                                }
                            ],
                            "raw": "Any"
                        },
                        "description": "The data to write in the file",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TWriteTmpFileSettings"
                                }
                            ],
                            "raw": "TWriteTmpFileSettings"
                        },
                        "description": "Some settings to customize your temp file creation",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "String"
                                ]
                            }
                        ],
                        "raw": "Promise<String>"
                    },
                    "description": "A promise that will be resolved when the writeTmpFile is completed with the path to it"
                },
                "setting": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "A path relative to the temp folder to store your file",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Create a temporary file on the disk with the passed content and returns the path\nto it.",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "writeTmpFile($1, $2)",
                    "code": "await writeTmpFile($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { writeTmpFile } from '@blackbyte/sugar/fs';\nwriteTmpFile('Hello World').then((path) => {\n   // do something on complete...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "writeTmpFile.ts",
                "extension": "ts",
                "relPath": "src/node/fs/writeTmpFile.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.writeJsonSync": {
                "id": "@blackbyte.sugar.node.fs.writeJsonSync",
                "name": "writeJsonSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path to write",
                        "defaultStr": ""
                    },
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The object to write in the JSON file",
                        "defaultStr": ""
                    },
                    "options": {
                        "name": "options",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "options are what you'd pass to [fs.writeJsonSync()](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback)",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Write a JSON file. If don&#39;t exist, will be created as well as the directory structure if needed... (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "writeJsonSync($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { writeJsonSync } from '@blackbyte/sugar/fs';\nwriteJsonSync('my/cool/file.json', { hello: 'world' });"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "writeJsonSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/writeJsonSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.writeJson": {
                "id": "@blackbyte.sugar.node.fs.writeJson",
                "name": "writeJson",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path to write",
                        "defaultStr": ""
                    },
                    "object": {
                        "name": "object",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The object to write in the JSON file",
                        "defaultStr": ""
                    },
                    "options": {
                        "name": "options",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "options are what you'd pass to [fs.writeJson()](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback)",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved when the writeJson is completed"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Write a JSON file. If don&#39;t exist, will be created as well as the directory structure if needed... ( (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "writeJson($1, $2)",
                    "code": "await _writeJson($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { writeJson } from '@blackbyte/sugar/fs';\nwriteJson('my/cool/file.json', { hello: 'world' }).then(() => {\n   // do something on complete...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "writeJson.ts",
                "extension": "ts",
                "relPath": "src/node/fs/writeJson.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.writeFileSync": {
                "id": "@blackbyte.sugar.node.fs.writeFileSync",
                "name": "writeFileSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path to write",
                        "defaultStr": ""
                    },
                    "data": {
                        "name": "data",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The data to write in the file",
                        "defaultStr": ""
                    },
                    "options": {
                        "name": "options",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "options are what you'd pass to [fs.writeFileSync()](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback)",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Write a file. If don&#39;t exist, will be created as well as the directory structure if needed... (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "writeFileSync($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { writeFileSync } from '@blackbyte/sugar/fs';\nwriteFileSync('my/cool/file.txt', 'Hello World');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "writeFileSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/writeFileSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.writeFile": {
                "id": "@blackbyte.sugar.node.fs.writeFile",
                "name": "writeFile",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path to write",
                        "defaultStr": ""
                    },
                    "data": {
                        "name": "data",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The data to write in the file",
                        "defaultStr": ""
                    },
                    "options": {
                        "name": "options",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "options are what you'd pass to [fs.writeFile()](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback)",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved when the writeFile is completed"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "CWrite a file. If don&#39;t exist, will be created as well as the directory structure if needed... ( (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "writeFile($1, $2)",
                    "code": "await writeFile($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { writeFile } from '@blackbyte/sugar/fs';\nwriteFile('my/cool/file.txt', 'Hello World').then(() => {\n   // do something on complete...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "writeFile.ts",
                "extension": "ts",
                "relPath": "src/node/fs/writeFile.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.unlinkSync": {
                "id": "@blackbyte.sugar.node.fs.unlinkSync",
                "name": "unlinkSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file/directory path to delete",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "unlinkSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { unlinkSync } from '@blackbyte/sugar/fs';\n unlinkSync('my/cool/file.json');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "unlinkSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/unlinkSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.unlink": {
                "id": "@blackbyte.sugar.node.fs.unlink",
                "name": "unlink",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file/directory path to delete",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved when the unlink is completed"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "unlinks a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "unlink($1)",
                    "code": "await unlink($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { unlink } from '@blackbyte/sugar/fs';\nawait unlink('my/cool/file.json').then(() => {\n   // do something on complete...\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "unlink.ts",
                "extension": "ts",
                "relPath": "src/node/fs/unlink.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.renameSync": {
                "id": "@blackbyte.sugar.node.fs.renameSync",
                "name": "renameSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "src": {
                        "name": "src",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The source path to moveSync",
                        "defaultStr": ""
                    },
                    "dest": {
                        "name": "dest",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The destination path",
                        "defaultStr": ""
                    },
                    "null": {
                        "name": null,
                        "type": {
                            "types": [
                                {
                                    "type": "TRenameSyncSettings} [settings={}] The settings for the operation"
                                }
                            ],
                            "raw": "TRenameSyncSettings} [settings={}] The settings for the operation"
                        },
                        "description": null,
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The new path"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This method allows you to rename a file or directory synchronously.",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "renameSync($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { renameSync } from '@blackbyte/sugar/fs';\nrenameSync('my/cool/dir', 'another/place/for/directory');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "renameSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/renameSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.rename": {
                "id": "@blackbyte.sugar.node.fs.rename",
                "name": "rename",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "src": {
                        "name": "src",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The source path to moveSync",
                        "defaultStr": ""
                    },
                    "dest": {
                        "name": "dest",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The destination path",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Moves a file or directory, even across devices (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "rename($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { rename } from '@blackbyte/sugar/fs';\nawait rename('my/cool/dir', 'another/place/for/directory');"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "rename.ts",
                "extension": "ts",
                "relPath": "src/node/fs/rename.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.removeSync": {
                "id": "@blackbyte.sugar.node.fs.removeSync",
                "name": "removeSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file/directory path to delete",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "removeSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { removeSync } from '@blackbyte/sugar/fs';\n removeSync('my/cool/file.json');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "removeSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/removeSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.remove": {
                "id": "@blackbyte.sugar.node.fs.remove",
                "name": "remove",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file/directory path to delete",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved when the remove is completed"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "remove($1)",
                    "code": "await remove($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { remove } from '@blackbyte/sugar/fs';\nawait remove('my/cool/file.json').then(() => {\n   // do something on complete...\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "remove.ts",
                "extension": "ts",
                "relPath": "src/node/fs/remove.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.readXmlSync": {
                "id": "@blackbyte.sugar.node.fs.readXmlSync",
                "name": "readXmlSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The xml file path to read",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The readed json"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to read an xml file and get his content back as JSON",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "readXmlSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { readXmlSync } from '@blackbyte/sugar/fs';\nreadXmlSync('my-cool-xml/file.xml');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "readXmlSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/readXmlSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.readJsonSync": {
                "id": "@blackbyte.sugar.node.fs.readJsonSync",
                "name": "readJsonSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The json file path to read",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The readed json"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to read a json file",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "readJsonSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { readJsonSync } from '@blackbyte/sugar/fs';\nreadJsonSync('my-cool-json/file.json');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "readJsonSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/readJsonSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.readJson": {
                "id": "@blackbyte.sugar.node.fs.readJson",
                "name": "readJson",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The json file path to read",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The readed json"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to read a json file",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "readJson($1)",
                    "code": "await readJson($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { readJson } from '@blackbyte/sugar/fs';\nawait readJson('my-cool-json/file.json');"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "readJson.ts",
                "extension": "ts",
                "relPath": "src/node/fs/readJson.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.prependToFileSync": {
                "id": "@blackbyte.sugar.node.fs.prependToFileSync",
                "name": "prependToFileSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path you want to check. With or without an extension",
                        "defaultStr": ""
                    },
                    "content": {
                        "name": "content",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The content to add to the file",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to simply append a string to a file.",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "prependToFileSync($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { prependToFileSync } from '@blackbyte/sugar/fs';\nprependToFileSync('/my/cool/file.txt', 'Hello world');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "prependToFileSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/prependToFileSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.pickOneSync": {
                "id": "@blackbyte.sugar.node.fs.pickOneSync",
                "name": "pickOneSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "filesNames": {
                        "name": "filesNames",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String[]"
                        },
                        "description": "The names of the files you want to check",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TPickOneSyncSettings"
                                }
                            ],
                            "raw": "TPickOneSyncSettings"
                        },
                        "description": "An object of settings to configure your research",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "SFile"
                            },
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "SFile|String"
                    },
                    "description": "Either an SFile instance if set in the config, or the path of the file found"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The current working directory to search in",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "SFile": {
                        "name": "SFile",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Return an SFile instance if true, otherwise just a simple path string",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to specify multiple files to check and pick one of them",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "pickOneSync([$1])"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { pickOneSync } from '@blackbyte/sugar/fs';\npickOneSync(['myCoolFile.json', 'myCoolFile2.json'], {});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pickOneSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/pickOneSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.moveSync": {
                "id": "@blackbyte.sugar.node.fs.moveSync",
                "name": "moveSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "src": {
                        "name": "src",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The source path to moveSync",
                        "defaultStr": ""
                    },
                    "dest": {
                        "name": "dest",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The destination path",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Moves a file or directory, even across devices (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "moveSync($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { moveSync } from '@blackbyte/sugar/fs';\nmoveSync('my/cool/dir', 'another/place/for/directory');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "moveSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/moveSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.move": {
                "id": "@blackbyte.sugar.node.fs.move",
                "name": "move",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "src": {
                        "name": "src",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The source path to move",
                        "defaultStr": ""
                    },
                    "dest": {
                        "name": "dest",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The destination path",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved once the file/directory has been moved..."
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Moves a file or directory, even across devices (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "move($1, $2)",
                    "code": "await move($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { move } from '@blackbyte/sugar/fs';\nawait move('my/cool/dir', 'another/place/for/directory').then(() => {\n   // do something...\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "move.ts",
                "extension": "ts",
                "relPath": "src/node/fs/move.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.isPath": {
                "id": "@blackbyte.sugar.node.fs.isPath",
                "name": "isPath",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path to check",
                        "defaultStr": ""
                    },
                    "checkExistence": {
                        "name": "checkExistence",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to check that the passed path actually exist",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if the path is valide, false if not"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check if the passed string is a valid path or not",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "isPath($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isPath } from '@blackbyte/sugar/fs';\nisPath('hello/world'); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/is-valid-path",
                        "description": ""
                    }
                ],
                "filename": "isPath.ts",
                "extension": "ts",
                "relPath": "src/node/fs/isPath.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.grabFirstExistingSync": {
                "id": "@blackbyte.sugar.node.fs.grabFirstExistingSync",
                "name": "grabFirstExistingSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "paths": {
                        "name": "paths",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String[]"
                        },
                        "description": "The paths to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The first existing path"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Check every passed paths and return the first existing one.",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "grabFirstExistingSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { grabFirstExistingSync } from '@blackbyte/sugar/fs';\ngrabFirstExistingSync([\n 'file/1.txt',\n 'file/2.txt\n]); // => 'file/2.txt'\n'"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "grabFirstExistingSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/grabFirstExistingSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.folderSize": {
                "id": "@blackbyte.sugar.node.fs.folderSize",
                "name": "folderSize",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "folderPath": {
                        "name": "folderPath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The folder path to calculate the size",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved once the folder size has been calculated"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Calculate the size of the passed folder and return it through a promise in bytes format",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "folderSize($1)",
                    "code": "await folderSize($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { folderSize } from '@blackbyte/sugar/fs';\nawait folderSize('my/cool/folder');"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/get-folder-size",
                        "description": ""
                    }
                ],
                "filename": "folderSize.ts",
                "extension": "ts",
                "relPath": "src/node/fs/folderSize.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.folderPath": {
                "id": "@blackbyte.sugar.node.fs.folderPath",
                "name": "folderPath",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path to get folder path from",
                        "defaultStr": ""
                    },
                    "checkExistence": {
                        "name": "checkExistence",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to check the file existence before",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The folder path or '' if not exists"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function returns you the folder path of the file path passed.\nYou can tell the function to check for file existence before getting\nthe folder path with the second parameter.",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "folderPath($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { folderPath } from '@blackbyte/sugar/fs';\nfolderPath('my/cool/path.js'); // => true"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "folderPath.ts",
                "extension": "ts",
                "relPath": "src/node/fs/folderPath.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.folderHashSync": {
                "id": "@blackbyte.sugar.node.fs.folderHashSync",
                "name": "folderHashSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "folderPath": {
                        "name": "folderPath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The folder path you want to get the hash back",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TFolderHashSettings"
                                }
                            ],
                            "raw": "TFolderHashSettings"
                        },
                        "description": "Some settings to configure your hash generation process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The calculated folder hash"
                },
                "setting": {
                    "recursive": {
                        "name": "recursive",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to generate a hash using also the children or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "algo": {
                        "name": "algo",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The algorithm to use",
                        "default": "'sha356'",
                        "defaultStr": "'sha356'"
                    },
                    "digest": {
                        "name": "digest",
                        "type": {
                            "types": [
                                {
                                    "type": "BinaryToTextEncoding"
                                }
                            ],
                            "raw": "BinaryToTextEncoding"
                        },
                        "description": "How to digest the hash",
                        "default": "'base64'",
                        "defaultStr": "'base64'"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get back an integrity hash for the passed folder.\nThis mean that if a folder returns the same integrity hash twice, the folder or files in it\nhas not been updated...",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "folderHashSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { folderHashSync } from '@blackbyte/sugar/fs';\nfolderHashSync('my/cool/folder'); // => YZOrKDx9LCLd8X39PoFTflXGpRU=,"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "folderHashSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/folderHashSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.findUp": {
                "id": "@blackbyte.sugar.node.fs.findUp",
                "name": "findUp",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "search": {
                        "name": "search",
                        "type": {
                            "types": [
                                {
                                    "type": "IFindUpSearch"
                                }
                            ],
                            "raw": "IFindUpSearch"
                        },
                        "description": "The name of the file you search",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TFindUpSettings"
                                }
                            ],
                            "raw": "TFindUpSettings"
                        },
                        "description": "An object of settings to configure your research",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "SFile"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "raw": "SFile|null"
                    },
                    "description": "An SFile instance or null if nothings founded"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply walk across upper folders to search for a file\nand returns you the first finded",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "beta",
                "snippet": {
                    "label": "findUp($1)",
                    "code": "await findUp($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { findUp } from '@blackbyte/sugar/fs';\nconst file = await findUp('myCoolFile.json', {});\nconsole.log(file.path);"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "findUp.ts",
                "extension": "ts",
                "relPath": "src/node/fs/findUp.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.filename": {
                "id": "@blackbyte.sugar.node.fs.filename",
                "name": "filename",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path to take the filename from",
                        "defaultStr": ""
                    },
                    "withExtension": {
                        "name": "withExtension",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Tell if we want the filename with or without the extension",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The requested filename"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Return the filename from the passed path with or without the extension",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "filename($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { filename } from '@blackbyte/sugar/fs';\nfilename('hello/world.js'); // => world.js"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "filename.ts",
                "extension": "ts",
                "relPath": "src/node/fs/filename.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.fileHashSync": {
                "id": "@blackbyte.sugar.node.fs.fileHashSync",
                "name": "fileHashSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "filePath": {
                        "name": "filePath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The folder path you want to get the hash back",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TFileHashSettings"
                                }
                            ],
                            "raw": "TFileHashSettings"
                        },
                        "description": "Some settings to configure your hash generation process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The calculated folder hash"
                },
                "setting": {
                    "algo": {
                        "name": "algo",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The algorithm to use",
                        "default": "'sha356'",
                        "defaultStr": "'sha356'"
                    },
                    "digest": {
                        "name": "digest",
                        "type": {
                            "types": [
                                {
                                    "type": "BinaryToTextEncoding"
                                }
                            ],
                            "raw": "BinaryToTextEncoding"
                        },
                        "description": "How to digest the hash",
                        "default": "'base64'",
                        "defaultStr": "'base64'"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get back an integrity hash for the passed file.\nThis mean that if a file returns the same integrity hash twice, the folder or files in it\nhas not been updated...",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "fileHashSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { fileHashSync } from '@blackbyte/sugar/fs';\nfileHashSync('my/cool/folder'); // => YZOrKDx9LCLd8X39PoFTflXGpRU=,"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "fileHashSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/fileHashSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.extension": {
                "id": "@blackbyte.sugar.node.fs.extension",
                "name": "extension",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path to get the extension from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The file extension"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Return the passed file path extension",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "extension($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { extension } from '@blackbyte/sugar/fs';\nextension('hello/world.jpg'); // => jpg"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "extension.ts",
                "extension": "ts",
                "relPath": "src/node/fs/extension.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.existsSync": {
                "id": "@blackbyte.sugar.node.fs.existsSync",
                "name": "existsSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path you want to check",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TExistsSettings"
                                }
                            ],
                            "raw": "TExistsSettings"
                        },
                        "description": "Some settings for what you want to take care of",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if exists, false if not"
                },
                "setting": {
                    "directory": {
                        "name": "directory",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to take care of directories",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "file": {
                        "name": "file",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to take care of files",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "symlink": {
                        "name": "symlink",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to take care of symlinks",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply check if the path passed exists.\nYou can specify what you want to take care of using the settings object",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "existsSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { existsSync } from '@blackbyte/sugar/fs';\nexistsSync('/something/cool.txt'); // => true"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "existsSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/existsSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.exists": {
                "id": "@blackbyte.sugar.node.fs.exists",
                "name": "exists",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path you want to check",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TExistsSettings"
                                }
                            ],
                            "raw": "TExistsSettings"
                        },
                        "description": "Some settings for what you want to take care of",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if exists, false if not"
                },
                "setting": {
                    "directory": {
                        "name": "directory",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to take care of directories",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "file": {
                        "name": "file",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to take care of files",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "symlink": {
                        "name": "symlink",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to take care of symlinks",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply check if the path passed exists.\nYou can specify what you want to take care of using the settings object",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "exists($1)",
                    "code": "await exists($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { exists } from '@blackbyte/sugar/fs';\n exists('/something/cool.txt'); // => true"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "exists.ts",
                "extension": "ts",
                "relPath": "src/node/fs/exists.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.ensureFileSync": {
                "id": "@blackbyte.sugar.node.fs.ensureFileSync",
                "name": "ensureFileSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "filePath": {
                        "name": "filePath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file to ensure that it exists...",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ensure that the passed file exists. If not, will be created... (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "ensureFileSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { ensureFileSync } from '@blackbyte/sugar/fs';\nensureFileSync('my/cool/file.jpg');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "ensureFileSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/ensureFileSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.ensureFile": {
                "id": "@blackbyte.sugar.node.fs.ensureFile",
                "name": "ensureFile",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "filePath": {
                        "name": "filePath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file to ensure that it exists...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved once the file has been created if needed..."
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ensure that the passed file exists. If not, it will be created... (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "ensureFile($1)",
                    "code": "await ensureFile($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { ensureFile } from '@blackbyte/sugar/fs';\nawait ensureFile('my/cool/file.jpg').then(() => {\n   // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "ensureFile.ts",
                "extension": "ts",
                "relPath": "src/node/fs/ensureFile.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.ensureDirSync": {
                "id": "@blackbyte.sugar.node.fs.ensureDirSync",
                "name": "ensureDirSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "dir": {
                        "name": "dir",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory to ensure that it exists...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved once the directory has been created if needed..."
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ensure that the passed directory exists. If not, will be created recursively... (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "ensureDirSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { ensureDirSync } from '@blackbyte/sugar/fs';\nensureDirSync('my/cool/dir');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "ensureDirSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/ensureDirSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.ensureDir": {
                "id": "@blackbyte.sugar.node.fs.ensureDir",
                "name": "ensureDir",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "dir": {
                        "name": "dir",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory to ensure that it exists...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved once the directory has been created if needed..."
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Ensure that the passed directory exists. If not, will be created recursively... (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "ensureDir($1)",
                    "code": "await ensureDir($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { ensureDir } from '@blackbyte/sugar/fs';\n ensureDir('my/cool/dir').then(() => {\n   // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "ensureDir.ts",
                "extension": "ts",
                "relPath": "src/node/fs/ensureDir.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.emptyDirSync": {
                "id": "@blackbyte.sugar.node.fs.emptyDirSync",
                "name": "emptyDirSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "dir": {
                        "name": "dir",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory path to empty",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Empty a directory (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "emptyDirSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { emptyDirSync } from '@blackbyte/sugar/fs';\nemptyDirSync('my/cool/directory');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "emptyDirSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/emptyDirSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.emptyDir": {
                "id": "@blackbyte.sugar.node.fs.emptyDir",
                "name": "emptyDir",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "dir": {
                        "name": "dir",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory path to empty",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved once the directory has been cleaned"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Empty a directory (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "emptyDir($1)",
                    "code": "await emptyDir($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { emptyDir } from '@blackbyte/sugar/fs';\nawait emptyDir('my/cool/directory').then(() => {\n   // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "emptyDir.ts",
                "extension": "ts",
                "relPath": "src/node/fs/emptyDir.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.dirname": {
                "id": "@blackbyte.sugar.node.fs.dirname",
                "name": "dirname",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The dirname path"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Return the dirname the same as the dirname cjs variable.\nThe only difference is that it&#39;s a function and you need to pass the &quot;import&quot; variable\nfrom the filename in which you use this...",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "dirname()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { dirname } from '@blackbyte/sugar/fs';\ndirname();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "dirname.ts",
                "extension": "ts",
                "relPath": "src/node/fs/dirname.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.copySync": {
                "id": "@blackbyte.sugar.node.fs.copySync",
                "name": "copySync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "src": {
                        "name": "src",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The source path to copy",
                        "defaultStr": ""
                    },
                    "dest": {
                        "name": "dest",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The destination path",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Copy a file or directory (sync)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "copySync($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { copySync } from '@blackbyte/sugar/fs';\n copySync('my/cool/file.jpg', 'my/new/file.jpg');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "copySync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/copySync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.copy": {
                "id": "@blackbyte.sugar.node.fs.copy",
                "name": "copy",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "src": {
                        "name": "src",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The source path to copy",
                        "defaultStr": ""
                    },
                    "dest": {
                        "name": "dest",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The destination path",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise that will be resolved when the copy is completed"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Copy a file or directory (async)",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "copy($1, $2)",
                    "code": "await copy($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { copy } from '@blackbyte/sugar/fs';\nawait copy('my/cool/file.jpg', 'my/new/file.jpg').then(() => {\n   // do something on complete...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/jprichardson/node-fs-extra",
                        "description": ""
                    }
                ],
                "filename": "copy.ts",
                "extension": "ts",
                "relPath": "src/node/fs/copy.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.checkPathWithMultipleExtensions": {
                "id": "@blackbyte.sugar.node.fs.checkPathWithMultipleExtensions",
                "name": "checkPathWithMultipleExtensions",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path you want to check. With or without an extension",
                        "defaultStr": ""
                    },
                    "extensions": {
                        "name": "extensions",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "Array<String>"
                        },
                        "description": "The extensions (without the dot) you want to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            },
                            {
                                "type": "undefined"
                            }
                        ],
                        "raw": "String|undefined"
                    },
                    "description": "The first valid path founded, or undefined"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function take a path and some extensions to check if a file\nexists with one of these particular extensions.\nIf a file exists, the function return the path with the first extensions that matches",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "checkPathWithMultipleExtensions($1, $2)",
                    "code": "checkPathWithMultipleExtensions($1, [\n    $2\n])"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { checkPathWithMultipleExtensions } from '@blackbyte/sugar/fs';\ncheckPathWithMultipleExtensions('/my/cool/file.txt', ['txt','js','css']);"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "checkPathWithMultipleExtensions.ts",
                "extension": "ts",
                "relPath": "src/node/fs/checkPathWithMultipleExtensions.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.fs.appendToFileSync": {
                "id": "@blackbyte.sugar.node.fs.appendToFileSync",
                "name": "appendToFileSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file path you want to check. With or without an extension",
                        "defaultStr": ""
                    },
                    "content": {
                        "name": "content",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The content to add to the file",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function allows you to simply append a string to a file.",
                "namespace": "@blackbyte.sugar.node.fs",
                "status": "stable",
                "snippet": {
                    "label": "appendToFileSync($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { appendToFileSync } from '@blackbyte/sugar/fs';\nappendToFileSync('/my/cool/file.txt', 'Hello world');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "appendToFileSync.ts",
                "extension": "ts",
                "relPath": "src/node/fs/appendToFileSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.console.parseHtml": {
                "id": "@blackbyte.sugar.node.console.parseHtml",
                "name": "parseHtml",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "message": {
                        "name": "message",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "String|Array"
                        },
                        "description": "The message to format of an array of messages to format",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The formated message"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Parse the simple html tags to format the console message",
                "namespace": "@blackbyte.sugar.node.console",
                "status": "stable",
                "snippet": {
                    "label": "parseHtml($1)"
                },
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "parseHtml.ts",
                "extension": "ts",
                "relPath": "src/node/console/parseHtml.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.composer.composerVendorDir": {
                "id": "@blackbyte.sugar.node.composer.composerVendorDir",
                "name": "composerVendorDir",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TComposerVendorDirSettings"
                                }
                            ],
                            "raw": "TComposerVendorDirSettings"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The package path"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory in which you want to start the research",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "monorepo": {
                        "name": "monorepo",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you are in a monorepo context",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "checkExistence": {
                        "name": "checkExistence",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to check if the vendor dir exists",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply returns the &quot;vendor&quot; directory path",
                "namespace": "@blackbyte.sugar.node.composer",
                "status": "beta",
                "snippet": {
                    "label": "composerVendorDir($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { composerVendorDir } from '@blackbyte/sugar/composer`;\ncomposerVendorDir('lodash');"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "composerVendorDir.ts",
                "extension": "ts",
                "relPath": "src/node/composer/composerVendorDir.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.composer.composerPackageDir": {
                "id": "@blackbyte.sugar.node.composer.composerPackageDir",
                "name": "composerPackageDir",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "nameOrPath": {
                        "name": "nameOrPath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "the package name or path wanted",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TComposerPackageDirSettings"
                                }
                            ],
                            "raw": "TComposerPackageDirSettings"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The package path"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory in which you want to start the research",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "monorepo": {
                        "name": "monorepo",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you are in a monorepo context",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "checkExistence": {
                        "name": "checkExistence",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to check if the vendor dir exists",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take a package name as parameter, and return the corresponding\npackage direcory path",
                "namespace": "@blackbyte.sugar.node.composer",
                "status": "beta",
                "snippet": {
                    "label": "composerPackageDir($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { composerPackageDir } from '@blackbyte/sugar/composer`;\ncomposerPackageDir('lodash');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "Implement a cache strategy to avoid making same process again and again"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "composerPackageDir.ts",
                "extension": "ts",
                "relPath": "src/node/composer/composerPackageDir.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.composer.composerJsonSync": {
                "id": "@blackbyte.sugar.node.composer.composerJsonSync",
                "name": "composerJsonSync",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "nameOrPath": {
                        "name": "nameOrPath",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "the package name or path wanted",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TComposerVendorDirSettings"
                                }
                            ],
                            "raw": "TComposerVendorDirSettings"
                        },
                        "description": "Some settings to configure your process",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "JSON"
                            }
                        ],
                        "raw": "JSON"
                    },
                    "description": "The composer.json content"
                },
                "setting": {
                    "cwd": {
                        "name": "cwd",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The directory in which you want to start the research",
                        "default": "process.cwd()",
                        "defaultStr": "process.cwd()"
                    },
                    "monorepo": {
                        "name": "monorepo",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you are in a monorepo context",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "checkExistence": {
                        "name": "checkExistence",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to check if the vendor dir exists",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This function simply take a package name (or &quot;.&quot; for the current package) as parameter, and return the corresponding\ncomposer.json JSON content",
                "namespace": "@blackbyte.sugar.node.composer",
                "status": "beta",
                "snippet": {
                    "label": "composerJsonSync($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { composerJsonSync } from '@blackbyte/sugar/composer`;\ncomposerJsonSync('blackbyte/sugar');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "Implement a cache strategy to avoid making same process again and again"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "composerJsonSync.ts",
                "extension": "ts",
                "relPath": "src/node/composer/composerJsonSync.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.clipboard.readText": {
                "id": "@blackbyte.sugar.node.clipboard.readText",
                "name": "readText",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The text to read"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Simple function to read things from the system clipboard.\nThis is using https://www.npmjs.com/package/clipboardy under the hood.",
                "namespace": "@blackbyte.sugar.node.clipboard",
                "status": "stable",
                "snippet": {
                    "label": "readText()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { copyText, readText } from '@blackbyte/sugar/clipboard';\ncopyText('Hello world');\nreadText(); // => Hello world"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/clipboardy",
                        "description": ""
                    }
                ],
                "filename": "readText.ts",
                "extension": "ts",
                "relPath": "src/node/clipboard/readText.ts",
                "children": {}
            },
            "@blackbyte.sugar.node.clipboard.copyText": {
                "id": "@blackbyte.sugar.node.clipboard.copyText",
                "name": "copyText",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The text to copy",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The text that has been copied"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Simple function to copy things into the system clipboard.\nThis is using https://www.npmjs.com/package/clipboardy under the hood.",
                "namespace": "@blackbyte.sugar.node.clipboard",
                "status": "stable",
                "snippet": {
                    "label": "copyText($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { copyText } from '@blackbyte/sugar/clipboard';\ncopyText('Hello world');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/clipboardy",
                        "description": ""
                    }
                ],
                "filename": "copyText.ts",
                "extension": "ts",
                "relPath": "src/node/clipboard/copyText.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.tracking.formTrackingEvents": {
                "id": "@blackbyte.sugar.js.tracking.formTrackingEvents",
                "name": "formTrackingEvents",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TFormTrackingEventsSettings"
                                }
                            ],
                            "raw": "TFormTrackingEventsSettings"
                        },
                        "description": "Some settings to configure your form tracking events",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "lang": {
                        "name": "lang",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to emit the language specific events",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "debug": {
                        "name": "debug",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to log some debug informations",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "simplifyLang": {
                        "name": "simplifyLang",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to simplify the lang attribute to only the first part like `en` instead of `en-US`",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to automatically track some events on your forms like the start of the form filling,\nthe form submission, etc...\nEach event has as data the form id &quot;formId&quot; and the language of the page &quot;lang&quot;.\nHere&#39;s the events dispatched thgouth the dataLayer:\n\n- `form.started`: When the form has been started to be filled\n- `form.submitted`: When the form has been submitted\n\nSome data are automatically added to the dataLayer like the form id (`formId`) and the language (`lang`) of the page.\n\nThe form id is getter/generated using these rules:\n\n1. If a `data-form-id` attribute is present on the form, this will be used as the form id\n2. If an input named `form_id` is present in the form, it&#39;s value will be used as the form id\n3. If an `id` attribute is present on the form, this will be used as the form id\n4. If nothing is found, a form id is generated using the `generateIdFromForm` function",
                "namespace": "@blackbyte.sugar.js.tracking",
                "status": "stable",
                "snippet": {
                    "label": "formTrackingEvents($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { formTrackingEvents } from '@blackbyte/sugar/tracking';\nformTrackingEvents();\n\n// Each dispatched events are like:\n{\n   event: 'form.started',\n   formId: 'my-form-id',\n   lang: 'en'\n}"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "formTrackingEvents.ts",
                "extension": "ts",
                "relPath": "src/js/tracking/formTrackingEvents.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.theme.setTheme": {
                "id": "@blackbyte.sugar.js.theme.setTheme",
                "name": "setTheme",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "theme": {
                        "name": "theme",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The theme name to set",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TSetThemeSettings"
                                }
                            ],
                            "raw": "TSetThemeSettings"
                        },
                        "description": "Some settings to configure your theme setter",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "cookieName": {
                        "name": "cookieName",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The cookie name to use to store the theme",
                        "default": "'theme'",
                        "defaultStr": "'theme'"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to set a theme for your website/application.\nIt will set the theme on the `body` tag like `theme-...` and set a cookie to remember the theme.\nYou will be able to get the theme from your backend code (PHP) using the `\\Sugar\\Theme\\getTheme()` function\nto set it in your body class attribute.",
                "namespace": "@blackbyte.sugar.js.theme",
                "status": "stable",
                "snippet": {
                    "label": "setTheme($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { setTheme } from '@blackbyte/sugar/theme';\nsetTheme('dark');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "setTheme.ts",
                "extension": "ts",
                "relPath": "src/js/theme/setTheme.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.theme.restoreTheme": {
                "id": "@blackbyte.sugar.js.theme.restoreTheme",
                "name": "restoreTheme",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "defaultTheme": {
                        "name": "defaultTheme",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The default theme to set if no theme has been set",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TRestoreThemeSettings"
                                }
                            ],
                            "raw": "TRestoreThemeSettings"
                        },
                        "description": "Some settings to configure your theme restoration",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "cookieName": {
                        "name": "cookieName",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The cookie name to use to store the theme",
                        "default": "'theme'",
                        "defaultStr": "'theme'"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to restore the theme set on the website/application through\nthe `setTheme` function.",
                "namespace": "@blackbyte.sugar.js.theme",
                "status": "stable",
                "snippet": {
                    "label": "setTheme($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { setTheme } from '@blackbyte/sugar/theme';\nsetTheme('dark');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "restoreTheme.ts",
                "extension": "ts",
                "relPath": "src/js/theme/restoreTheme.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.theme.getTheme": {
                "id": "@blackbyte.sugar.js.theme.getTheme",
                "name": "getTheme",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "defaultTheme": {
                        "name": "defaultTheme",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The default theme to return if no theme has been set",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TGetThemeSettings"
                                }
                            ],
                            "raw": "TGetThemeSettings"
                        },
                        "description": "Some settings to configure your theme getter",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The theme name"
                },
                "setting": {
                    "cookieName": {
                        "name": "cookieName",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The cookie name to use to store the theme",
                        "default": "'theme'",
                        "defaultStr": "'theme'"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get the theme set on the website/application through\nthe `setTheme` function.",
                "namespace": "@blackbyte.sugar.js.theme",
                "status": "stable",
                "snippet": {
                    "label": "getTheme($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getTheme } from '@blackbyte/sugar/theme';\ngetTheme('dark');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getTheme.ts",
                "extension": "ts",
                "relPath": "src/js/theme/getTheme.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.string.uniqid": {
                "id": "@blackbyte.sugar.js.string.uniqid",
                "name": "uniqid",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "A uniqid"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function simply returns you a unique id",
                "namespace": "@blackbyte.sugar.js.string",
                "status": "stable",
                "snippet": {
                    "label": "uniqid()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { uniqid } from '@blackbyte/sugar/string';\nconst id = uniqid();"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "uniqid.ts",
                "extension": "ts",
                "relPath": "src/js/string/uniqid.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.scroll.scrollTo": {
                "id": "@blackbyte.sugar.js.dom.scroll.scrollTo",
                "name": "scrollTo",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "target": {
                        "name": "target",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to scroll to",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "IScrollToSettings"
                                }
                            ],
                            "raw": "IScrollToSettings"
                        },
                        "description": "Some settings to tweak the scroll behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise resolved once the scroll has ended"
                },
                "setting": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to scroll",
                        "default": "window",
                        "defaultStr": "window"
                    },
                    "duration": {
                        "name": "duration",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The animation duration",
                        "default": 1000,
                        "defaultStr": "1000"
                    },
                    "easing": {
                        "name": "easing",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "An easing Function",
                        "default": "easeInOutQuad",
                        "defaultStr": "easeInOutQuad"
                    },
                    "offsetX": {
                        "name": "offsetX",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "An offset to apply on the X axis",
                        "default": 0,
                        "defaultStr": "0"
                    },
                    "offsetY": {
                        "name": "offsetY",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "An offset to apply on the Y axis",
                        "default": 0,
                        "defaultStr": "0"
                    },
                    "align": {
                        "name": "align",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The destination align (start, center, end)",
                        "default": "'start'",
                        "defaultStr": "'start'"
                    },
                    "justify": {
                        "name": "justify",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The destination justify (start, center, end)",
                        "default": "'start'",
                        "defaultStr": "'start'"
                    },
                    "force": {
                        "name": "force",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Force the scroll even if the user is scrolling",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "onFinish": {
                        "name": "onFinish",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "A callback to call when the animation if finished",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Function that let you make a smooth page scroll to a specific element in the page",
                "namespace": "@blackbyte.sugar.js.dom.scroll",
                "status": "beta",
                "snippet": {
                    "label": "__scrollTo($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __scrollTop } from '@coffeekraken/sugar/dom'\nimport { easeInOutQuad } from '@coffeekraken/sugar/easing'\n__scrollTo(myCoolHTMLElement);"
                    }
                ],
                "async": true,
                "since": "2.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "interface"
                    },
                    {
                        "priority": "normal",
                        "description": "doc"
                    },
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "scrollTo.ts",
                "extension": "ts",
                "relPath": "src/js/scroll/scrollTo.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.scroll.scrollSpy": {
                "id": "@blackbyte.sugar.js.scroll.scrollSpy",
                "name": "scrollSpy",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TScrollSpySettings"
                                }
                            ],
                            "raw": "TScrollSpySettings"
                        },
                        "description": "The settings you want to override",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "number"
                                }
                            ],
                            "raw": "number"
                        },
                        "description": "The offset you want before adding the classes",
                        "default": "window.innerHeight/2",
                        "defaultStr": "window.innerHeight/2"
                    },
                    "activeClass": {
                        "name": "activeClass",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "The class name you want to add/remove",
                        "default": "-active",
                        "defaultStr": "-active"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to add/remove automatically the `-active` class on\nsome passed links that have a `href` attribute that points to an element on the page.",
                "namespace": "@blackbyte.sugar.js.scroll",
                "status": "stable",
                "snippet": {
                    "label": "scrollSpy($1);"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { scrollSpy } from '@blackbyte/sugar/scroll';\nscrollSpy($myLinks);"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "scrollSpy.ts",
                "extension": "ts",
                "relPath": "src/js/scroll/scrollSpy.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.keyboard.hotkey": {
                "id": "@blackbyte.sugar.js.keyboard.hotkey",
                "name": "hotkey",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "key": {
                        "name": "key",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String|String[]"
                        },
                        "description": "The key(s) to listen for",
                        "defaultStr": ""
                    },
                    "callback": {
                        "name": "callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The callback to call when the hotkey is pressed",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "THotkeySettings"
                                }
                            ],
                            "raw": "THotkeySettings"
                        },
                        "description": "Some settings to configure your hotkey",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "THotkeyApi"
                            }
                        ],
                        "raw": "THotkeyApi"
                    },
                    "description": "An object with a cancel method that you can call to cancel the hotkey"
                },
                "setting": {
                    "ctx": {
                        "name": "ctx",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The context in which to listen for the hotkey",
                        "default": "document.body",
                        "defaultStr": "document.body"
                    },
                    "preventDefault": {
                        "name": "preventDefault",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to prevent the default behavior of the hotkey",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to register a hotkey on the passed element.\nYou can specify the hotkey using the following syntax:\n- ctrl+a\n- shift+ctrl+a\n- a\nThis function take care of avoiding to call your callback when the active element\nis an input, a textarea or an editable content with the &quot;contenteditable&quot; attribute,\nunless:\n- the &quot;meta&quot; or &quot;ctrl&quot; key is used in the hotkey.\n- the pressed key is the &quot;escape&quot; key.",
                "namespace": "@blackbyte.sugar.js.keyboard",
                "status": "stable",
                "snippet": {
                    "label": "hotkey($1, () => {",
                    "code": "     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { hotkey } from '@blackbyte/sugar/keyboard'\nconst hotkeyApi = hotkey('ctrl+a', (e) => {\n console.log('Hotkey pressed');\n});\n\n// if you want to cancel the hotkey\nhotkeyApi.cancel();"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "hotkey.ts",
                "extension": "ts",
                "relPath": "src/js/keyboard/hotkey.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.keyboard.escapeQueue": {
                "id": "@blackbyte.sugar.js.keyboard.escapeQueue",
                "name": "escapeQueue",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "callback": {
                        "name": "callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The callback to call on pressing escape",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An option object to configure your hotkey. Here's the list of available settings:",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "SPromise"
                            }
                        ],
                        "raw": "SPromise"
                    },
                    "description": "An SPromise instance that will be resolved when the user has pressed the escape key and that it's yout turn in the queue"
                },
                "setting": {
                    "ctx": {
                        "name": "ctx",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "Specify where to add the listener",
                        "default": "document",
                        "defaultStr": "document"
                    },
                    "id": {
                        "name": "id",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "Specify an id. If specified, will before unqueue the previous item with the same id and add it again",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This funciton allows you to register actions to execute when user press the escape key.\nIt will take care of executing the last registered action first, then the others...\nThis function returns a SPromise instance on which you can call the `cancel` method to unregister your\naction in the queue.\nNote that you can get the current queue length by calling `escapeQueueLength()`.",
                "namespace": "@blackbyte.sugar.js.keyboard",
                "status": "stable",
                "snippet": {
                    "label": "escapeQueue($1).then(() => {",
                    "code": "     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { escapeQueue } from '@blackbyte/sugar/keyboard'\nconst promise = escapeQueue();\npromise.then(() => {\n     // do something...\n});\n\n// if you want to cancel your subscription\npromise.cancel();"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "escapeQueue.ts",
                "extension": "ts",
                "relPath": "src/js/keyboard/escapeQueue.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isVisible": {
                "id": "@blackbyte.sugar.js.is.isVisible",
                "name": "isVisible",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "If the element is visible or not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the passed HTMLElement is visible or not.\nVisible mean that it has not an opacity of 0, not a visibility of hidden and not a display of none and `return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);`",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isVisible($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isVisible } from '@blackbyte/sugar/dom'\nif (isVisible(myCoolHTMLElement) {\n\t\t// i'm visible\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/questions/19669786/check-if-element-is-visible-in-dom",
                        "description": ""
                    }
                ],
                "filename": "isVisible.ts",
                "extension": "ts",
                "relPath": "src/js/is/isVisible.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isVideoPlaying": {
                "id": "@blackbyte.sugar.js.is.isVideoPlaying",
                "name": "isVideoPlaying",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "video": {
                        "name": "video",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLVideoElement"
                                }
                            ],
                            "raw": "HTMLVideoElement"
                        },
                        "description": "The video element to check",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if the video is playing, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to know if a video is currently playing or not",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isVideoPlaying($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isVideoPlaying } from '@blackbyte/sugar/is'\nif (isVideoPlaying($myVideo)) {\n  // do something cool...\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isVideoPlaying.ts",
                "extension": "ts",
                "relPath": "src/js/is/isVideoPlaying.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isUserScrolling": {
                "id": "@blackbyte.sugar.js.is.isUserScrolling",
                "name": "isUserScrolling",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to monitor",
                        "default": "document",
                        "defaultStr": "document"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "If the element is in the viewport or not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check the user is scrolling a particular element",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isUserScrolling()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isUserScrolling } from '@blackbyte/sugar/dom'\nif (isUserScrolling(myCoolHTMLElement) {\n\t\t// i'm in the viewport\n}"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isUserScrolling.ts",
                "extension": "ts",
                "relPath": "src/js/is/isUserScrolling.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isUcBrowser": {
                "id": "@blackbyte.sugar.js.is.isUcBrowser",
                "name": "isUcBrowser",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is the UC stock browser that is running the page",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isUcBrowser()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isUcBrowser } from '@blackbyte/sugar/is'\nif (isUcBrowser()) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isUcBrowser.ts",
                "extension": "ts",
                "relPath": "src/js/is/isUcBrowser.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isTablet": {
                "id": "@blackbyte.sugar.js.is.isTablet",
                "name": "isTablet",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a tablet, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is a tablet device",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isTablet()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isTablet } from '@blackbyte/sugar/is'\nif (isTablet()) {\n  // do something cool...\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "integrate some kind of media query check"
                    },
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://blog.devgenius.io/4-ways-to-detect-mobile-browsers-in-javascript-943b66657524",
                        "description": ""
                    }
                ],
                "filename": "isTablet.ts",
                "extension": "ts",
                "relPath": "src/js/is/isTablet.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isScrollable": {
                "id": "@blackbyte.sugar.js.is.isScrollable",
                "name": "isScrollable",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is scrollable, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the passed element is scrollable or not",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isScrollable($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isScrollable } from '@blackbyte/sugar/dom'\nif (isScrollable($myElement)) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isScrollable.ts",
                "extension": "ts",
                "relPath": "src/js/is/isScrollable.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isSamsumgBrowser": {
                "id": "@blackbyte.sugar.js.is.isSamsumgBrowser",
                "name": "isSamsumgBrowser",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a samsung browser, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is the samsung stock browser that is running the page",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isSamsungBrowser()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isSamsungBrowser } from '@blackbyte/sugar/is'\nif (isSamsungBrowser()) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isSamsungBrowser.ts",
                "extension": "ts",
                "relPath": "src/js/is/isSamsungBrowser.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isSafari": {
                "id": "@blackbyte.sugar.js.is.isSafari",
                "name": "isSafari",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is safari, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is safari",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isSafari()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isSafari } from '@blackbyte/sugar/is'\nif (isSafari()) {\n  // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isSafari.ts",
                "extension": "ts",
                "relPath": "src/js/is/isSafari.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isPhone": {
                "id": "@blackbyte.sugar.js.is.isPhone",
                "name": "isPhone",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a phone, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is a phone device",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isPhone()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isPhone } from '@blackbyte/sugar/is'\nif (isPhone()) {\n  // do something cool...\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://blog.devgenius.io/4-ways-to-detect-mobile-browsers-in-javascript-943b66657524",
                        "description": ""
                    }
                ],
                "filename": "isPhone.ts",
                "extension": "ts",
                "relPath": "src/js/is/isPhone.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isOpera": {
                "id": "@blackbyte.sugar.js.is.isOpera",
                "name": "isOpera",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is opera, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is opera",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isOpera()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isOpera } from '@blackbyte/sugar/is'\nif ( isOpera()) {\n  // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isOpera.ts",
                "extension": "ts",
                "relPath": "src/js/is/isOpera.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isMobile": {
                "id": "@blackbyte.sugar.js.is.isMobile",
                "name": "isMobile",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a mobile, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is a mobile device (phone or tablet)",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isMobile()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isMobile } from '@blackbyte/sugar/is'\nif (isMobile()) {\n  // do something cool...\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "integrate some kind of media query check"
                    },
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://blog.devgenius.io/4-ways-to-detect-mobile-browsers-in-javascript-943b66657524",
                        "description": ""
                    }
                ],
                "filename": "isMobile.ts",
                "extension": "ts",
                "relPath": "src/js/is/isMobile.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isInViewport": {
                "id": "@blackbyte.sugar.js.is.isInViewport",
                "name": "isInViewport",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to insert",
                        "defaultStr": ""
                    },
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "An object of top, right, bottom and left offset used to detect the status or an object with top, right, bottom and left offsets",
                        "default": 50,
                        "defaultStr": "50"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "If the element is in the viewport or not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the passed HTMLElement is in the viewport or not",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isInViewport($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isInViewport } from '@blackbyte/sugar/dom'\nif (isInViewport(myCoolHTMLElement) {\n\t\t// i'm in the viewport\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isInViewport.ts",
                "extension": "ts",
                "relPath": "src/js/is/isInViewport.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isInIframe": {
                "id": "@blackbyte.sugar.js.is.isInIframe",
                "name": "isInIframe",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if in iframe, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the page is loaded inside an iframe",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isInIframe($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isInIframe } from '@blackbyte/sugar/dom'\nif (isInIframe()) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isInIframe.ts",
                "extension": "ts",
                "relPath": "src/js/is/isInIframe.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isIe": {
                "id": "@blackbyte.sugar.js.is.isIe",
                "name": "isIe",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is ie, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is ie (internet explorer)",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isIe()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isIe } from '@blackbyte/sugar/is'\nif (isIe()) {\n  // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isIe.ts",
                "extension": "ts",
                "relPath": "src/js/is/isIe.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isHover": {
                "id": "@blackbyte.sugar.js.is.isHover",
                "name": "isHover",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement to check",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the mouse is isHover the passed HTMLElement",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isHover($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isHover } from '@blackbyte/sugar/dom'\nconst $myElm = document.querySelector('.my-elm')\nif (isHover($myElm)) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isHover.ts",
                "extension": "ts",
                "relPath": "src/js/is/isHover.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isHlsSupported": {
                "id": "@blackbyte.sugar.js.is.isHlsSupported",
                "name": "isHlsSupported",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if supported, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the HLS format is supported by the browser",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isHlsSupported($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isHlsSupported } from '@blackbyte/sugar/id'\nif (!isHlsSupported()) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isHlsSupported.ts",
                "extension": "ts",
                "relPath": "src/js/is/isHlsSupported.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isFocusWithin": {
                "id": "@blackbyte.sugar.js.is.isFocusWithin",
                "name": "isFocusWithin",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement to check",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the mouse is isFocusWithin the passed HTMLElement",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isFocusWithin($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isFocusWithin } from '@blackbyte/sugar/dom'\nconst $myElm = document.querySelector('.my-elm')\nif (isFocusWithin($myElm)) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isFocusWithin.ts",
                "extension": "ts",
                "relPath": "src/js/is/isFocusWithin.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isFocus": {
                "id": "@blackbyte.sugar.js.is.isFocus",
                "name": "isFocus",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement to check",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Check if the mouse is focus the passed HTMLElement",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isFocus($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isFocus } from '@blackbyte/sugar/dom'\nconst $myElm = document.querySelector('.my-elm')\nif (isFocus($myElm)) {\n  // do something\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isFocus.ts",
                "extension": "ts",
                "relPath": "src/js/is/isFocus.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isFirefox": {
                "id": "@blackbyte.sugar.js.is.isFirefox",
                "name": "isFirefox",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is firefox, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is firefox",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isFirefox()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isFirefox } from '@blackbyte/sugar/is'\nif (isFirefox()) {\n  // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isFirefox.ts",
                "extension": "ts",
                "relPath": "src/js/is/isFirefox.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isEdge": {
                "id": "@blackbyte.sugar.js.is.isEdge",
                "name": "isEdge",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is edge, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is edge",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isEdge()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isEdge } from '@blackbyte/sugar/is'\nif (isEdge()) {\n  // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isEdge.ts",
                "extension": "ts",
                "relPath": "src/js/is/isEdge.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isDarkMode": {
                "id": "@blackbyte.sugar.js.is.isDarkMode",
                "name": "isDarkMode",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if prefer dark mode, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if the user prefer the dark mode.\nIf you pass a &quot;rootNode&quot;, it will check by querying up the DOM if an element\nhas the class `-dark` on it.",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isDarkMode()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isDarkMode } from '@blackbyte/sugar/is'\nif ( isDarkMode()) {\n  // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isDarkMode.ts",
                "extension": "ts",
                "relPath": "src/js/is/isDarkMode.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isCrawler": {
                "id": "@blackbyte.sugar.js.is.isCrawler",
                "name": "isCrawler",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is a crawler, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if request is from a crawler (google bot, etc...) or not",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isCrawler()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isCrawler } from '@blackbyte/sugar/is'\nif (isCrawler()) {\n  // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.npmjs.com/package/isbot",
                        "description": ""
                    }
                ],
                "filename": "isCrawler.ts",
                "extension": "ts",
                "relPath": "src/js/is/isCrawler.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.is.isChrome": {
                "id": "@blackbyte.sugar.js.is.isChrome",
                "name": "isChrome",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "ua": {
                        "name": "ua",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The user agent on which to make the test",
                        "default": "navigator.userAgent",
                        "defaultStr": "navigator.userAgent"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "true if is chrome, false if not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect if is chrome",
                "namespace": "@blackbyte.sugar.js.is",
                "status": "stable",
                "snippet": {
                    "label": "isChrome()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { isChrome } from '@blackbyte/sugar/is'\nif ( isChrome()) {\n  // do something cool\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "isChrome.ts",
                "extension": "ts",
                "relPath": "src/js/is/isChrome.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.feature.sectionClasses": {
                "id": "@blackbyte.sugar.js.dom.feature.sectionClasses",
                "name": "sectionClasses",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TSectionClassesSettings"
                                }
                            ],
                            "raw": "TSectionClassesSettings"
                        },
                        "description": "The settings you want to override",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "number"
                                }
                            ],
                            "raw": "number"
                        },
                        "description": "The offset you want before adding the classes",
                        "default": 100,
                        "defaultStr": "100"
                    },
                    "offsetX": {
                        "name": "offsetX",
                        "type": {
                            "types": [
                                {
                                    "type": "number"
                                }
                            ],
                            "raw": "number"
                        },
                        "description": "The offset x you want before adding the classes",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "offsetY": {
                        "name": "offsetY",
                        "type": {
                            "types": [
                                {
                                    "type": "number"
                                }
                            ],
                            "raw": "number"
                        },
                        "description": "The offset y you want before adding the classes",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "class": {
                        "name": "class",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "The class name you want. Will be used also in the %cls-x and %cls-y classes",
                        "default": "scrolled",
                        "defaultStr": "scrolled"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This feature allows you to add some classes on your sections when they are in the viewport, near the viewport, etc...\n1. `-in-viewport`: Added when the section is in the viewport\n2. `-near-viewport`: Added when the section is near the viewport (100px by default)",
                "namespace": "@blackbyte.sugar.js.dom.feature",
                "status": "stable",
                "snippet": {
                    "label": "sectionClasses($1);"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { sectionClasses } from '@blackbyte/sugar/features';\nsectionClasses({\n});"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "sectionClasses.ts",
                "extension": "ts",
                "relPath": "src/js/feature/sectionClasses.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.feature.scrollClasses": {
                "id": "@blackbyte.sugar.js.dom.feature.scrollClasses",
                "name": "scrollClasses",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TScrollClassesSettings"
                                }
                            ],
                            "raw": "TScrollClassesSettings"
                        },
                        "description": "The settings you want to override",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "number"
                                }
                            ],
                            "raw": "number"
                        },
                        "description": "The offset you want before adding the classes",
                        "default": 100,
                        "defaultStr": "100"
                    },
                    "offsetX": {
                        "name": "offsetX",
                        "type": {
                            "types": [
                                {
                                    "type": "number"
                                }
                            ],
                            "raw": "number"
                        },
                        "description": "The offset x you want before adding the classes",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "offsetY": {
                        "name": "offsetY",
                        "type": {
                            "types": [
                                {
                                    "type": "number"
                                }
                            ],
                            "raw": "number"
                        },
                        "description": "The offset y you want before adding the classes",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "class": {
                        "name": "class",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "The class name you want. Will be used also in the %cls-x and %cls-y classes",
                        "default": "scrolled",
                        "defaultStr": "scrolled"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This feature allows you to have `-scrolled`, `-scrolled-x`, `-scrolled-y`, `-scrolled-up` and `-scrolled-down` classes added and removed from\nthe body depending on an scroll offset that can be set by:\n1. `-scrolled`: Added when passed the `offset` set in the settings\n2. `-scrolled-x`: Added when passed the `offsetX` set in the settings\n3. `-scrolled-y`: Added when passed the `offsetY` set in the settings\n4. `-scrolled-up`: Added when the user scrolls up (no offset)\n5. `-scrolled-down`: Added when the user scrolls down (no offset)\n\nNote that you can specify these settings in the CSS with the following variables:\n- `--s-scrolled-classes-offset`: The offset you want before adding the classes\n- `--s-scrolled-classes-offset-x`: The offset x you want before adding the classes\n- `--s-scrolled-classes-offset-y`: The offset y you want before adding the classes\n- `--s-scrolled-classes-class`: The class name you want. Will be used also in the %cls-x and %cls-y classes",
                "namespace": "@blackbyte.sugar.js.dom.feature",
                "status": "stable",
                "snippet": {
                    "label": "scrollClasses($1);"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { scrollClasses } from '@blackbyte/sugar/features';\nscrollClasses({\n     class: 'hello',\n     offset: 200\n});"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "scrollClasses.ts",
                "extension": "ts",
                "relPath": "src/js/feature/scrollClasses.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenVisible": {
                "id": "@blackbyte.sugar.js.dom.when.whenVisible",
                "name": "whenVisible",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to monitor",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "<Promise^HTMLElement>$"
                            }
                        ],
                        "raw": "(Promise<HTMLElement>)"
                    },
                    "description": "The promise that will be resolved when the element is visible"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Monitor an HTMLElement to be notified when it is visible",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenVisible($1)",
                    "code": "whenVisible($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenVisible } from '@blackbyte/sugar/dom'\nwhenVisible(myCoolHTMLElement).then(($elm) => {\n\t\t// do something with your element that is now visible\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenVisible.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenVisible.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenTransitionEnd": {
                "id": "@blackbyte.sugar.js.dom.when.whenTransitionEnd",
                "name": "whenTransitionEnd",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to monitor",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "<Promise^HTMLElement>$"
                            }
                        ],
                        "raw": "(Promise<HTMLElement>)"
                    },
                    "description": "The promise that will be resolved when the element transition has ended"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Monitor an HTMLElement to be notified when his transition has ended",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenTransitionEnd($1)",
                    "code": "whenTransitionEnd($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenTransitionEnd } from '@blackbyte/sugar/dom'\nawait whenTransitionEnd(myCoolHTMLElement);"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenTransitionEnd.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenTransitionEnd.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenStylesheetsReady": {
                "id": "@blackbyte.sugar.js.dom.when.whenStylesheetsReady",
                "name": "whenStylesheetsReady",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "links": {
                        "name": "links",
                        "type": {
                            "types": [
                                {
                                    "type": "Array}",
                                    "of": [
                                        "HTMLLinkElement"
                                    ]
                                }
                            ],
                            "raw": "Array}<HTMLLinkElement>"
                        },
                        "description": "The HTMLLinkElement tags to process. If not passed, take the local stylesheets links",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "void"
                                ]
                            }
                        ],
                        "raw": "Promise<void>"
                    },
                    "description": "The promise that will be resolved when all the links are loaded"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Wait until all the HTMLLinkElement&#39;s are properly loaded",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenStylesheetsReady($1)",
                    "code": "whenStylesheetsReady($1).then(stylesheets => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenStylesheetsReady } from '@blackbyte/sugar/dom'\nwhenStylesheetsReady([\n\t\tmyHTMLLinkElement1,\n\t\tmyHTMLLinkElement2\n]).then(stylesheets => {\n     // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenStylesheetsReady.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenStylesheetsReady.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenScriptLoaded": {
                "id": "@blackbyte.sugar.js.dom.when.whenScriptLoaded",
                "name": "whenScriptLoaded",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$script": {
                        "name": "$script",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLScriptElement"
                                }
                            ],
                            "raw": "HTMLScriptElement"
                        },
                        "description": "The script element to detect the loading state",
                        "defaultStr": ""
                    },
                    "cb": {
                        "name": "cb",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "A callback if you prefer",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "The promise that will be resolved when the script is fully loaded"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect when a script has been fully loaded",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenScriptLoaded($1)",
                    "code": "whenScriptLoaded($1).then(\\$script => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenScriptLoaded } from '@blackbyte/sugar/dom'\nwhenScriptLoaded($script).then(($script) => {\n  // do something here\n})"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenScriptLoaded.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenScriptLoaded.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenRemoved": {
                "id": "@blackbyte.sugar.js.dom.when.whenRemoved",
                "name": "whenRemoved",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement on which to monitor",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "<Promise^HTMLElement>$"
                            }
                        ],
                        "raw": "(Promise<HTMLElement>)"
                    },
                    "description": "The promise that will be resolved when the attribute exist on the element (and that it passes the checkFn)"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Resolve a promise when the passed node has been removed from the dom",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenRemoved($1);",
                    "code": "whenRemoved($1).then(() => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenRemoved } from '@blackbyte/sugar/dom'\nwhenRemoved(myCoolHTMLElement).then(() => {\n\t\t// the element has been removed\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenRemoved.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenRemoved.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenOutOfViewport": {
                "id": "@blackbyte.sugar.js.dom.when.whenOutOfViewport",
                "name": "whenOutOfViewport",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to monitor",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenOutOfViewportSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenOutOfViewportSettings>"
                        },
                        "description": "Some settings to tweak the detection behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "<Promise^HTMLElement>$"
                            }
                        ],
                        "raw": "(Promise<HTMLElement>)"
                    },
                    "description": "The promise that will be resolved when the element exit the viewport"
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "An offset to detect sooner or later the element exits the viewport",
                        "default": "10px",
                        "defaultStr": "10px"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Monitor an HTMLElement to be notified when it exit the viewport",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenOutOfViewport($1)",
                    "code": "whenOutOfViewport($1).then(\\$$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenOutOfViewport } from '@blackbyte/sugar/dom'\nwhenOutOfViewport(myCoolHTMLElement).then(($elm) => {\n\t\t// do something with your element that has exit the viewport...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenOutOfViewport.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenOutOfViewport.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenNearViewport": {
                "id": "@blackbyte.sugar.js.dom.when.whenNearViewport",
                "name": "whenNearViewport",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to monitor",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenNearViewportSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenNearViewportSettings>"
                        },
                        "description": "Some settings to tweak the detection behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "<Promise^HTMLElement>$"
                            }
                        ],
                        "raw": "(Promise<HTMLElement>)"
                    },
                    "description": "The promise that will be resolved when the element is in the viewport"
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "Some offset",
                        "default": "`${window.innerHeight}px ${window.innerWidth}px`",
                        "defaultStr": "`${window.innerHeight}px ${window.innerWidth}px`"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Monitor an HTMLElement to be notified when it is near (100vh before or after) the viewport, or in the viewport",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenNearViewport($1)",
                    "code": "whenNearViewport($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenNearViewport } from '@blackbyte/sugar/dom'\nwhenNearViewport(myCoolHTMLElement).then($elm => {\n\t\t// do something with your element that has entered the viewport...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenNearViewport.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenNearViewport.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenLinkLoaded": {
                "id": "@blackbyte.sugar.js.dom.when.whenLinkLoaded",
                "name": "whenLinkLoaded",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "link": {
                        "name": "link",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLLinkElement"
                                }
                            ],
                            "raw": "HTMLLinkElement"
                        },
                        "description": "The link tag to check the loading state",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "The promise that will be resolved"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Wait until the passed HTMLLinkElement is fully loaded",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenLinkLoaded($1)",
                    "code": "whenLinkLoaded($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenLinkLoaded } from '@blackbyte/sugar/dom'\nwhenLinkLoaded(myCoolHTMLLinlElement).then($link => {\n\t\t// do something when the link is loaded\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenLinkLoaded.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenLinkLoaded.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenInteract": {
                "id": "@blackbyte.sugar.js.dom.when.whenInteract",
                "name": "whenInteract",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The html element you want to monitor",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "IInteractionSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<IInteractionSettings>"
                        },
                        "description": "Some settings to configure your interaction detection",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "HTMLElement"
                                ]
                            }
                        ],
                        "raw": "Promise<HTMLElement>"
                    },
                    "description": "A promise that will be resolved when an interaction has been made"
                },
                "setting": {
                    "pointerover": {
                        "name": "pointerover",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "Specify if you want to detect the pointerover or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "pointerout": {
                        "name": "pointerout",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "Specify if you want to detect the pointerout or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "pointerdown": {
                        "name": "pointerdown",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "Specify if you want to detect the pointerdown or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "touchstart": {
                        "name": "touchstart",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "Specify if you want to detect the touchstart or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "touchend": {
                        "name": "touchend",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "Specify if you want to detect the touchend or not",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "focus": {
                        "name": "focus",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "Specify if you want to detect the focus or not",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Wait that an interaction is made with the passed element like &quot;focus&quot;, &quot;focusIn&quot;, &quot;pointerover&quot;, etc...",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenInteract($1)",
                    "code": "whenInteract($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenInteract } from '@blackbyte/sugar/dom'\nwhenInteract(myCoolElement).then($elm => {\n     // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenInteract.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenInteract.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenInViewport": {
                "id": "@blackbyte.sugar.js.dom.when.whenInViewport",
                "name": "whenInViewport",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to monitor",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenInViewportSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenInViewportSettings>"
                        },
                        "description": "Some settings to tweak the detection behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "<SPromise^HTMLElement>$"
                            }
                        ],
                        "raw": "(SPromise<HTMLElement>)"
                    },
                    "description": "The promise that will be resolved when the element is in the viewport"
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "An offset to detect sooner or later the element entering in the viewport",
                        "default": "'10px'",
                        "defaultStr": "'10px'"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Monitor an HTMLElement to be notified when it is in the viewport",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenInViewport($1)",
                    "code": "whenInViewport($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenInViewport } from '@blackbyte/sugar/dom'\nconst promise = whenInViewport(myCoolHTMLElement).then((elm) => {\n\t\t// do something with your element that has entered the viewport...\n});\n// when you want to stop listening\npromise.cancel();"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenInViewport.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenInViewport.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenImagesLoaded": {
                "id": "@blackbyte.sugar.js.dom.when.whenImagesLoaded",
                "name": "whenImagesLoaded",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$imgs": {
                        "name": "$imgs",
                        "type": {
                            "types": [
                                {
                                    "type": "Array",
                                    "of": [
                                        "HTMLImageElement"
                                    ]
                                }
                            ],
                            "raw": "Array<HTMLImageElement>"
                        },
                        "description": "An array (or nodeList) of HTMLImageElement to detect the load",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise resolved when all images are loaded properly"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect when some images are loaded. This function take advantage of the SPromise class\nand trigger an event called &quot;img.loaded&quot; that will be triggered on each loaded images and another called &quot;loaded&quot; once all the images are loaded.\nSee in the example bellow.",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenImagesLoaded($1)",
                    "code": "whenImagesLoaded($1).then(imgs => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenImagesLoaded } from '@blackbyte/sugar/dom'\nwhenImagesLoaded([\n\t$img1, $img2, $img3\n]).on('loaded', $img => {\n   // do something with the loaded image\n}).then(imgs => {\n  // do something here\n})"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenImagesLoaded.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenImagesLoaded.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenImageLoaded": {
                "id": "@blackbyte.sugar.js.dom.when.whenImageLoaded",
                "name": "whenImageLoaded",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$img": {
                        "name": "$img",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLImageElement"
                                }
                            ],
                            "raw": "HTMLImageElement"
                        },
                        "description": "The image to check the loading state",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "SPromise"
                            }
                        ],
                        "raw": "SPromise"
                    },
                    "description": "The promise that will be resolved when all the images are correctly loaded"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Wait until the passed image is fully loaded",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenImageLoaded($1)",
                    "code": "whenImageLoaded($1).then(\\$img => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenImageLoaded } from '@blackbyte/sugar/dom'\n whenImageLoaded(myCoolHTMLImageElement).then(($img) => {\n\t\t// do something when the image is loaded\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenImageLoaded.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenImageLoaded.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenIframeReady": {
                "id": "@blackbyte.sugar.js.dom.when.whenIframeReady",
                "name": "whenIframeReady",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$iframe": {
                        "name": "$iframe",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLIframeElement"
                                }
                            ],
                            "raw": "HTMLIframeElement"
                        },
                        "description": "The iframe to wait on",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "HTMLIframeElement"
                                ]
                            }
                        ],
                        "raw": "Promise<HTMLIframeElement>"
                    },
                    "description": "A promise that will be resolved when an interaction has been made"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Wait until the passed iframe is ready to be used",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenIframeReady($1)",
                    "code": "whenIframeReady($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenIframeReady } from '@blackbyte/sugar/dom'\nwhenIframeReady($myCoolIframe).then($iframe => {\n     // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenIframeReady.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenIframeReady.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenEventListener": {
                "id": "@blackbyte.sugar.js.dom.when.whenEventListener",
                "name": "whenEventListener",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "event": {
                        "name": "event",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "The event to listen for (e.g. 'click', 'animationend', etc.)",
                        "defaultStr": ""
                    },
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to listen on",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "Event"
                                ]
                            }
                        ],
                        "raw": "Promise<Event>"
                    },
                    "description": "A promise that will be resolved once the event has been triggered"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Promisify the `addEventListener` method of an element to resolve a promise\nonce the event has been triggered.",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenEventListener($1, $2)",
                    "code": "whenEventListener($1, $2).then(e: Event => {\n     $3\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenEventListener } from '@blackbyte/sugar/dom'\nwhenEventListener('click', myCoolElm).then((e: Event) => {\n     // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenEventListener.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenEventListener.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenEntersViewport": {
                "id": "@blackbyte.sugar.js.dom.when.whenEntersViewport",
                "name": "whenEntersViewport",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to monitor",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenEntersViewportSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenEntersViewportSettings>"
                        },
                        "description": "Some settings to tweak the detection behavior",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "<Promise^HTMLElement>$"
                            }
                        ],
                        "raw": "(Promise<HTMLElement>)"
                    },
                    "description": "The promise that will be resolved when the element is in the viewport"
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "An offset to detect the element entering in viewport earlier or later",
                        "default": "'0px 0px -25% 0px'",
                        "defaultStr": "'0px 0px -25% 0px'"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Monitor an HTMLElement to be notified when it is enters in the viewport (1/3vh in the viewport), or in the viewport",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenEntersViewport($1)",
                    "code": "whenEntersViewport($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenEntersViewport } from '@blackbyte/sugar/dom'\nwhenEntersViewport($myElement).then(($elm) => {\n\t\t// do something with your element that has entered the viewport...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenEntersViewport.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenEntersViewport.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenDomReady": {
                "id": "@blackbyte.sugar.js.dom.when.whenDomReady",
                "name": "whenDomReady",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "callback": {
                        "name": "callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "A callback to call when ready",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "void"
                                ]
                            }
                        ],
                        "raw": "Promise<void>"
                    },
                    "description": "A promise that will be resolved when the dom is ready"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Wait that the dom is ready before resolving the promise",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenDomReady()",
                    "code": "whenDomReady().then(() => {\n     $1\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenDomReady } from '@blackbyte/sugar/dom'\nwhenDomReady().then(() => {\n    // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.jstips.co/en/javascript/detect-document-ready-in-pure-js/",
                        "description": ""
                    }
                ],
                "filename": "whenDomReady.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenDomReady.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenBackgroundImageLoaded": {
                "id": "@blackbyte.sugar.js.dom.when.whenBackgroundImageLoaded",
                "name": "whenBackgroundImageLoaded",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement on which to detect the background image load",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "SPromise"
                            }
                        ],
                        "raw": "SPromise"
                    },
                    "description": "A promise that will be resolved when the background image has been loaded"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect when a background image has been loaded on an HTMLElement",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenBackgroundImageLoaded($1)",
                    "code": "whenBackgroundImageLoaded($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenBackgroundImageLoaded } from '@blackbyte/sugar/dom'\n\n// using promise\nawait whenBackgroundImageLoaded($elm);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenBackgroundImageLoaded.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenBackgroundImageLoaded.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenAttribute": {
                "id": "@blackbyte.sugar.js.dom.when.whenAttribute",
                "name": "whenAttribute",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement on which to monitor the property",
                        "defaultStr": ""
                    },
                    "attribute": {
                        "name": "attribute",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The attribute to monitor",
                        "defaultStr": ""
                    },
                    "checkFn": {
                        "name": "checkFn",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "An optional function to check the attribute. The promise is resolved when this function return true",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "",
                                "of": [
                                    "Promise"
                                ]
                            }
                        ],
                        "raw": "(Promise)"
                    },
                    "description": "The promise that will be resolved when the attribute exist on the element (and that it passes the checkFn)"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Resolve a promise when the wanted attribute on the passed HTMLElement exist or pass the check function provided",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenAttribute($1, $2)",
                    "code": "whenAttribute($1, $2).then(value => {\n     $3\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenAttribute } from '@blackbyte/sugar/dom'\n\n// using promise\nwhenAttribute(myCoolHTMLElement, 'value').then(value => {\n     // do something...\n});\n\n// with a check function\nwhenAttribute(myCoolHTMLElement, 'value', {\n   check(newVal, oldVal) {\n\t      // make sure the value is a number\n\t\t  return typeof(newVal) === 'number';\n   }\n}).then(value => {\n     // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenAttribute.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenAttribute.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.whenAnimationEnd": {
                "id": "@blackbyte.sugar.js.dom.when.whenAnimationEnd",
                "name": "whenAnimationEnd",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to listen on",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise",
                                "of": [
                                    "HTMLElement"
                                ]
                            }
                        ],
                        "raw": "Promise<HTMLElement>"
                    },
                    "description": "A promise that will be resolved once the animation has ended"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect when animation ends",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "whenAnimationEnd($1)",
                    "code": "whenAnimationEnd($1).then(\\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { whenAnimationEnd } from '@blackbyte/sugar/dom'\nwhenAnimationEnd(myCoolElm).then(($elm) => {\n     // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "whenAnimationEnd.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/whenAnimationEnd.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.when.when": {
                "id": "@blackbyte.sugar.js.dom.when.when",
                "name": "when",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to listen on",
                        "defaultStr": ""
                    },
                    "trigger": {
                        "name": "trigger",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "array",
                                    "of": [
                                        "String"
                                    ]
                                }
                            ],
                            "raw": "String|String[]"
                        },
                        "description": "The trigger(s) to listen on",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TwhenSettings"
                                }
                            ],
                            "raw": "TwhenSettings"
                        },
                        "description": "Some settings like offset, etc...",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "SPromise",
                                "of": [
                                    "HTMLElement"
                                ]
                            }
                        ],
                        "raw": "SPromise<HTMLElement>"
                    },
                    "description": "A promise resolved when all the triggers are fulfilled"
                },
                "setting": {
                    "whenInViewport": {
                        "name": "whenInViewport",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenInViewportSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenInViewportSettings>"
                        },
                        "description": "Some settings for the whenInViewport function",
                        "default": {},
                        "defaultStr": "{}"
                    },
                    "whenNearViewport": {
                        "name": "whenNearViewport",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenNearViewportSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenNearViewportSettings>"
                        },
                        "description": "Some settings for the whenNearViewport function",
                        "default": {},
                        "defaultStr": "{}"
                    },
                    "whenEntersViewport": {
                        "name": "whenEntersViewport",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "IWhenEntersViewportSettubgs"
                                    ]
                                }
                            ],
                            "raw": "Partial<IWhenEntersViewportSettubgs>"
                        },
                        "description": "Some settings for the whenEntersViewport function",
                        "default": {},
                        "defaultStr": "{}"
                    },
                    "whenOutOfViewport": {
                        "name": "whenOutOfViewport",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenOutOfViewportSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenOutOfViewportSettings>"
                        },
                        "description": "Some settings for the whenOutOfViewport function",
                        "default": {},
                        "defaultStr": "{}"
                    },
                    "whenInteract": {
                        "name": "whenInteract",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenInteractSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenInteractSettings>"
                        },
                        "description": "Some settings for the whenInteract function",
                        "default": {},
                        "defaultStr": "{}"
                    },
                    "whenVisible": {
                        "name": "whenVisible",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TWhenVisibleSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TWhenVisibleSettings>"
                        },
                        "description": "Some settings for the whenVisible function",
                        "default": {},
                        "defaultStr": "{}"
                    },
                    "whenStylesheetsReady": {
                        "name": "whenStylesheetsReady",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "IWhenStyleSheetsReadySettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<IWhenStyleSheetsReadySettings>"
                        },
                        "description": "Some settings for the whenStylesheetsReady function",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function listen for passed `trigger(s)` on the passed `HTMLElement` and resolve the promise once one of them has reached his state.",
                "namespace": "@blackbyte.sugar.js.dom.when",
                "status": "stable",
                "snippet": {
                    "label": "when($1, $2, $3)",
                    "code": "when($1, $2).then(() => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { when } from '@blackbyte/sugar/dom';\nwhen($elm, 'inViewport', {\n   whenInViewport: {\n      offset: 50\n   }\n}).then(() => {\n     // do something\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "when.ts",
                "extension": "ts",
                "relPath": "src/js/dom/when/when.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.transformKeyframesDeclarations": {
                "id": "@blackbyte.sugar.js.dom.style.transformKeyframesDeclarations",
                "name": "transformKeyframesDeclarations",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "keyFrameRule": {
                        "name": "keyFrameRule",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "KeyFrameRule to transform",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array"
                            }
                        ],
                        "raw": "Array"
                    },
                    "description": "Array of webanimation keyframes"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Transforms KeyFrameRule to array of web animation compatible keyframes",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "beta",
                "snippet": {
                    "label": "transformKeyframesDeclarations($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { transformKeyframesDeclarations } from '@blackbyte/sugar/dom';"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/marionebl/jogwheel/blob/main/source/library/transform-keyframe-declaration.js",
                        "description": ""
                    }
                ],
                "filename": "transformKeyframesDeclarations.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/transformKeyframesDeclarations.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getTranslateProperties": {
                "id": "@blackbyte.sugar.js.dom.style.getTranslateProperties",
                "name": "getTranslateProperties",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get the properties from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The translate x,y and z properties"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get a translate properties of an HTMLElement",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "stable",
                "snippet": {
                    "label": "getTranslateProperties($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getTranslateProperties } from '@blackbyte/sugar/dom'\nconst props = getTranslateProperties(myCoolHTMLElement);\n// output format\n// {\n// \tx : 100,\n// \ty : 0,\n// \tz : 0\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getTranslateProperties.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getTranslateProperties.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getTransitionProperties": {
                "id": "@blackbyte.sugar.js.dom.style.getTransitionProperties",
                "name": "getTransitionProperties",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get the properties from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The animation properties"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get the css transition properties from an HTMLElement in an object format",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "stable",
                "snippet": {
                    "label": "getTransitionProperties($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getTransitionProperties } from '@blackbyte/sugar/dom'\nconst props = getTransitionProperties(myCoolHTMLElement);\n// output format\n// {\n// \tproperty : ['all'],\n// \tduration : [200],\n// \tdelay : [0],\n// \ttimingFunction : ['linear'],\n// \ttotalDuration : 200\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getTransitionProperties.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getTransitionProperties.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getTransformProperties": {
                "id": "@blackbyte.sugar.js.dom.style.getTransformProperties",
                "name": "getTransformProperties",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get the properties from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The translate x,y and z properties"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get a translate properties of an HTMLElement",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "stable",
                "snippet": {
                    "label": "getTransformProperties($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getTransformProperties } from '@blackbyte/sugar/dom'\nconst props = getTransformProperties(myCoolHTMLElement);\n// output format\n// {\n// \ttranslateX : 100,\n// \ttranslateY : 0,\n// \ttranslateZ : 0,\n//   rotateX: 0,\n//   rotateY: 0,\n//   rotateZ: 0\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getTransformProperties.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getTransformProperties.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getStyleProperty": {
                "id": "@blackbyte.sugar.js.dom.style.getStyleProperty",
                "name": "getStyleProperty",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get style from",
                        "defaultStr": ""
                    },
                    "property": {
                        "name": "property",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The css property to get",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Mixed"
                            }
                        ],
                        "raw": "Mixed"
                    },
                    "description": "The style value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get a style property on the passed element through the computed style.\nThis function try to store the actual style to not trigger more that 1 redraw\neach js execution loop.",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "beta",
                "snippet": {
                    "label": "getStyleProperty($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getStyleProperty } from '@blackbyte/sugar/dom'\nconst opacity = getStyleProperty(myCoolHTMLElement, 'opacity');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle",
                        "description": ""
                    }
                ],
                "filename": "getStyleProperty.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getStyleProperty.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getScaleProperty": {
                "id": "@blackbyte.sugar.js.dom.style.getScaleProperty",
                "name": "getScaleProperty",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get the properties from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The scale property"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get a scale properties of an HTMLElement",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "stable",
                "snippet": {
                    "label": "getScaleProperty($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getScaleProperty } from '@blackbyte/sugar/dom'\nconst props = getScaleProperty(myCoolHTMLElement);\n// output format\n// 2"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getScaleProperty.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getScaleProperty.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getRotateProperties": {
                "id": "@blackbyte.sugar.js.dom.style.getRotateProperties",
                "name": "getRotateProperties",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get the properties from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            },
                            {
                                "type": "undefined"
                            }
                        ],
                        "raw": "Object|undefined"
                    },
                    "description": "The translate x,y and z properties"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get a rotate properties of an HTMLElement",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "stable",
                "snippet": {
                    "label": "getRotateProperties($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getRotateProperties } from '@blackbyte/sugar/dom'\nconst props = getRotateProperties(myCoolHTMLElement);\n// output format\n// {\n// \tx : 100,\n// \ty : 0,\n// \tz : 0\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getRotateProperties.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getRotateProperties.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getKeyframesDeclarations": {
                "id": "@blackbyte.sugar.js.dom.style.getKeyframesDeclarations",
                "name": "getKeyframesDeclarations",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "animationName": {
                        "name": "animationName",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "CSS animationName to search KeyFrameRule declarations for",
                        "defaultStr": ""
                    },
                    "rules": {
                        "name": "rules",
                        "type": {
                            "types": [
                                {
                                    "type": "array"
                                }
                            ],
                            "raw": "array"
                        },
                        "description": "Array of CSSRules to search",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "CSSKeyframeRule"
                            }
                        ],
                        "raw": "CSSKeyframeRule"
                    },
                    "description": "Array of matching KeyFrameRules"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get all the keyframes declarations from the passed rules",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "stable",
                "snippet": {
                    "label": "getKeyframesDeclarations($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getKeyframesDeclarations } from '@blackbyte/sugar/dom';\ngetKeyframesDeclarations('myCoolAnimation', [myCoolCssRules]);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/marionebl/jogwheel/blob/main/source/library/get-keyframe-declarations.js",
                        "description": ""
                    }
                ],
                "filename": "getKeyframesDeclarations.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getKeyframesDeclarations.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getDefinedStyles": {
                "id": "@blackbyte.sugar.js.dom.style.getDefinedStyles",
                "name": "getDefinedStyles",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "properties": {
                        "name": "properties",
                        "type": {
                            "types": [
                                {
                                    "type": "CSS2Properties"
                                }
                            ],
                            "raw": "CSS2Properties"
                        },
                        "description": "CSS2Properties object to return defined styles from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "object"
                            }
                        ],
                        "raw": "object"
                    },
                    "description": "plain object containing defined styles as key value pairs"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Gets map of defined styles from CSS2Properties object",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "stable",
                "example": [
                    {
                        "language": "js",
                        "code": "import { getDefinedStyles } from '@blackbyte/sugar/dom';"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/marionebl/jogwheel/blob/main/source/library/get-defined-styles.js",
                        "description": ""
                    }
                ],
                "filename": "getDefinedStyles.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getDefinedStyles.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getCssRulesFromStylesheet": {
                "id": "@blackbyte.sugar.js.dom.style.getCssRulesFromStylesheet",
                "name": "getCssRulesFromStylesheet",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "stylesheet": {
                        "name": "stylesheet",
                        "type": {
                            "types": [
                                {
                                    "type": "CSSStyleSheet"
                                }
                            ],
                            "raw": "CSSStyleSheet"
                        },
                        "description": "The stylesheet from which to get the CSSRules",
                        "defaultStr": ""
                    },
                    "recursive": {
                        "name": "recursive",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to get rules from imported css or not",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "array",
                                "of": [
                                    "CSSRule"
                                ]
                            }
                        ],
                        "raw": "CSSRule[]"
                    },
                    "description": "Array of CSSRules"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get all the CSSRules of the passed stylesheet",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "beta",
                "snippet": {
                    "label": "getCssRulesFromStylesheet($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getCssRulesFromStylesheet } from '@blackbyte/sugar/dom';\ngetCssRulesFromStylesheet(myStylesheet);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/marionebl/jogwheel/blob/main/source/library/get-css-rules.js",
                        "description": ""
                    }
                ],
                "filename": "getCssRulesFromStylesheet.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getCssRulesFromStylesheet.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getCssDeclarations": {
                "id": "@blackbyte.sugar.js.dom.style.getCssDeclarations",
                "name": "getCssDeclarations",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "typeName": {
                        "name": "typeName",
                        "type": {
                            "types": [
                                {
                                    "type": "string"
                                }
                            ],
                            "raw": "string"
                        },
                        "description": "CSSRule type to search for, valid types: unknown, style, charset, import, media, fontface, page, keyframes, keyframe, namespace, counter, supports, document, fontfeature, viewport, region",
                        "default": "'style'",
                        "defaultStr": "'style'"
                    },
                    "rules": {
                        "name": "rules",
                        "type": {
                            "types": [
                                {
                                    "type": "array"
                                }
                            ],
                            "raw": "array"
                        },
                        "description": "Array of CSSRules to search",
                        "default": [],
                        "defaultStr": "[]"
                    },
                    "predecate": {
                        "name": "predecate",
                        "type": {
                            "types": [
                                {
                                    "type": "function"
                                }
                            ],
                            "raw": "function"
                        },
                        "description": "Predecate function to filter matches",
                        "default": "Boolean",
                        "defaultStr": "Boolean"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "array"
                            }
                        ],
                        "raw": "array"
                    },
                    "description": "Array of matching CSSRules"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get all the CSSRules of the passed type",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "beta",
                "snippet": {
                    "label": "getCssDeclarations()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getCssDeclarations } from '@blackbyte/sugar/dom';\ngetCssDeclarations('style', [myCoolCssRules]);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://github.com/marionebl/jogwheel/blob/main/source/library/get-declarations.js",
                        "description": ""
                    }
                ],
                "filename": "getCssDeclarations.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getCssDeclarations.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.style.getAnimationProperties": {
                "id": "@blackbyte.sugar.js.dom.style.getAnimationProperties",
                "name": "getAnimationProperties",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get the properties from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "The animation properties"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get the css animation properties from an HTMLElement in an object format",
                "namespace": "@blackbyte.sugar.js.dom.style",
                "status": "beta",
                "snippet": {
                    "label": "getAnimationProperties($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getAnimationProperties } from '@blackbyte/sugar/dom'\nconst props = getAnimationProperties(myCoolHTMLElement);\n// output format\n// {\n// \tname : ['animation1'],\n// \tduration : [200],\n// \tdelay : [0],\n// \ttimingFunction : ['linear'],\n// \titerationCount : [1],\n// \tdirection : ['forward'],\n// \ttotalDuration : 200\n// }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getAnimationProperties.ts",
                "extension": "ts",
                "relPath": "src/js/dom/style/getAnimationProperties.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.selection.clearSelection": {
                "id": "@blackbyte.sugar.js.dom.selection.clearSelection",
                "name": "clearSelection",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Clear the current selection in the DOM even in inputs, etc...\n*",
                "namespace": "@blackbyte.sugar.js.dom.selection",
                "status": "stable",
                "snippet": {
                    "label": "clearSelection()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { clearSelection } from '@blackbyte/sugar/dom';\nclearSelection();"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "clearSelection.ts",
                "extension": "ts",
                "relPath": "src/js/dom/selection/clearSelection.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.querySelectorUp": {
                "id": "@blackbyte.sugar.js.dom.query.querySelectorUp",
                "name": "querySelectorUp",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$from": {
                        "name": "$from",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to start from",
                        "defaultStr": ""
                    },
                    "selector": {
                        "name": "selector",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "String|Function"
                        },
                        "description": "A css selector to search for or a check function that will be used",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            }
                        ],
                        "raw": "HTMLElement"
                    },
                    "description": "The element found or null"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Go up the dom three to find the first element that matches the passed selector",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "querySelectorUp($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { querySelectorUp } from '@blackbyte/sugar/dom'\nconst closestElm =  querySelectorUp(myCoolElement, '.my-cool-class');\nif (closestElm) {\n\t\t// we have found en element that matches the selector\n}\n// the selector param can be a function that need to return either true or false like so:\n querySelectorUp(myCoolElement, (elm) => {\n  return elm.hasAttribute('my-cool-attribute')\n})"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "querySelectorUp.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/querySelectorUp.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.querySelectorLive": {
                "id": "@blackbyte.sugar.js.dom.query.querySelectorLive",
                "name": "querySelectorLive",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "selector": {
                        "name": "selector",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The css selector that we are interested in",
                        "defaultStr": ""
                    },
                    "cb": {
                        "name": "cb",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to call with the newly added node",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TQuerySelectorLiveSettings"
                                }
                            ],
                            "raw": "TQuerySelectorLiveSettings"
                        },
                        "description": "An optional settings object to specify things like the rootNode to monitor, etc...",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "TQuerySelectorLiveApi"
                            }
                        ],
                        "raw": "TQuerySelectorLiveApi"
                    },
                    "description": "An object with a cancel method to stop the query listening"
                },
                "setting": {
                    "rootNode": {
                        "name": "rootNode",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The root node from where to observe childs",
                        "default": "document",
                        "defaultStr": "document"
                    },
                    "afterFirst": {
                        "name": "afterFirst",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "A function to call after the first node has been found",
                        "defaultStr": "undefined"
                    },
                    "firstOnly": {
                        "name": "firstOnly",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "If true, the query will stop after the first node has been found",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "when": {
                        "name": "when",
                        "type": {
                            "types": [
                                {
                                    "type": "TWhenTrigger"
                                }
                            ],
                            "raw": "TWhenTrigger"
                        },
                        "description": "A when trigger to wait for before executing the callback. Can be direct, inViewport, nearViewport, enterViewport, outOfViewport, interact, visible, domReady, stylesheetsReady or animationEnd",
                        "defaultStr": "undefined"
                    },
                    "disconnectedCallback": {
                        "name": "disconnectedCallback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "A function to call when a node is disconnected from the dom",
                        "defaultStr": "undefined"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Observe the dom to get all the elements that matches a passed css selector at any point in time.\nBe warned that this use the mutation observer API and will monitor all the document for new nodes. Make sure to use it\nwhen you don&#39;t have the chance to use the custom elements API instead",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "querySelectorLive($1, $2)",
                    "code": "querySelectorLive($1, \\$elm => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { querySelectorLive } from '@blackbyte/sugar/dom'\nconst query = querySelectorLive('.my-cool-item', (node, api) => {\n\t    // do something here with the detected node\n     // call api.cancel if you want to stop listening for this selector\n     api.cancel();\n});\n// cancel the query manually when needed\nquery.cancel();"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "querySelectorLive.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/querySelectorLive.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.querySelectorAll": {
                "id": "@blackbyte.sugar.js.dom.query.querySelectorAll",
                "name": "querySelectorAll",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "selector": {
                        "name": "selector",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The css selector to search",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The settings of the query",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Array}",
                                "of": [
                                    "HTMLElement"
                                ]
                            }
                        ],
                        "raw": "Array}<HTMLElement>"
                    },
                    "description": "The founded elements"
                },
                "setting": {
                    "visible": {
                        "name": "visible",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want only the visible nodes",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "inViewport": {
                        "name": "inViewport",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want only the nodes that are in the viewport",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "rootNode": {
                        "name": "rootNode",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "Specify the root node from where you want to query",
                        "default": "document.body",
                        "defaultStr": "document.body"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Enhanced proxy of the Element.querySelectorAll function that let you specify\nif you want elements that are visible, or even that are in the viewport",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "querySelectorAll($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { querySelectorAll } from '@blackbyte/sugar/dom';\n// simple query\nconst elms = querySelectorAll('.a-cool-css-selector');\n\n// get elements that are in the viewport\nconst elms = querySelectorAll('.a-cool-css-selector', {\n\t\tinViewport : true\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "querySelectorAll.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/querySelectorAll.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.querySelector": {
                "id": "@blackbyte.sugar.js.dom.query.querySelector",
                "name": "querySelector",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "selector": {
                        "name": "selector",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The css selector to search",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The settings of the query",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            }
                        ],
                        "raw": "HTMLElement"
                    },
                    "description": "The founded element"
                },
                "setting": {
                    "visible": {
                        "name": "visible",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want only the visible nodes",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "inViewport": {
                        "name": "inViewport",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want only the nodes that are in the viewport",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "rootNode": {
                        "name": "rootNode",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "Specify the root node from where you want to query",
                        "default": "document.body",
                        "defaultStr": "document.body"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Enhanced proxy of the Element.querySelector function that let you specify\nif you want an element that is visible, or even that is in the viewport",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "querySelector($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { querySelector } from '@blackbyte/sugar/dom';\n// simple query\nconst elm = querySelector('.a-cool-css-selector');\n\n// get an element that is in the viewport\nconst elm = querySelector('.a-cool-css-selector', {\n\t\tinViewport : true\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "querySelector.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/querySelector.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.previousElement": {
                "id": "@blackbyte.sugar.js.dom.query.previousElement",
                "name": "previousElement",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to start on",
                        "defaultStr": ""
                    },
                    "selector": {
                        "name": "selector",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "A css selector to search for",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            },
                            {
                                "type": "undefined"
                            }
                        ],
                        "raw": "HTMLElement|undefined"
                    },
                    "description": "The element found or undefined"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Browse the passed element previous siblings to find the first element that matches the passed selector",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "previousElement($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { previousElement } from '@blackbyte/sugar/dom'\nconst previousElm = previousElement(myCoolElement, '.my-cool-class');\nif (previousElm) {\n\t\t// we have found en element that matches the selector\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "previousElement.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/previousElement.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.nextElement": {
                "id": "@blackbyte.sugar.js.dom.query.nextElement",
                "name": "nextElement",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to start on",
                        "defaultStr": ""
                    },
                    "selector": {
                        "name": "selector",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "A css selector to search for",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            },
                            {
                                "type": "undefined"
                            }
                        ],
                        "raw": "HTMLElement|undefined"
                    },
                    "description": "The element found or undefined"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Browse the passed element next siblings to find the first element that matches the passed selector",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "nextElement($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { nextElement } from '@blackbyte/sugar/dom'\nconst nextElm =  nextElement(myCoolElement, '.my-cool-class');\nif (nextElm) {\n\t\t// we have found en element that matches the selector\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "nextElement.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/nextElement.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.nearestElement": {
                "id": "@blackbyte.sugar.js.dom.query.nearestElement",
                "name": "nearestElement",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$from": {
                        "name": "$from",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element from which to start the search",
                        "defaultStr": ""
                    },
                    "$elements": {
                        "name": "$elements",
                        "type": {
                            "types": [
                                {
                                    "type": "array",
                                    "of": [
                                        "HTMLElement"
                                    ]
                                }
                            ],
                            "raw": "HTMLElement[]"
                        },
                        "description": "The elements list to search in",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TNearestElementSettings"
                                }
                            ],
                            "raw": "TNearestElementSettings"
                        },
                        "description": "Some settings to configure your search",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            }
                        ],
                        "raw": "HTMLElement"
                    },
                    "description": "The nearest element found"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get the nearest element from the passed one from the passed elements list.\nYou can pass a direction like &quot;top&quot;, &quot;right&quot;, &quot;bottom&quot;, &quot;left&quot; to specify\nthe direction you want to search the nearest element.",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "nearestElement($1, $2, $3)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { nearestElement } from '@blackbyte/sugar/dom'\nnearestElement(myCoolElement, document.querySelectorAll('.my-cool-elements'), {\n     direction: 'top'\n});"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://olivier.bossel@gmail.com"
                },
                "filename": "nearestElement.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/nearestElement.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.matches": {
                "id": "@blackbyte.sugar.js.dom.query.matches",
                "name": "matches",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to check",
                        "defaultStr": ""
                    },
                    "selector": {
                        "name": "selector",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The selector to check on the element",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Boolean"
                            }
                        ],
                        "raw": "Boolean"
                    },
                    "description": "If the element match the selector or not"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Polyfill for the Element.matches function",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "matches($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { matches } from '@blackbyte/sugar/dom'\nif (matches(myCoolHTMLElement, '.my-cool-css-selector')) {\n\t\t// the element match the selector\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://developer.mozilla.org/en/docs/Web/API/Element/matches",
                        "description": ""
                    }
                ],
                "filename": "matches.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/matches.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.elementsInViewport": {
                "id": "@blackbyte.sugar.js.dom.query.elementsInViewport",
                "name": "elementsInViewport",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Object"
                                }
                            ],
                            "raw": "Object"
                        },
                        "description": "The settings of the query",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            }
                        ],
                        "raw": "HTMLElement"
                    },
                    "description": "The founded element"
                },
                "setting": {
                    "rootNode": {
                        "name": "rootNode",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "Specify the root node from where you want to query",
                        "default": "document.body",
                        "defaultStr": "document.body"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get all the elements that are in viewport",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "elementsInViewport($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { elementsInViewport } from '@blackbyte/sugar/dom';\nconst $elements = elementsInViewport();"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "elementsInViewport.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/elementsInViewport.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.closestScrollableElement": {
                "id": "@blackbyte.sugar.js.dom.query.closestScrollableElement",
                "name": "closestScrollableElement",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to start on",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            },
                            {
                                "type": "undefined"
                            }
                        ],
                        "raw": "HTMLElement|undefined"
                    },
                    "description": "The element found or undefined"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Go up the dom three to find the first element that is scrollable.\nThe default scrollable element is the body",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "closestScrollableElement($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { closestScrollableElement } from '@blackbyte/sugar/dom';\nclosestScrollableElement($myElement);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "closestScrollableElement.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/closestScrollableElement.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.closestNotVisibleElement": {
                "id": "@blackbyte.sugar.js.dom.query.closestNotVisibleElement",
                "name": "closestNotVisibleElement",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to start on",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            },
                            {
                                "type": "undefined"
                            }
                        ],
                        "raw": "HTMLElement | undefined"
                    },
                    "description": "The element found or undefined"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Go up the dom three to find the first element that is not visible.\nNot visible mean that has either an opacity to 0, a visibility to hidden or a display to none",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "closestNotVisibleElement($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { closestNotVisibleElement } from '@blackbyte/sugar/dom'\nconst closestElm =  closestNotVisibleElement(myCoolElement);\nif (closestElm) {\n\t\t// we have found en element that is not visible\n}"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "closestNotVisibleElement.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/closestNotVisibleElement.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.query.closestElement": {
                "id": "@blackbyte.sugar.js.dom.query.closestElement",
                "name": "closestElement",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to start on",
                        "defaultStr": ""
                    },
                    "selector": {
                        "name": "selector",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "String|Function"
                        },
                        "description": "A css selector to search for or a check function that will be used",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            }
                        ],
                        "raw": "HTMLElement"
                    },
                    "description": "The element found or null"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Go up the dom three to find the first element that matches the passed selector",
                "namespace": "@blackbyte.sugar.js.dom.query",
                "status": "stable",
                "snippet": {
                    "label": "closestElement($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { closestElement } from '@blackbyte/sugar/dom'\nconst closestElm =  closestElement(myCoolElement, '.my-cool-class');\nif (closestElm) {\n\t\t// we have found en element that matches the selector\n}\n// the selector param can be a function that need to return either true or false like so:\nclosest(myCoolElement, (elm) => {\n  return elm.hasAttribute('my-cool-attribute')\n})"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "closestElement.ts",
                "extension": "ts",
                "relPath": "src/js/dom/query/closestElement.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.position.positionFromEvent": {
                "id": "@blackbyte.sugar.js.dom.position.positionFromEvent",
                "name": "positionFromEvent",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "e": {
                        "name": "e",
                        "type": {
                            "types": [
                                {
                                    "type": "MouseEvent"
                                },
                                {
                                    "type": "TouchEvent"
                                }
                            ],
                            "raw": "MouseEvent|TouchEvent"
                        },
                        "description": "The event to get the position from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "x: number; y: number;"
                            }
                        ],
                        "raw": "x: number; y: number;"
                    },
                    "description": "The absolute position of the event"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get the position from an event &quot;touchstart&quot;, &quot;touchmove&quot;, &quot;touchend&quot;, &quot;mousedown&quot;, &quot;mousemove&quot; or &quot;mouseup&quot;.",
                "namespace": "@blackbyte.sugar.js.dom.position",
                "status": "stable",
                "snippet": {
                    "label": "positionFromEvent($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { positionFromEvent } from '@blackbyte/sugar/dom'\npositionFromEvent(e);\n// output : { x, 230, y: 122 }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "positionFromEvent.ts",
                "extension": "ts",
                "relPath": "src/js/dom/position/positionFromEvent.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.detect.onSwipe": {
                "id": "@blackbyte.sugar.js.dom.detect.onSwipe",
                "name": "onSwipe",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement on which to detect the swipe",
                        "defaultStr": ""
                    },
                    "cb": {
                        "name": "cb",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to call on swipe. The callback function has as parameter an object that containthe swipe direction like left, right, up and down",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TOnSwipeSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TOnSwipeSettings>"
                        },
                        "description": "Some settings to configure your swipe detection",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "threshold": {
                        "name": "threshold",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The swipe threshold",
                        "default": 100,
                        "defaultStr": "100"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect swipes gestures on touch devices.",
                "namespace": "@blackbyte.sugar.js.dom.detect",
                "status": "stable",
                "snippet": {
                    "label": "onSwipe($1, $2)",
                    "code": "onSwipe($1, swipe => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { onSwipe } from '@blackbyte/sugar/dom'\nonSwipe(myCoolElm, (swipe) => {\n\t// check the swipe direction\n\tif (swipe.left) {\n\t\t// do something...\n\t}\n\t// support : left, right, up, down\n\t// etc...\n}, {\n\tthreshold : 50\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "enhance the typing of the callback"
                    },
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://gist.github.com/SleepWalker/da5636b1abcbaff48c4d",
                        "description": ""
                    }
                ],
                "filename": "onSwipe.ts",
                "extension": "ts",
                "relPath": "src/js/dom/on/onSwipe.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.detect.onScrollEnd": {
                "id": "@blackbyte.sugar.js.dom.detect.onScrollEnd",
                "name": "onScrollEnd",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to listen on",
                        "defaultStr": ""
                    },
                    "callback": {
                        "name": "callback",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to call when scroll end is detected",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TOnScrollEndSettings"
                                }
                            ],
                            "raw": "TOnScrollEndSettings"
                        },
                        "description": "Some settings like offset, etc...",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "An offset to detect earlier the end of the scroll",
                        "default": 20,
                        "defaultStr": "20"
                    },
                    "once": {
                        "name": "once",
                        "type": {
                            "types": [
                                {
                                    "type": "boolean"
                                }
                            ],
                            "raw": "boolean"
                        },
                        "description": "true if you want to detect the scroll end just once",
                        "default": false,
                        "defaultStr": "false"
                    },
                    "times": {
                        "name": "times",
                        "type": {
                            "types": [
                                {
                                    "type": "number"
                                }
                            ],
                            "raw": "number"
                        },
                        "description": "Specify a number of times to detect the scroll end",
                        "default": -1,
                        "defaultStr": "-1"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function simply listen for scroll on the passed element and call the passed callback\nwhen reaching the end of it.",
                "namespace": "@blackbyte.sugar.js.dom.detect",
                "status": "stable",
                "snippet": {
                    "label": "onScrollEnd($1, $2)",
                    "code": "onScrollEnd($1, () => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { onScrollEnd } from '@blackbyte/sugar/dom';\nonScrollEnd($elm, () => {\n     // do something\n}, {\n   offset: 50\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "onScrollEnd.ts",
                "extension": "ts",
                "relPath": "src/js/dom/on/onScrollEnd.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.detect.onDrag": {
                "id": "@blackbyte.sugar.js.dom.detect.onDrag",
                "name": "onDrag",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement on which to detect the swipe",
                        "defaultStr": ""
                    },
                    "cb": {
                        "name": "cb",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "The function to call on swipe. The callback function has as parameter an object that containthe swipe direction like left, right, up and down",
                        "defaultStr": ""
                    },
                    "threshold": {
                        "name": "threshold",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The swipe threshold",
                        "default": 100,
                        "defaultStr": "100"
                    }
                },
                "setting": {
                    "maxSpeed": {
                        "name": "maxSpeed",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The maximum speed",
                        "default": 0.01,
                        "defaultStr": "0.01"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Detect drag &quot;gesture&quot; with the mouse or touch",
                "namespace": "@blackbyte.sugar.js.dom.detect",
                "status": "stable",
                "snippet": {
                    "label": "onDrag($1, $2)",
                    "code": "onDrag($1, drag => {\n    $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { onDrag } from '@blackbyte/sugar/dom'\nonDrag($myElement, (drag) => {\n   // do something...\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "onDrag.ts",
                "extension": "ts",
                "relPath": "src/js/dom/on/onDrag.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.offset.offsetFromViewport": {
                "id": "@blackbyte.sugar.js.dom.offset.offsetFromViewport",
                "name": "offsetFromViewport",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get the offset from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "top: number; left: number;"
                            }
                        ],
                        "raw": "top: number; left: number;"
                    },
                    "description": "The offset top and left object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get the offset top and left of the passed element from the document top left point",
                "namespace": "@blackbyte.sugar.js.dom.offset",
                "status": "stable",
                "snippet": {
                    "label": "offsetFromViewport($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { offsetFromViewport } from '@blackbyte/sugar/dom'\nconst offsetFromViewport = offset(myCoolElement);\n// output : { top : 200, left : 300 }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "offsetFromViewport.ts",
                "extension": "ts",
                "relPath": "src/js/dom/offset/offsetFromViewport.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.offset.offsetFromParent": {
                "id": "@blackbyte.sugar.js.dom.offset.offsetFromParent",
                "name": "offsetFromParent",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to get the offset from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "top: number; left: number;"
                            }
                        ],
                        "raw": "top: number; left: number;"
                    },
                    "description": "The offset top and left object"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get the offset top and left of the passed element from his parent top left point",
                "namespace": "@blackbyte.sugar.js.dom.offset",
                "status": "stable",
                "snippet": {
                    "label": "offsetFromParent($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { offsetFromParent } from '@blackbyte/sugar/dom'\nconst offsetFromParentElm = offsetFromParent(myCoolElement);\n// output : { top : 200, left : 300 }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "offsetFromParent.ts",
                "extension": "ts",
                "relPath": "src/js/dom/offset/offsetFromParent.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.input.cursorToEnd": {
                "id": "@blackbyte.sugar.js.dom.input.cursorToEnd",
                "name": "cursorToEnd",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$input": {
                        "name": "$input",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLFormElement"
                                }
                            ],
                            "raw": "HTMLFormElement"
                        },
                        "description": "The input to process",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Place the cursor to the end of the input",
                "namespace": "@blackbyte.sugar.js.dom.input",
                "status": "stable",
                "snippet": {
                    "label": "cursorToEnd($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { cursorToEnd } from '@blackbyte/sugar/dom';\ncursorToEnd($input);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://olivierboss$input.com"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/a/56416714",
                        "description": ""
                    }
                ],
                "filename": "cursorToEnd.ts",
                "extension": "ts",
                "relPath": "src/js/dom/input/cursorToEnd.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.input.autoResize": {
                "id": "@blackbyte.sugar.js.dom.input.autoResize",
                "name": "autoResize",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$textarea": {
                        "name": "$textarea",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLFormElement"
                                }
                            ],
                            "raw": "HTMLFormElement"
                        },
                        "description": "The textarea to auto resize",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Automatically resize a textarea height",
                "namespace": "@blackbyte.sugar.js.dom.input",
                "status": "stable",
                "snippet": {
                    "label": "autoResize($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { autoResize } from '@blackbyte/sugar/dom';\nautoResize($textarea);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://olivierboss$input.com"
                },
                "see": [
                    {
                        "url": "https://stackoverflow.com/a/56416714",
                        "description": ""
                    }
                ],
                "filename": "autoResize.ts",
                "extension": "ts",
                "relPath": "src/js/dom/input/autoResize.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.inject.injectStylesheet": {
                "id": "@blackbyte.sugar.js.dom.inject.injectStylesheet",
                "name": "injectStylesheet",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "href": {
                        "name": "href",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "THe url to the stylesheet",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise when the stylesheet is loaded with the link element as parameter"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Append a stylesheet link to the page head",
                "namespace": "@blackbyte.sugar.js.dom.inject",
                "status": "stable",
                "snippet": {
                    "label": "injectStylesheet($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { injectStylesheet } from '@blackbyte/sugar/dom'\ninjectStylesheet('/dist/css/style.css')"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "injectStylesheet.ts",
                "extension": "ts",
                "relPath": "src/js/dom/inject/injectStylesheet.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.inject.injectStyle": {
                "id": "@blackbyte.sugar.js.dom.inject.injectStyle",
                "name": "injectStyle",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "style": {
                        "name": "style",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The style to inject in DOM",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TInjectStyleSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TInjectStyleSettings>"
                        },
                        "description": "Some settings to configure your injection",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLStyleElement"
                            }
                        ],
                        "raw": "HTMLStyleElement"
                    },
                    "description": "The injected HTMLStyleElement node"
                },
                "setting": {
                    "id": {
                        "name": "id",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "An id for the injected style tag",
                        "defaultStr": ""
                    },
                    "rootNode": {
                        "name": "rootNode",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "A node in which to inject the style",
                        "defaultStr": "undefined"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Inject a passed style string in the DOM",
                "namespace": "@blackbyte.sugar.js.dom.inject",
                "status": "stable",
                "snippet": {
                    "label": "injectStyle($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { injectStyle } from '@blackbyte/sugar/dom';\n injectStyle('a { color: red; }');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "injectStyle.ts",
                "extension": "ts",
                "relPath": "src/js/dom/inject/injectStyle.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.inject.injectScript": {
                "id": "@blackbyte.sugar.js.dom.inject.injectScript",
                "name": "injectScript",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "src": {
                        "name": "src",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The script src to load",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise resolved with the script tag when it has fully loaded"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Append a script tag either to the head or the body",
                "namespace": "@blackbyte.sugar.js.dom.inject",
                "status": "stable",
                "snippet": {
                    "label": "injectScript($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { injectScript } from '@blackbyte/sugar/dom'\n injectScript('dist/js/app.js')"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "injectScript.ts",
                "extension": "ts",
                "relPath": "src/js/dom/inject/injectScript.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.inject.injectIframeContent": {
                "id": "@blackbyte.sugar.js.dom.inject.injectIframeContent",
                "name": "injectIframeContent",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$iframe": {
                        "name": "$iframe",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLIFrameElement"
                                }
                            ],
                            "raw": "HTMLIFrameElement"
                        },
                        "description": "The iframe element to inject content into",
                        "defaultStr": ""
                    },
                    "html": {
                        "name": "html",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The html to inject",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Inject some content into an iframe",
                "namespace": "@blackbyte.sugar.js.dom.inject",
                "status": "stable",
                "snippet": {
                    "label": "injectIframeContent($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { injectIframeContent } from '@blackbyte/sugar/dom'\n injectIframeContent($myIframe, '<html>...</html>');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "injectIframeContent.ts",
                "extension": "ts",
                "relPath": "src/js/dom/inject/injectIframeContent.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.inject.injectHtml": {
                "id": "@blackbyte.sugar.js.dom.inject.injectHtml",
                "name": "injectHtml",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to inject content into",
                        "defaultStr": ""
                    },
                    "html": {
                        "name": "html",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The html to inject",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Inject some html into a element and make sure that the scripts are executed",
                "namespace": "@blackbyte.sugar.js.dom.inject",
                "status": "stable",
                "snippet": {
                    "label": "injectHtml($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { injectHtml } from '@blackbyte/sugar/dom'\n injectHtml('<html>...</html>`, $myElement);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "injectHtml.ts",
                "extension": "ts",
                "relPath": "src/js/dom/inject/injectHtml.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.iframe.iframeAutoSize": {
                "id": "@blackbyte.sugar.js.dom.iframe.iframeAutoSize",
                "name": "iframeAutoSize",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "obj": {
                        "name": "obj",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The iframe element to resize",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "TIFrameAutoSizeSettings"
                                }
                            ],
                            "raw": "TIFrameAutoSizeSettings"
                        },
                        "description": "Some settings to configure your iframe auto size",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "width": {
                        "name": "width",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to resize the width of the iframe",
                        "default": true,
                        "defaultStr": "true"
                    },
                    "height": {
                        "name": "height",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to resize the height of the iframe",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to resize an iframe to fit its content.",
                "namespace": "@blackbyte.sugar.js.dom.iframe",
                "status": "stable",
                "snippet": {
                    "label": "iframeAutoSize($1)",
                    "code": "iframeAutoSize($1, $2);"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { iframeAutoSize } from '@blackbyte/sugar/dom';\niframeAutoSize($1, $2);"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "iframeAutoSize.ts",
                "extension": "ts",
                "relPath": "src/js/dom/iframe/iframeAutoSize.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.generate.generateIdFromForm": {
                "id": "@blackbyte.sugar.js.dom.generate.generateIdFromForm",
                "name": "generateIdFromForm",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$form": {
                        "name": "$form",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLFormElement"
                                }
                            ],
                            "raw": "HTMLFormElement"
                        },
                        "description": "The form element to generate the uniqid from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "A uniqid"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function generate a uniqid based on the form element passed using these rules:\n\n1. If the form has an action attribute, this will be used to generate the uniqid.\n2. If not, the function will generate a uniqid based on the form attributes and named controls.\n\nNote that the named controlls will be sorted before generating the uniqid.",
                "namespace": "@blackbyte.sugar.js.dom.generate",
                "status": "stable",
                "snippet": {
                    "label": "generateIdFromForm()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { generateIdFromForm } from '@blackbyte/sugar/dom';\nconst id = generateIdFromForm($myForm); // => a md5 hash id"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "generateIdFromForm.ts",
                "extension": "ts",
                "relPath": "src/js/dom/generate/generateIdFromForm.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.form.getFormValues": {
                "id": "@blackbyte.sugar.js.dom.form.getFormValues",
                "name": "getFormValues",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$form": {
                        "name": "$form",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLFormElement"
                                }
                            ],
                            "raw": "HTMLFormElement"
                        },
                        "description": "The form element to get the values from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "An object with all the values"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function take a form element and return an object with all the values",
                "namespace": "@blackbyte.sugar.js.dom.form",
                "status": "stable",
                "snippet": {
                    "label": "getFormValues($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getFormValues } from '@blackbyte/sugar/dom'\nconst values = getFormValues(myForm);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getFormValues.ts",
                "extension": "ts",
                "relPath": "src/js/dom/form/getFormValues.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.form.disablePasswordManagerAttributes": {
                "id": "@blackbyte.sugar.js.dom.form.disablePasswordManagerAttributes",
                "name": "disablePasswordManagerAttributes",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Object"
                            }
                        ],
                        "raw": "Object"
                    },
                    "description": "An object of attributes to apply on a form element to disable the password manager autocomplete feature."
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function return an object of attributes to apply on a form element to disable the password manager autocomplete feature.\nIt support these password managers:\n- 1Password\n- LastPass\n- Bitwarden\n- Dashlane\n- Browser&#39;s built-in password manager",
                "namespace": "@blackbyte.sugar.js.dom.form",
                "status": "stable",
                "snippet": {
                    "label": "disablePasswordManagerAttributes()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { disablePasswordManagerAttributes } from '@blackbyte/sugar/dom'\nconst attrs = disablePasswordManagerAttributes();"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "disablePasswordManagerAttributes.ts",
                "extension": "ts",
                "relPath": "src/js/dom/form/disablePasswordManagerAttributes.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.event.viewportEvents": {
                "id": "@blackbyte.sugar.js.dom.event.viewportEvents",
                "name": "viewportEvents",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element to monitor",
                        "defaultStr": ""
                    },
                    "$settings": {
                        "name": "$settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "TViewportEventsSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<TViewportEventsSettings>"
                        },
                        "description": "Some settings to configure your detector",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "HTMLElement"
                            }
                        ],
                        "raw": "HTMLElement"
                    },
                    "description": "The passed HTMLElement"
                },
                "setting": {
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "An offset to detect the enter/leave earlier or later",
                        "default": 25,
                        "defaultStr": "25"
                    },
                    "once": {
                        "name": "once",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want to event to be dispatched only once",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Monitor when the passed element enter or exit the viewport",
                "namespace": "@blackbyte.sugar.js.dom.event",
                "status": "stable",
                "snippet": {
                    "label": "viewportEvents($1)",
                    "code": "viewportEvents($1).addEventListener('viewport.enter', (e) => {\n     $2\n});"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { viewportEvents } from '@blackbyte/sugar/dom';\nviewportEvents($1).addEventListener('viewport.enter', (e) => {\n     // do something\n});"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "viewportEvents.ts",
                "extension": "ts",
                "relPath": "src/js/dom/event/viewportEvents.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.distance.scrollTop": {
                "id": "@blackbyte.sugar.js.dom.distance.scrollTop",
                "name": "scrollTop",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The amount of scroll top that the user as made in the page"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Return the amount of scroll top that the user as made in the page",
                "namespace": "@blackbyte.sugar.js.dom.distance",
                "status": "stable",
                "snippet": {
                    "label": "scrollTop()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { scrollTop } from '@blackbyte/sugar/dom';\nscrollTop();"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "scrollTop.ts",
                "extension": "ts",
                "relPath": "src/js/dom/distance/scrollTop.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.distance.scrollLeft": {
                "id": "@blackbyte.sugar.js.dom.distance.scrollLeft",
                "name": "scrollLeft",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get the amount of scroll left",
                "namespace": "@blackbyte.sugar.js.dom.distance",
                "status": "stable",
                "snippet": {
                    "label": "scrollLeft()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { scrollLeft } from '@blackbyte/sugar/dom'\nscrollLeft() // 40"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://olivier.bossel@gmail.com"
                },
                "filename": "scrollLeft.ts",
                "extension": "ts",
                "relPath": "src/js/dom/distance/scrollLeft.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.distance.distanceFromElementTopToViewportTop": {
                "id": "@blackbyte.sugar.js.dom.distance.distanceFromElementTopToViewportTop",
                "name": "distanceFromElementTopToViewportTop",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element you want to get the distance from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The calculated distance"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function take an element as parameter and returns you to distance it has\nfrom the element top to the viewport top in pixels",
                "namespace": "@blackbyte.sugar.js.dom.distance",
                "status": "stable",
                "snippet": {
                    "label": "distanceFromElementTopToViewportTop($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { distanceFromElementTopToViewportTop } from '@blackbyte/sugar/dom';\ndistanceFromElementTopToViewportTop(myElement); // => 23"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "distanceFromElementTopToViewportTop.ts",
                "extension": "ts",
                "relPath": "src/js/dom/distance/distanceFromElementTopToViewportTop.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.distance.distanceFromElementTopToViewportBottom": {
                "id": "@blackbyte.sugar.js.dom.distance.distanceFromElementTopToViewportBottom",
                "name": "distanceFromElementTopToViewportBottom",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "elm": {
                        "name": "elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element you want to get the distance from",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The calculated distance"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function take an element as parameter and returns you to distance it has\nfrom the element top to the viewport bottom in pixels",
                "namespace": "@blackbyte.sugar.js.dom.distance",
                "status": "stable",
                "snippet": {
                    "label": "distanceFromElementTopToViewportBottom($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { distanceFromElementTopToViewportBottom } from '@blackbyte/sugar/dom';\ndistanceFromElementTopToViewportBottom(myElement); // => 23"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "distanceFromElementTopToViewportBottom.ts",
                "extension": "ts",
                "relPath": "src/js/dom/distance/distanceFromElementTopToViewportBottom.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.css.stylesheetToString": {
                "id": "@blackbyte.sugar.js.css.stylesheetToString",
                "name": "stylesheetToString",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "stalesheet": {
                        "name": "stalesheet",
                        "type": {
                            "types": [
                                {
                                    "type": "StyleSheet"
                                },
                                {
                                    "type": "StyleSheetList"
                                }
                            ],
                            "raw": "StyleSheet|StyleSheetList"
                        },
                        "description": "The StyleSheet instance to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The css string"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function take a StyleSheet instance and convert it to a simple string",
                "namespace": "@blackbyte.sugar.js.css",
                "status": "stable",
                "snippet": {
                    "label": "stylesheetToString($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { stylesheetToString } from '@blackbyte/sugar/dom';\nstylesheetToString(document.stylesheets); // => body { ... }"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "stylesheetToString.ts",
                "extension": "ts",
                "relPath": "src/js/dom/css/stylesheetToString.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.css.reloadStylesheets": {
                "id": "@blackbyte.sugar.js.dom.css.reloadStylesheets",
                "name": "reloadStylesheets",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$root": {
                        "name": "$root",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The root element in which to reload the stylesheets",
                        "default": "document",
                        "defaultStr": "document"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function just loop on each &quot;link&quot; tags that point to some css files\nand reload them by adding a &quot;queryString&quot; with the timestamp in it\nto prevent caching",
                "namespace": "@blackbyte.sugar.js.dom.css",
                "status": "stable",
                "snippet": {
                    "label": "reloadStylesheets()"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { __reloeadStylesheets } from '@blackbyte/sugar/dom';\nreloadStylesheets();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "reloadStylesheets.ts",
                "extension": "ts",
                "relPath": "src/js/dom/css/reloadStylesheets.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.dom.css.readCssDataFrom": {
                "id": "@blackbyte.sugar.js.dom.css.readCssDataFrom",
                "name": "readCssDataFrom",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The element from which to get data",
                        "default": "document.body",
                        "defaultStr": "document.body"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to read some JSON data from the &quot;:before|:after&quot; pseudo class in the &quot;content&quot; property.",
                "namespace": "@blackbyte.sugar.js.dom.css",
                "status": "stable",
                "snippet": {
                    "label": "readCssDataFrom(document.body)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { readCssDataFrom } from '@blackbyte/sugar/dom';\nconst data = readCssDataFrom();"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "readCssDataFrom.ts",
                "extension": "ts",
                "relPath": "src/js/dom/css/readCssDataFrom.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.css.adoptStyleInShadowRoot": {
                "id": "@blackbyte.sugar.js.css.adoptStyleInShadowRoot",
                "name": "adoptStyleInShadowRoot",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "$shadowRoot": {
                        "name": "$shadowRoot",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLShadowRootElement"
                                }
                            ],
                            "raw": "HTMLShadowRootElement"
                        },
                        "description": "The shadow root you want to adopt the $context styles",
                        "defaultStr": ""
                    },
                    "$context": {
                        "name": "$context",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The context from which you want to adopt the styles",
                        "default": "document",
                        "defaultStr": "document"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "Return a promise fullfilled when the styles have been adopted"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to make a shadowRoot element adopt his host context styles",
                "namespace": "@blackbyte.sugar.js.css",
                "status": "stable",
                "snippet": {
                    "label": "adoptStyleInShadowRoot($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { adoptStyleInShadowRoot } from '@blackbyte/sugar/dom';\nconst myShadowRoot = $myElement.shadowRoot;\nawait adoptStyleInShadowRoot(myShadowRoot);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "adoptStyleInShadowRoot.ts",
                "extension": "ts",
                "relPath": "src/js/dom/css/adoptStyleInShadowRoot.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.cookie.setCookie": {
                "id": "@blackbyte.sugar.js.cookie.setCookie",
                "name": "setCookie",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The name of the cookie to set",
                        "defaultStr": ""
                    },
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Any"
                                }
                            ],
                            "raw": "Any"
                        },
                        "description": "The cookie value to set",
                        "defaultStr": ""
                    },
                    "settings": {
                        "name": "settings",
                        "type": {
                            "types": [
                                {
                                    "type": "Partial",
                                    "of": [
                                        "ISetCookieSettings"
                                    ]
                                }
                            ],
                            "raw": "Partial<ISetCookieSettings>"
                        },
                        "description": "Some settings to configure your cookie",
                        "default": {},
                        "defaultStr": "{}"
                    }
                },
                "setting": {
                    "path": {
                        "name": "path",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The path of the cookie to store",
                        "default": "/",
                        "defaultStr": "\"/\""
                    },
                    "domain": {
                        "name": "domain",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The domain on which to store the cookie",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "expires": {
                        "name": "expires",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The date when the cookie expires. If null, mean never expires",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "max-age": {
                        "name": "max-age",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The number of seconds until the cookie expires",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "secure": {
                        "name": "secure",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if the cookie is available only on HTTPS or not. true if page loaded on https, false if not",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "samesite": {
                        "name": "samesite",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                },
                                {
                                    "type": "string",
                                    "value": "strict"
                                },
                                {
                                    "type": "string",
                                    "value": "lax"
                                }
                            ],
                            "raw": "Boolean|'strict'|'lax'"
                        },
                        "description": "Controls whether or not a cookie is sent with cross-site requests, providing some protection against cross-site request forgery attacks (CSRF)",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "httpOnly": {
                        "name": "httpOnly",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Forbids JavaScript from accessing the cookie, for example, through the Document.cookie property.",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Set a cookie",
                "namespace": "@blackbyte.sugar.js.cookie",
                "status": "stable",
                "snippet": {
                    "label": "setCookie($1, $2)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { setCookie } from '@blackbyte/sugar/cookie';\nsetCookie('myCookie', 'hello world');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "setCookie.ts",
                "extension": "ts",
                "relPath": "src/js/cookie/setCookie.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.cookie.getCookie": {
                "id": "@blackbyte.sugar.js.cookie.getCookie",
                "name": "getCookie",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The cookie name to get",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "any"
                            }
                        ],
                        "raw": "any"
                    },
                    "description": "The cookie value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Get a cookie value",
                "namespace": "@blackbyte.sugar.js.cookie",
                "status": "stable",
                "snippet": {
                    "label": "getCookie($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { getCookie } from '@blackbyte/sugar/cookie';\ngetCookie('myCookie');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "getCookie.ts",
                "extension": "ts",
                "relPath": "src/js/cookie/getCookie.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.cookie.deleteCookie": {
                "id": "@blackbyte.sugar.js.cookie.deleteCookie",
                "name": "deleteCookie",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The cookie name to delete",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "any"
                            }
                        ],
                        "raw": "any"
                    },
                    "description": "The cookie value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Delete a cookie",
                "namespace": "@blackbyte.sugar.js.cookie",
                "status": "stable",
                "snippet": {
                    "label": "deleteCookie($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { deleteCookie } from '@blackbyte/sugar/cookie';\ndeleteCookie('myCookie');"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "deleteCookie.ts",
                "extension": "ts",
                "relPath": "src/js/cookie/deleteCookie.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.convert.remToPx": {
                "id": "@blackbyte.sugar.js.convert.remToPx",
                "name": "remToPx",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "rem": {
                        "name": "rem",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The rem value to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The pixel value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert rem value to a px one",
                "namespace": "@blackbyte.sugar.js.convert",
                "status": "stable",
                "snippet": {
                    "label": "remToPx($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { remToPx } from '@blackbyte/sugar/convert';\nremToPx(2);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "remToPx.ts",
                "extension": "ts",
                "relPath": "src/js/convert/remToPx.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.convert.pxToRem": {
                "id": "@blackbyte.sugar.js.convert.pxToRem",
                "name": "pxToRem",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "em": {
                        "name": "em",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The rem value to convert",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The pixel value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert rem value to a px one",
                "namespace": "@blackbyte.sugar.js.convert",
                "status": "stable",
                "snippet": {
                    "label": "pxToRem($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { pxToRem } from '@blackbyte/sugar/convert';\npxToRem(36);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pxToRem.ts",
                "extension": "ts",
                "relPath": "src/js/convert/pxToRem.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.convert.pxToEm": {
                "id": "@blackbyte.sugar.js.convert.pxToEm",
                "name": "pxToEm",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "em": {
                        "name": "em",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The rem value to convert",
                        "defaultStr": ""
                    },
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement to take as source for calculating the em",
                        "default": "document.documentElement",
                        "defaultStr": "document.documentElement"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The pixel value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert rem value to a px one",
                "namespace": "@blackbyte.sugar.js.convert",
                "status": "stable",
                "snippet": {
                    "label": "pxToEm($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { pxToEm } from '@blackbyte/sugar/convert';\npxToEm(36);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "pxToEm.ts",
                "extension": "ts",
                "relPath": "src/js/convert/pxToEm.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.convert.emToPx": {
                "id": "@blackbyte.sugar.js.convert.emToPx",
                "name": "emToPx",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "em": {
                        "name": "em",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The rem value to convert",
                        "defaultStr": ""
                    },
                    "$elm": {
                        "name": "$elm",
                        "type": {
                            "types": [
                                {
                                    "type": "HTMLElement"
                                }
                            ],
                            "raw": "HTMLElement"
                        },
                        "description": "The HTMLElement to take as source for calculating the em",
                        "default": "document.documentElement",
                        "defaultStr": "document.documentElement"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Number"
                            }
                        ],
                        "raw": "Number"
                    },
                    "description": "The pixel value"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    },
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "Convert rem value to a px one",
                "namespace": "@blackbyte.sugar.js.convert",
                "status": "stable",
                "snippet": {
                    "label": "emToPx($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { emToPx } from '@blackbyte/sugar/convert';\nemToPx(2);"
                    }
                ],
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "emToPx.ts",
                "extension": "ts",
                "relPath": "src/js/convert/emToPx.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.console.parseHtml": {
                "id": "@blackbyte.sugar.js.console.parseHtml",
                "name": "parseHtml",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "message": {
                        "name": "message",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Array"
                                }
                            ],
                            "raw": "String|Array"
                        },
                        "description": "The message to format of an array of messages to format",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The formated message"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "Parse the simple html tags to format the console message",
                "namespace": "@blackbyte.sugar.js.console",
                "status": "beta",
                "snippet": {
                    "label": "parseHtml($1)"
                },
                "since": "2.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "interface"
                    },
                    {
                        "priority": "normal",
                        "description": "doc"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "parseHtml.ts",
                "extension": "ts",
                "relPath": "src/js/console/parseHtml.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.clipboard.readText": {
                "id": "@blackbyte.sugar.js.clipboard.readText",
                "name": "readText",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise fullfilled when the content has been read correctly"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to read the content of the clipboard",
                "namespace": "@blackbyte.sugar.js.clipboard",
                "status": "stable",
                "snippet": {
                    "label": "__readText($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { copyText, __readText } from '@blackbyte/sugar/clipboard';\nawait readText();"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "readText.ts",
                "extension": "ts",
                "relPath": "src/js/clipboard/readText.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.clipboard.readFile": {
                "id": "@blackbyte.sugar.js.clipboard.readFile",
                "name": "readFile",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise fullfilled when the content has been read correctly"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to read the file copied to clipboard",
                "namespace": "@blackbyte.sugar.js.clipboard",
                "status": "stable",
                "snippet": {
                    "label": "__readFile($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { readFile } from '@blackbyte/sugar/clipboard';\nawait readFile();"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "filename": "readFile.ts",
                "extension": "ts",
                "relPath": "src/js/clipboard/readFile.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.clipboard.copyText": {
                "id": "@blackbyte.sugar.js.clipboard.copyText",
                "name": "copyText",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "text": {
                        "name": "text",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The text to copy",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise fullfilled when the copy has been made correctly"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to copy to the clipboard the passed text",
                "namespace": "@blackbyte.sugar.js.clipboard",
                "status": "stable",
                "snippet": {
                    "label": "__copy($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { copyText } from '@blackbyte/sugar/clipboard';\ncopyText('Hello world');"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://sentry.io/answers/how-do-i-copy-to-the-clipboard-in-javascript/#:~:text=To%20write%20text%20to%20the,in%20the%20active%20browser%20tab.",
                        "description": ""
                    }
                ],
                "filename": "copyText.ts",
                "extension": "ts",
                "relPath": "src/js/clipboard/copyText.ts",
                "children": {}
            },
            "@blackbyte.sugar.js.clipboard.copyFile": {
                "id": "@blackbyte.sugar.js.clipboard.copyFile",
                "name": "copyFile",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "url": {
                        "name": "url",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The file url copy to the clipboard",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Promise"
                            }
                        ],
                        "raw": "Promise"
                    },
                    "description": "A promise fullfilled when the copy has been made correctly"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This function allows you to copy to the clipboard the passed file path/url",
                "namespace": "@blackbyte.sugar.js.clipboard",
                "status": "stable",
                "snippet": {
                    "label": "__copyFile($1)"
                },
                "example": [
                    {
                        "language": "js",
                        "code": "import { copyFile } from '@blackbyte/sugar/clipboard';\ncopyFile('https://www.google.com/favicon.ico');"
                    }
                ],
                "async": true,
                "since": "1.0.0",
                "todo": [
                    {
                        "priority": "normal",
                        "description": "tests"
                    }
                ],
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://sentry.io/answers/how-do-i-copy-to-the-clipboard-in-javascript/#:~:text=To%20write%20text%20to%20the,in%20the%20active%20browser%20tab.",
                        "description": ""
                    }
                ],
                "filename": "copyFile.ts",
                "extension": "ts",
                "relPath": "src/js/clipboard/copyFile.ts",
                "children": {}
            }
        }
    }
}