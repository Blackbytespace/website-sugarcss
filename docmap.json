{
    "map": {},
    "generated": {
        "map": {
            "@blackbyte.sugarcss.css.rule.s-zindex": {
                "id": "@blackbyte.sugarcss.css.rule.s-zindex",
                "name": "s-zindex",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The z-index name you want to get from the config",
                        "defaultStr": ""
                    },
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "An offset to apply to the z-index value",
                        "default": 0,
                        "defaultStr": "0"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to apply a z-index value from the registered z-indexes in the config.",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-zindex-header: 100;\n   --s-zindex-chatbot: 200;\n}\n\n.my-element {\n   @s-zindex(header); // z-index: 200;\n   @s-zindex(chatbot); // z-index: 200;\n   @s-zindex(header, -1); // z-index: 199;\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "zindex.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/zindex.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-weight": {
                "id": "@blackbyte.sugarcss.css.rule.s-weight",
                "name": "s-weight",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "weight": {
                        "name": "weight",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The weight you want to get like \"bold\", \"light\", etc...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to get a font weight from the registered ones or from the default ones that are:\n\n- thin: 100\n- extra-light: 200\n- lighter: 200\n- light: 300\n- regular/normal: 400\n- medium: 500\n- semi-bold: 600\n- bold: 700\n- bolder: 800\n- extra-bold: 800\n- black: 900",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-weight-boldeeeeeerrrrrr: 9000;\n}\n\n.my-element {\n   @s-weight(bold); // font-weight: 700;\n   @s-weight(light); // font-weight: 300,\n   @s-weight(boldeeeeeerrrrrr); // font-weight: 9000;\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "weight.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/weight.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-typo": {
                "id": "@blackbyte.sugarcss.css.rule.s-typo",
                "name": "s-typo",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The typo name you want to apply",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to apply a registered typography easily with all his properties like:\n- `font`: The font to use from the registered ones\n- `size`: The font size to use\n- `line-height`: The line height to use\n- `letter-spacing`: The letter spacing to use\n- `text-transform`: The text transform to use\n- `text-decoration`: The text decoration to use",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-typo($1);"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-typo-h1: s-font(sans) s-size(h1) 1.4 0;\n}\n\n.my-element {\n     @s-font(h1);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "typo.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/typo.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-transition": {
                "id": "@blackbyte.sugarcss.css.rule.s-transition",
                "name": "s-transition",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The transition name you want to apply",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This declaration allows you to apply a registered transition easily.\nTo be able to use this, you need to register at least 1 transition like so:\n\n- `--s-transition-...: all .3s ease-in-out;`",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-transition($1);"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-transition-slow: all .3s ease-in-out;\n}\n\n.my-element {\n     @s-transition(slow);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "transition.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/transition.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-scrollbar": {
                "id": "@blackbyte.sugarcss.css.rule.s-scrollbar",
                "name": "s-scrollbar",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "sizeOrHide": {
                        "name": "sizeOrHide",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The size of the scrollbar or \"hide\" to hide it",
                        "defaultStr": ""
                    },
                    "thumbColor": {
                        "name": "thumbColor",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The thumb color",
                        "defaultStr": ""
                    },
                    "trackColor": {
                        "name": "trackColor",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The track color",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to style the scrollbar of an element or to hide it completely.",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-scrollbar($1, $2, $3);"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ".my-element {\n     @s-scrollbar(10px, s-color(accent), s-color(accent, --darken 20));\n     @s-scrollbar(hide);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "scrollbar.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/scrollbar.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-scale": {
                "id": "@blackbyte.sugarcss.css.rule.s-scale",
                "name": "s-scale",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "ratio": {
                        "name": "ratio",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The scale ratio you want to apply",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This declaration allows you to apply a scale to the current element and his children.\nIt is applied on functions like `s-space`, `s-size`, etc...",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-scale(2);"
                },
                "example": [],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "scale.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/scale.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-radius": {
                "id": "@blackbyte.sugarcss.css.rule.s-radius",
                "name": "s-radius",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The transition name you want to apply",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This declaration allows you to apply a registered raius easily.\nTo be able to use this, you need to register at least 1 radius like in the example below:",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-radius($1);"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-radius-default: 10px;\n   --s-radius-special: 20px 10px 12px 34px;\n}\n\n.my-element {\n     @s-radius();\n}\n\n.my-other-element {\n    @s-radius(special);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "radius.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/radius.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-media": {
                "id": "@blackbyte.sugarcss.css.rule.s-media",
                "name": "s-media",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "query": {
                        "name": "query",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The query to parse",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to define media queries easily with these features:\n\n- Define your own media queries like so: --s-media-desktop: 1024px 9999px;\n- Use defined media queries easily\n- Support for `dark` and `light` media queries\n- Support for &quot;color schema&quot; media queries like `cs-...` that will target elements inside the `cs-...` class\n- Support for &quot;theme&quot; media queries like `theme-...` that will target elements inside the `theme-...` class\n\nSupport for operators like:\n\n- `lt-...`: lower than\n- `lte-...`: lower than or equal\n- `gt-...`: greater than\n- `gte-...`: greater than or equal\n- `e-...`: equal\n- `dark`: dark mode\n- `light`: light mode\n- &#39;theme-...&#39;: theme\n- `cs-...`: color schema",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@media $1;",
                    "code": "@media $1 {\n   $2\n}"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-media-phone: 0 767px;\n   --s-media-tablet: 768px 1023px;\n   --s-media-desktop: 1024px 9999px;\n}\n\n.my-element {\n   @media phone { ... }\n   @media lt-desktop { ... }\n   @media e-tablet { ... }\n   @media dark { ... }\n   @media gt-phone { ... }\n   @media theme-half-life { ... }\n   @media theme-moon { ... }\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "media.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/media.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-map-color": {
                "id": "@blackbyte.sugarcss.css.rule.s-map-color",
                "name": "s-map-color",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The color name you want to map",
                        "default": "accent",
                        "defaultStr": "\"accent\""
                    },
                    "to": {
                        "name": "to",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The color name you want to map to",
                        "default": "current",
                        "defaultStr": "\"current\""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to remap a color with a new one.\nThis is useful when using the `current` coloe in your components.\nYou can then change it by using this rule like this: `@s-map-color(complementary, current);`.\nThis will set the `current` color to the `complementary` one.",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-map-color($1, $2);"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-color-accent: #ff0000;\n   --s-color-complementary: #00ff00;\n   --s-color-current: #0000ff;\n}\n\n.my-element {\n   ._title {\n      color: s-color(current);\n   }\n\n   &.-error {\n     @s-map-color(complementary)\n   }\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "mapColor.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/mapColor.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-grid": {
                "id": "@blackbyte.sugarcss.css.rule.s-grid",
                "name": "s-grid",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "nameOrLayout": {
                        "name": "nameOrLayout",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The grid name you want to apply or directly the grid layout like `1 1 2 _ 3 3 3`",
                        "defaultStr": ""
                    },
                    "gap": {
                        "name": "gap",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The gap you want to apply between each grid cell",
                        "default": 0,
                        "defaultStr": "0"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to apply a grid layout easily.\nYou can either apply a registered grid, or directly\npass the grid layout you want to apply.\nHere&#39;s the &quot;special&quot; characters you can use in your grid layout:\n- &quot;_&quot; mean a new line in the grid layout.\n- &quot;.&quot; mean an empty cell in the grid layout.",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-grid-default: 1 1 2 _ 3 3 3;\n   --s-grid-2cols: 1 2;\n}\n\n.my-element {\n   @s-grid(2cols);\n\n  // or with an inline layout\n  @s-grid('1 1 2 _ 3 3 3', 20px);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "grid.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/grid.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-font": {
                "id": "@blackbyte.sugarcss.css.rule.s-font",
                "name": "s-font",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font name you want to apply",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to apply a registered font easily with all his properties like:\n- `family`: The font family like &quot;sans-serif&quot;, &quot;serif&quot;, etc...\n- `weight`: The font weight like &quot;normal&quot;, &quot;bold&quot;, etc...\n- `style`: The font style like &quot;normal&quot;, &quot;italic&quot;, etc...\n- `variant`: The font variant like &quot;normal&quot;, &quot;small-caps&quot;, etc...\n- `letter-spacing`: The font letter spacing like &quot;normal&quot;, &quot;0.1em&quot;, etc...",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-font($1);"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-font-title: VT323 600 normal normal 0.1em;\n}\n\n.my-element {\n     @s-font(title);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "font.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/font.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-fit": {
                "id": "@blackbyte.sugarcss.css.rule.s-fit",
                "name": "s-fit",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "position": {
                        "name": "position",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The position you want to apply to the element. Can be `absolute`, `abs`, `relative`, `rel`, `fixed` or `fix`",
                        "default": "absolute",
                        "defaultStr": "absolute"
                    },
                    "center": {
                        "name": "center",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "If you want to center the element with `left: 50%`, `top: 50%` and `transform: translate(-50%, -50%)`",
                        "default": false,
                        "defaultStr": "false"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to make the element fit the parent element easily.\nYou can choose the `position` you want as well as if you want to `center` the element\nusing `left: 50%`, `top: 50%` and `transform: translate(-50%, -50%)`.",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-fit($1, $2);"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ".my-element {\n     @s-fit();\n     @s-fit(fixed);\n     @s-fit(abs, true);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "fit.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/fit.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.rule.s-container": {
                "id": "@blackbyte.sugarcss.css.rule.s-container",
                "name": "s-container",
                "type": {
                    "types": [
                        {
                            "type": "AtRule"
                        }
                    ],
                    "raw": "AtRule"
                },
                "param": {
                    "container": {
                        "name": "container",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The container you want to apply to the container. Can be any registered container",
                        "default": "default",
                        "defaultStr": "default"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This rule allows you to make the element a container easily.\nThe container width if relative to the `--s-container-max-width`\nand the `--s-container-side-padding` variables",
                "namespace": "@blackbyte.sugarcss.css.rule",
                "status": "stable",
                "snippet": {
                    "label": "@s-container($1);"
                },
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   // min-width max-width side-padding\n   --s-container-default: 320px 1200px 20px;\n   --s-container-full: 0 100% 20px;\n}\n\n.my-element {\n     @s-container();\n     @s-container(full);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "container.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/rules/container.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-zindex": {
                "id": "@blackbyte.sugarcss.css.function.s-zindex",
                "name": "s-zindex",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The z-index name you want to get from the config",
                        "defaultStr": ""
                    },
                    "offset": {
                        "name": "offset",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "An offset to apply to the z-index value",
                        "default": 0,
                        "defaultStr": "0"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to generate a z-index value from the registered z-indexes in the config.",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-zindex-header: 100;\n   --s-zindex-chatbot: 200;\n}\n\n.my-element {\n   z-index: s-zindex(header); // 200\n   z-index: s-zindex(chatbot); // 200\n   z-index: s-zindex(header, -1); // 199\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "zindex.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/zindex.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-weight": {
                "id": "@blackbyte.sugarcss.css.function.s-weight",
                "name": "s-weight",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "weight": {
                        "name": "weight",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The weight you want to get like \"bold\", \"light\", etc...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to get a font weight from the registered ones or from the default ones that are:\n\n- thin: 100\n- extra-light: 200\n- lighter: 200\n- light: 300\n- regular/normal: 400\n- medium: 500\n- semi-bold: 600\n- bold: 700\n- bolder: 800\n- extra-bold: 800\n- black: 900",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-weight-boldeeeeeerrrrrr: 9000;\n}\n\n.my-element {\n   font-weight: s-weight(bold); // 700\n   font-weight: s-weight(light); // 300\n   font-weight: s-weight(boldeeeeeerrrrrr); // 9000\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "weight.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/weight.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-transition": {
                "id": "@blackbyte.sugarcss.css.function.s-transition",
                "name": "s-transition",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The transition name you want to apply from registered ones",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to apply a transition from the transitions registered ones.",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-transition-slow: all, 0.3s, s-ease();\n   --s-transition-default: all, 0.2s, s-ease();\n   --s-transition-fast: all, 0.1s, s-ease();\n}\n\n.my-element {\n   transition: s-transition(slow);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "transition.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/transition.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-spaces": {
                "id": "@blackbyte.sugarcss.css.function.s-spaces",
                "name": "s-spaces",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "...space": {
                        "name": "...space",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                },
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "Number|String"
                        },
                        "description": "The space(s) you want to apply",
                        "defaultStr": ""
                    },
                    "scalable": {
                        "name": "scalable",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want the space(s) to be scalable or not",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to apply a space depending on the\nmin, max and easing function declared using the `--s-spaces` variable, or registered with\na custom name like --s-space-small, --s-space-medium, etc...",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n     / Define min, max and a easing function\n/\n     --s-spaces: 0 80px;\n\n     / Define named spaces\n/\n     --s-spaces-small: 10px;\n     --s-spaces-medium: 20px;\n     --s-spaces-large: 40px;\n}\n\n.my-element {\n   padding: s-space(10); // 80px / 100\n10 = 8px\n   padding: s-space(100); // 80px / 100\n100 = 80px\n   padding: s-space(small); // 10px\n   padding: s-space(medium); // 20px\n   padding: s-space(large); // 40px\n   padding: s-space(10 false); // not scalable\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "space.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/space.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-size": {
                "id": "@blackbyte.sugarcss.css.function.s-size",
                "name": "s-size",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "...size": {
                        "name": "...size",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                },
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "Number|String"
                        },
                        "description": "The size(s) you want to apply",
                        "defaultStr": ""
                    },
                    "scalable": {
                        "name": "scalable",
                        "type": {
                            "types": [
                                {
                                    "type": "Boolean"
                                }
                            ],
                            "raw": "Boolean"
                        },
                        "description": "Specify if you want the size(s) to be scalable or not",
                        "default": true,
                        "defaultStr": "true"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to apply a size depending on the\nmin, max and easing function declared using the `--s-sizes` variable, or registered with\na custom name like --s-size-small, --s-size-medium, etc...",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n     / Define min, max and a easing function\n/\n     --s-sizes: 0 80px;\n\n     / Define named sizes\n/\n     --s-size-small: 10px;\n     --s-size-medium: 20px;\n     --s-size-large: 40px;\n}\n\n.my-element {\n   padding: s-size(10); // 80px / 100\n10 = 8px\n   padding: s-size(100); // 80px / 100\n100 = 80px\n   padding: s-size(small); // 10px\n   padding: s-size(medium); // 20px\n   padding: s-size(large); // 40px\n   padding: s-space(10 false); // not scalable\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "size.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/size.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-rem": {
                "id": "@blackbyte.sugarcss.css.function.s-rem",
                "name": "s-rem",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "...pxValue": {
                        "name": "...pxValue",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The pixel value(s) you want to convert to rem",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to convert a pixel value to a rem value.\nYou can pass multiple values to be converted at once.",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ".my-element {\n   font-size: s-rem(20px); // 1.25rem\n   padding: s-rem(10px); // 0.625rem\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "rem.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/rem.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-radius": {
                "id": "@blackbyte.sugarcss.css.function.s-radius",
                "name": "s-radius",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "radius": {
                        "name": "radius",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The radius name you want to apply from registered ones",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to apply a radius from the radiuses registered ones.",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-radius-default: 10px;\n   --s-radius-special: 20px, 10px, 12px, 34px;\n}\n\n.my-element {\n   border-radius: s-radius();\n   border-radius: s-radius(special);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "radius.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/radius.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-font-family": {
                "id": "@blackbyte.sugarcss.css.function.s-font-family",
                "name": "s-font-family",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "font": {
                        "name": "font",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font name you want to apply from registered ones",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "Apply a font family from the fonts registered ones.",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n  --s-font-family-code: \"Fira Code\", monospace;\n}\n\n.my-element {\n  font-family: s-font-family(code);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "fontFamily.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/fontFamily.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-font": {
                "id": "@blackbyte.sugarcss.css.function.s-font",
                "name": "s-font",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "font": {
                        "name": "font",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font name you want to apply from registered ones",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "Apply a font from the fonts registered ones.\nThe supported fonts properties are:\n\n- `family`: The font family like &quot;sans-serif&quot;, &quot;serif&quot;, etc...\n- `weight`: The font weight like &quot;normal&quot;, &quot;bold&quot;, etc...\n- `style`: The font style like &quot;normal&quot;, &quot;italic&quot;, etc...\n- `variant`: The font variant like &quot;normal&quot;, &quot;small-caps&quot;, etc...",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n  --s-font-...: \"Roboto,sans-serif\", %weight, %style, %variant;\n  --s-font-family-code: \"Fira Code\", monospace;\n  --s-font-code: s-font-family(code), 300;\n}\n\n.my-element {\n  font: s-font(code);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "font.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/font.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-ease": {
                "id": "@blackbyte.sugarcss.css.function.s-ease",
                "name": "s-ease",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "name": {
                        "name": "name",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing name you want to apply from registered ones",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to apply an easing from the registered ones.",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-ease-default: cubic-bezier(0.745, 0, 0.18, 1);\n   --s-ease-in-out: cubic-bezier(0.86, 0, 0.07, 1);\n}\n\n.my-element {\n   transition: all 1s s-ease();\n   transition: all 1s s-ease(in-out);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "ease.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/ease.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-delay": {
                "id": "@blackbyte.sugarcss.css.function.s-delay",
                "name": "s-delay",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "nameOrDelay": {
                        "name": "nameOrDelay",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "String|Number"
                        },
                        "description": "The delay name to apply or a delay value",
                        "default": "'default'",
                        "defaultStr": "'default'"
                    },
                    "delay": {
                        "name": "delay",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "An additional delay to add to the registered one",
                        "default": 0,
                        "defaultStr": "0"
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This function allows you to apply some delay based on the registered ones in your congfig.\nYou can also pass another delay to add to the registered one.",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-delay-default: 0.2s;\n   --s-delay-in-viewport: 1s;\n}\n\n.my-element {\n    transition-delay: s-delay(); // 0.2s\n    transition-delay: s-delay(in-viewport); // 1s\n    transition-delay: s-delay(in-viewport, 0.5s); // 1.5s\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "delay.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/delay.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-container": {
                "id": "@blackbyte.sugarcss.css.function.s-container",
                "name": "s-container",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "prop": {
                        "name": "prop",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The container property wanted",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "Allow to get some container related properties like:\n\n- `width`: The calculated container width relative to the `--s-container-max-width` and the `--s-container-side-padding` variables\n- `minWidth` (`min-width`): The min width of the container\n- `maxWidth` (`max-width`): The max width of the container\n- `sidePadding` (`side-padding`): The side padding of the container",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-container-default: 320px, 1200px, 20px;\n}\n\n.my-element {\n   width: s-container(width);\n\n   min-width: s-container(minWidth);\n   max-width: s-container(maxWidth);\n   padding-left: s-container(sidePadding);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "container.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/container.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.function.s-color": {
                "id": "@blackbyte.sugarcss.css.function.s-color",
                "name": "s-color",
                "type": {
                    "types": [
                        {
                            "type": "Function"
                        }
                    ],
                    "raw": "Function"
                },
                "param": {
                    "color": {
                        "name": "color",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The color name you want to apply like \"main\", \"accent\", etc...",
                        "defaultStr": ""
                    },
                    "shadeOrModifiers": {
                        "name": "shadeOrModifiers",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The shade name you want to apply like \"text\", \"placeholder\", etc... or a string of modifiers like --lighten 10 --saturate 20",
                        "defaultStr": ""
                    },
                    "modifiers": {
                        "name": "modifiers",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "A string of modifiers like --lighten 10 --saturate 20, etc...",
                        "defaultStr": ""
                    }
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "Apply a color from the colors registered ones.\nAllow to apply modifiers or shades to the color like darken, lighten, saturate, desaturate, spin, etc...\nHere&#39;s the list of available modifiers:\n\n- `lightness`: 0-100\n- `lighten`: 0-100\n- `darken`: 0-100\n- `saturation`: 0-100\n- `saturate`: 0-100\n- `desaturate`: 0-100\n- `hue`: 0-360\n- `spin`: 0-360\n- `alpha`: 0-1\n\nThe shades are registered like so: --s-shade-placeholder: --darken 10;",
                "namespace": "@blackbyte.sugarcss.css.function",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-shade-test: --lighten 10;\n}\n\n.my-element {\n  color: s-color(accent);\n  color: s-color(accent, test);\n  color: s-color(accent, --darken 20 --spin 30);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "color.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/functions/color.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-typo": {
                "id": "@blackbyte.sugarcss.css.declaration.s-typo",
                "name": "s-typo",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "font": {
                        "name": "font",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font to use from the registered ones",
                        "defaultStr": ""
                    },
                    "size": {
                        "name": "size",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The font size to use",
                        "default": "1em",
                        "defaultStr": "1em"
                    },
                    "line-height": {
                        "name": "line-height",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The line height to use",
                        "default": 1,
                        "defaultStr": "1"
                    },
                    "letter-spacing": {
                        "name": "letter-spacing",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The letter spacing to use",
                        "default": 0,
                        "defaultStr": "0"
                    },
                    "text-transform": {
                        "name": "text-transform",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The text transform to use",
                        "default": "none",
                        "defaultStr": "none"
                    },
                    "text-decoration": {
                        "name": "text-decoration",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The text decoration to use",
                        "default": "none",
                        "defaultStr": "none"
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare a typography easily and use it in your css.\nYou can declare as many typos as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n  --s-typo-h1: s-font(title) s-size(h1) 1.4 0;\n  --s-typo-h2: s-font(title) s-size(h2) 1.2 0 uppercase;\n  --s-typo-p: s-font(default) s-size(p) 1.4 0 lowercase underline;\n}\n\n.my-element {\n   @s-typo(h1);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "typo.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/typo.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-transition": {
                "id": "@blackbyte.sugarcss.css.declaration.s-transition",
                "name": "s-transition",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "min": {
                        "name": "min",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the min size",
                        "defaultStr": ""
                    },
                    "max": {
                        "name": "max",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the max size",
                        "defaultStr": ""
                    },
                    "easing": {
                        "name": "easing",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the size",
                        "default": "'linear'",
                        "defaultStr": "'linear'"
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to register a transition value that you can use in your css easily.\nYou can register as many transition as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-transition-slow: all 0.3s s-ease();\n   --s-transition-default: all 0.2s s-ease();\n   --s-transition-fast: all 0.1s s-ease();\n}\n\n.my-element {\n   transition: s-transition(slow);\n\n   // or using a mixin\n   @s-transition(default);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "transition.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/transition.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-spaces": {
                "id": "@blackbyte.sugarcss.css.declaration.s-spaces",
                "name": "s-spaces",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "min": {
                        "name": "min",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the min space",
                        "defaultStr": ""
                    },
                    "max": {
                        "name": "max",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the max space",
                        "defaultStr": ""
                    },
                    "easing": {
                        "name": "easing",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the space",
                        "default": "'linear'",
                        "defaultStr": "'linear'"
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare the spaces values to use in your css.\nYou can either declare a min and max space value and an easing function to be used when you\nask for a space value with a number.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n     --s-spaces: 0 80px;\n}\n\n.my-element {\n   padding: s-space(10); // 80px / 100\n10 = 8px\n   padding: s-space(100); // 80px / 100\n100 = 80px\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "spaces.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/spaces.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-space": {
                "id": "@blackbyte.sugarcss.css.declaration.s-space",
                "name": "s-space",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The value to register for your space",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variables allows you to register a space value that you can use in your css easily.\nthrough the s-space() function.\nYou can register as many space as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n\n     --s-space-small: 10px;\n     --s-space-medium: 20px;\n     --s-space-large: 40px;\n}\n\n.my-element {\n   padding: s-space(small); // 10px\n   padding: s-space(medium); // 20px\n   padding: s-space(large); // 40px\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "space.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/space.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-sizes": {
                "id": "@blackbyte.sugarcss.css.declaration.s-sizes",
                "name": "s-sizes",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "min": {
                        "name": "min",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the min size",
                        "defaultStr": ""
                    },
                    "max": {
                        "name": "max",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the max size",
                        "defaultStr": ""
                    },
                    "easing": {
                        "name": "easing",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing value for the size",
                        "default": "'linear'",
                        "defaultStr": "'linear'"
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare the sizes values to use in your css.\nYou can either declare a min and max size value and an easing function to be used when you\nask for a size value with a number.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n     --s-sizes: 0 80px;\n}\n\n.my-element {\n   padding: s-size(10); // 80px / 100\n10 = 8px\n   padding: s-size(100); // 80px / 100\n100 = 80px\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "sizes.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/sizes.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-size": {
                "id": "@blackbyte.sugarcss.css.declaration.s-size",
                "name": "s-size",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "Number"
                                }
                            ],
                            "raw": "Number"
                        },
                        "description": "The value to register for your size",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variables allows you to register a size value that you can use in your css easily.\nthrough the s-size() function.\nYou can register as many size as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n\n     --s-size-small: 10px;\n     --s-size-medium: 20px;\n     --s-size-large: 40px;\n}\n\n.my-element {\n   padding: s-size(small); // 10px\n   padding: s-size(medium); // 20px\n   padding: s-size(large); // 40px\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "size.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/size.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-shade": {
                "id": "@blackbyte.sugarcss.css.declaration.s-shade",
                "name": "s-shade",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "color": {
                        "name": "color",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The color value to declare",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare a color shade easily and use it in your css.\nYou can declare as many color shades as you want.\n\nAvailable modifiers:\n- `lightness`: 0-100\n- `lighten`: 0-100\n- `darken`: 0-100\n- `saturation`: 0-100\n- `saturate`: 0-100\n- `desaturate`: 0-100\n- `hue`: 0-360\n- `spin`: 0-360\n- `alpha`: 0-1",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-color-main: #ff0000;\n\n   --s-shade-text: --lighten 20;\n   --s-shade-text-main: --lighten 35;\n   --s-shade-placeholder: --alpha 0.4;\n   --s-shade-foreground: --lighten 50;\n   --s-shade-background: --darken 40;\n   --s-shade-surface: --darken 40;\n   --s-shade-border: --alpha 0.2;\n   --s-shade-hover: --lighten 40;\n   --s-shade-active: --darken 10;\n}\n\n.my-element {\n  color: s-color(accent);\n  color: s-color(accent, test);\n  color: s-color(accent, --darken 20 --spin 30);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "shade.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/shade.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-setting": {
                "id": "@blackbyte.sugarcss.css.declaration.s-setting",
                "name": "s-setting",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "value": {
                        "name": "value",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The setting value to set",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to override default settings easily directly into your css.\n\nAvailable settings:\n- `--s-setting-mobile-first`: Specify if the mobile first approach should be used for media queries.\n- `--s-setting-rem-factor`: The factor to use when converting px to rem. So if you want 1rem = 16px, set this value to 0.0625 (1/16).\n- `--s-setting-px-to-rem`: Specify if you want to convert px to rem automatically.\n- `--s-setting-opacity-zero-value`: Specify whith value should be used for all `opacity: 0` declarations. This is useful to avoid some issues where browsers don&#39;t recognize an element with `opacity: 0` as if it was in the viewport.\n- `--s-setting-verbose`: Enable/disable verbose mode.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-setting-mobile-first: true;\n   --s-setting-rem-factor: 0.0625;\n   --s-setting-px-to-rem: true;\n   --s-setting-opacity-zero-value: 0.0001;\n   --s-setting-verbose: false;\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "setting.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/setting.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-radius": {
                "id": "@blackbyte.sugarcss.css.declaration.s-radius",
                "name": "s-radius",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "topLeftOrAll": {
                        "name": "topLeftOrAll",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The top left radius value or the same value for all corners",
                        "defaultStr": ""
                    },
                    "topRight": {
                        "name": "topRight",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The top right radius value",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "bottomRight": {
                        "name": "bottomRight",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The bottom right radius value",
                        "default": null,
                        "defaultStr": "null"
                    },
                    "bottomLeft": {
                        "name": "bottomLeft",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The bottom left radius value",
                        "default": null,
                        "defaultStr": "null"
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare a radius easily and use it in your css.\nYou can declare as many radius as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-radius-default: 10px;\n   --s-radius-special: 20px 10px 12px 34px;\n}\n\n.my-element {\n   border-radius: s-radius();\n   border-radius: s-radius(special);\n\n  // or using a mixin\n  @s-radius(special);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "radius.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/radius.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-media": {
                "id": "@blackbyte.sugarcss.css.declaration.s-media",
                "name": "s-media",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "min": {
                        "name": "min",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The min value for the media query",
                        "defaultStr": ""
                    },
                    "max": {
                        "name": "max",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The max value for the media query",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare a media query easily and use it in your css.\nYou can declare as many media queries as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-media-mobile: 0 768px;\n   --s-media-tablet: 769px 1024px;\n   --s-media-desktop: 1025px;\n   --s-media-wide: 1440px;\n}\n\n.my-element {\n   color: s-color(accent);\n\n   @media mobile {\n       color: red;\n   }\n\n   @media lt-tablet {\n       color: blue;\n   }\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "media.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/media.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-grid": {
                "id": "@blackbyte.sugarcss.css.declaration.s-grid",
                "name": "s-grid",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "layout": {
                        "name": "layout",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The grid layout to register like `1 1 2 _ 3 3 3`",
                        "defaultStr": ""
                    },
                    "gap": {
                        "name": "gap",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The grid gap to register like `20px`",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to register some grid layouts that you can use in your css.\nYou can register as many grid as you want like in the example below.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-grid-default: '1 1 2 _ 3 3 3' 20px;\n   --s-grid-2cols: '1 2' 40px;\n}\n\n.my-element {\n   @s-grid(default);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "grid.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/grid.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-font-family": {
                "id": "@blackbyte.sugarcss.css.declaration.s-font-family",
                "name": "s-font-family",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "family": {
                        "name": "family",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font family to use",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare a font family easily and use it in your css.\nYou can declare as many font families as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-font-family-sans: 'Roboto', sans-serif;\n   --s-font-family-serif: 'Merriweather', serif;\n   --s-font-family-code: 'Monaco', sans-serif;\n   --s-font-family-quote: 'Palatino', serif;\n}\n\n.my-element {\n   font-family: s-font-family(code);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "fontFamily.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/fontFamily.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-font": {
                "id": "@blackbyte.sugarcss.css.declaration.s-font",
                "name": "s-font",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "family": {
                        "name": "family",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font family to use",
                        "defaultStr": ""
                    },
                    "weight": {
                        "name": "weight",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font weight to use",
                        "defaultStr": ""
                    },
                    "style": {
                        "name": "style",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font style to use",
                        "defaultStr": ""
                    },
                    "variant": {
                        "name": "variant",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The font variant to use",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare a font easily and use it in your css.\nYou can declare as many fonts as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-font-default: s-font-family(sans);\n   --s-font-lead: s-font-family(sans);\n   --s-font-title: VT323 600;\n   --s-font-code: s-font-family(code) 300;\n}\n\n.my-element {\n   font: s-font(default);\n   font: s-font(lead);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "font.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/font.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-ease": {
                "id": "@blackbyte.sugarcss.css.declaration.s-ease",
                "name": "s-ease",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "easing": {
                        "name": "easing",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The easing you want to declare",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare an easing function easily and use it in your css.\nYou can declare as many easings as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-ease-default: cubic-bezier(0.745, 0, 0.18, 1);\n}\n\n.my-element {\n   transition: all 0.3s s-ease(default);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "ease.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/ease.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-delay": {
                "id": "@blackbyte.sugarcss.css.declaration.s-delay",
                "name": "s-delay",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "delay": {
                        "name": "delay",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The delay to register like `200ms`",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to register some delays values that can be used later using the\n`s-delay` function. You can pass then another time value that will be added to the registered delay.\nAccepted unit is `s`.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-delay-default: 0.2s;\n   --s-delay-in-viewport: 1s;\n}\n\n.my-element {\n    transition-delay: s-delay(); // 0.2s\n    transition-delay: s-delay(in-viewport); // 1s\n    transition-delay: s-delay(in-viewport, 0.5s); // 1.5s\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "delay.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/delay.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-container": {
                "id": "@blackbyte.sugarcss.css.declaration.s-container",
                "name": "s-container",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "minWidth": {
                        "name": "minWidth",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The min width of the container",
                        "defaultStr": ""
                    },
                    "maxWidth": {
                        "name": "maxWidth",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The max width of the container",
                        "defaultStr": ""
                    },
                    "sidePadding": {
                        "name": "sidePadding",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The side padding of the container",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "The container variables allows you to specify some container related variables like the max-width, side padding, etc...",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-container-default: 320px 1200px 20px;\n   --s-container-full: 0 100% 20px;\n}\n\n.my-element {\n   @s-container();\n   @s-container(full);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "container.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/container.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.declaration.s-color": {
                "id": "@blackbyte.sugarcss.css.declaration.s-color",
                "name": "s-color",
                "type": {
                    "types": [
                        {
                            "type": "Declaration"
                        }
                    ],
                    "raw": "Declaration"
                },
                "param": {
                    "color": {
                        "name": "color",
                        "type": {
                            "types": [
                                {
                                    "type": "String"
                                }
                            ],
                            "raw": "String"
                        },
                        "description": "The color value to declare",
                        "defaultStr": ""
                    }
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This variable allows you to declare a color easily and use it in your css.\nYou can declare as many colors as you want.",
                "namespace": "@blackbyte.sugarcss.css.declaration",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ":root {\n   --s-color-main: #ff0000;\n   --s-color-accent: #d2b02d;\n   --s-color-complementary: #00f0ff;\n   --s-color-ternary: #9ec468;\n}\n\n.my-element {\n  color: s-color(accent);\n  color: s-color(accent, --saturation 100);\n  color: s-color(accent, --darken 20 --spin 30);\n  color: s-color(complementary, --alpha 0.2);\n}"
                    }
                ],
                "since": "0.0.1",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "color.ts",
                "extension": "ts",
                "relPath": "src/node/visitors/declarations/color.ts",
                "children": {}
            },
            "@blackbyte.sugarcss.css.mixins.s-visually-hidden": {
                "id": "@blackbyte.sugarcss.css.mixins.s-visually-hidden",
                "name": "s-visually-hidden",
                "type": {
                    "types": [
                        {
                            "type": "Mixin"
                        }
                    ],
                    "raw": "Mixin"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This mixin allows you to create a visually hidden element",
                "namespace": "@blackbyte.sugarcss.css.mixins",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": "@include s-visually-hidden;"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://www.a11yproject.com/posts/how-to-hide-content/",
                        "description": ""
                    }
                ],
                "filename": "visuallyHidden.css",
                "extension": "css",
                "relPath": "src/css/mixins/visuallyHidden.css",
                "children": {}
            },
            "@blackbyte.sugarcss.css.mixins.s-reset": {
                "id": "@blackbyte.sugarcss.css.mixins.s-reset",
                "name": "s-reset",
                "type": {
                    "types": [
                        {
                            "type": "Mixin"
                        }
                    ],
                    "raw": "Mixin"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This mixin allows you to apply the destyle css with some additional\nreset rules like:\n- Reset `mark` background color\n- Font smoothing to &quot;antialiased&quot; for --webkit browsers\n- Apply `user-select: none` to all elements except input, textarea, [contenteditable], code, h1, h2, h3, h4, h5, h6, p, td, th, blockquote, li, dl, dt, dd\n- Remove the default outline",
                "namespace": "@blackbyte.sugarcss.css.mixins",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": "@include s-reset;"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://nicolas-cusan.github.io/destyle.css/",
                        "description": ""
                    }
                ],
                "filename": "reset.css",
                "extension": "css",
                "relPath": "src/css/mixins/reset.css",
                "children": {}
            },
            "@blackbyte.sugarcss.css.mixins.s-destyle": {
                "id": "@blackbyte.sugarcss.css.mixins.s-destyle",
                "name": "s-destyle",
                "type": {
                    "types": [
                        {
                            "type": "Mixin"
                        }
                    ],
                    "raw": "Mixin"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This mixin allows you to apply the destyle css reset.",
                "namespace": "@blackbyte.sugarcss.css.mixins",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": "@include s-destyle;"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "see": [
                    {
                        "url": "https://nicolas-cusan.github.io/destyle.css/",
                        "description": ""
                    }
                ],
                "filename": "destyle.css",
                "extension": "css",
                "relPath": "src/css/mixins/destyle.css",
                "children": {}
            },
            "@blackbyte.sugarcss.css.mixins.s-burger-menu": {
                "id": "@blackbyte.sugarcss.css.mixins.s-burger-menu",
                "name": "s-burger-menu",
                "type": {
                    "types": [
                        {
                            "type": "Mixin"
                        }
                    ],
                    "raw": "Mixin"
                },
                "return": {
                    "type": {
                        "types": [
                            {
                                "type": "Css"
                            }
                        ],
                        "raw": "Css"
                    },
                    "description": "The generated css"
                },
                "platform": [
                    {
                        "name": "css",
                        "description": ""
                    }
                ],
                "description": "This mixin allows you to create a burger menu icon easily.\nNote that you can use the `s-menu-active` mixin to apply the active state to the menu icon.\nThe color applyed to the menu icon is the `current` color.",
                "namespace": "@blackbyte.sugarcss.css.mixins",
                "status": "stable",
                "example": [
                    {
                        "language": "css",
                        "code": ".my-menu {\n  @include s-burger-menu;\n\n  &:hover {\n    @include s-burger-menu-active;\n  }\n}"
                    }
                ],
                "since": "1.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://hello@blackbyte.space"
                },
                "filename": "burgerMenu.css",
                "extension": "css",
                "relPath": "src/css/mixins/burgerMenu.css",
                "children": {}
            }
        }
    }
}